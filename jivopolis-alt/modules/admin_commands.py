import contextlib
import sqlite3

from .. import bot, Dispatcher, logger

from ..database.sqlitedb import cur, conn
from ..database.functions import get_link, check

from ..misc import OfficialChats, ITEMS
from ..misc.config import SUPPORT_LINK

from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters import Text
from aiogram.utils.deep_linking import encode_payload

async def sqlrun_cmd(message: Message) -> None:
    try:
        rank = cur.execute(f"SELECT rank FROM userdata WHERE user_id={message.from_user.id}").fetchone()[0]
        is_banned = bool(cur.execute(f"SELECT is_banned FROM userdata WHERE user_id = {message.from_user.id}").fetchone()[0])
    except TypeError:
        return await message.reply('üßë‚Äçüé® –°—ç—Ä, —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∂–∏–≤–æ–ø–æ–ª–∏—Å–µ. –ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –∫–æ–º–º–∞–Ω–¥—ã –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.')
    try:
        await check(message.from_user.id, message.chat.id)

        args = message.text[8:]

        if is_banned:
            return await bot.send_message(message.from_user.id, f'üßõüèª‚Äç‚ôÇÔ∏è –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã –≤ –±–æ—Ç–µ. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ - –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ <a href="{SUPPORT_LINK}">–ø–æ–¥–¥–µ—Ä–∂–∫—É</a>.')

        if rank < 2:
            return await message.reply("üë®‚Äç‚öñÔ∏è –°—É–¥–∞—Ä—å, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")

        if args.startswith("SELECT"):
            logger.info(f"someone catch data with SELECT: {args}")
            return await message.reply(cur.execute(args).fetchone())

        approve_cmds = ["select", "update", "set", "delete", "alter", "drop", "insert", "replace"] #–∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ –º–µ–≥–∞-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏

        for request in args.split(' '):
            approve_request = request.lower() in approve_cmds
        if approve_request and rank < 3:
            cur.execute(f"UPDATE userdata SET sql='{request}' WHERE user_id={message.from_user.id}")
            conn.commit()

            await message.answer(
                "<i>ü™ê –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–≥–∞-–∞–¥–º–∏–Ω–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –í–∞–º –ø—Ä–∏–¥—ë—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –∫—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏–º–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç –∑–∞–ø—Ä–æ—Å.\n"
                "\n‚ùóÔ∏è–ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–∫—É—â–∏–π –±—É–¥–µ—Ç —Å—Ç—ë—Ä—Ç.</i>"
            )

            await bot.send_message(
                OfficialChats.MEGACHAT, 
                (
                    f"<i><a href=\"tg://user?id={message.from_user.id}\">{message.from_user.full_name}</a> —Ö–æ—á–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å:\n"
                    f"\n<code>{request}</code></i>",
                ),
                reply_markup=InlineKeyboardMarkup(row_width=1).\
                    add(
                        InlineKeyboardButton(text="üî∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"sqlrun:approve:{message.from_user.id}"), 
                        InlineKeyboardButton(text="üìõ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"sqlrun:decline:{message.from_user.id}")
                    )
            )

        elif args.lower().startswith("select"):
            cur.execute(args)

            values = ''

            for row in cur.fetchall():
                for raw in row:
                    values += "\n" + str(raw)

            if values == '':
                values = 'None'

            return await message.answer(f"<i><b>üßë‚Äçüîß SQLRun –≤–µ—Ä–Ω—É–ª–æ —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: \n</b>{values}</i>")
        elif rank > 2:
            cur.execute(args)
            conn.commit()   
            await message.reply('üßë‚Äçüîß sql cmd executed')         
            return logger.success(f"SQL Query: {args}")

    except Exception as e:
        await message.answer(f"<i><b>something went wrong: </b>{e}</i>")


async def globan_cmd(message: Message) -> None:    
    try:
        rank = cur.execute(f"SELECT rank FROM userdata WHERE user_id = {message.from_user.id}").fetchone()[0]
        is_banned = bool(cur.execute(f"SELECT is_banned FROM userdata WHERE user_id = {message.from_user.id}").fetchone()[0])
    except TypeError:
        return message.reply("üßë‚Äçüé® –°—ç—Ä, —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∂–∏–≤–æ–ø–æ–ª–∏—Å–µ. –ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –∫–æ–º–º–∞–Ω–¥—ã –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")

    if is_banned:
        return bot.send_message(message.from_user.id, f'üßõüèª‚Äç‚ôÇÔ∏è –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã –≤ –±–æ—Ç–µ. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ - –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ <a href="{SUPPORT_LINK}">–ø–æ–¥–¥–µ—Ä–∂–∫—É</a>.')

    if rank < 2:
        return message.reply("üë®‚Äç‚öñÔ∏è –°—É–¥–∞—Ä—å, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")

    args = message.text[7:]

    if args == '':
        return message.reply("üïµüèø‚Äç‚ôÇÔ∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")

    try:
        user_nick = cur.execute(f"SELECT nickname FROM userdata WHERE user_id = '{args}'").fetchone()[0]
        admin_nick = cur.execute(f"SELECT nickname FROM userdata WHERE user_id={message.from_user.id}").fetchone()[0]
    except TypeError:
        user_nick = 'user'
        cur.execute(f"INSERT INTO userdata(user_id, nickname, login_id) VALUES ({args}, 'banned_user', \"{encode_payload(args)}\"")
        await bot.send_message(message.chat.id, f'üë®‚Äçüî¨ –ê–∫–∫–∞—É–Ω—Ç <a href ="tg://user?id={args}>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> –Ω–∞—Å–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω. | <a href="tg://user?id={message.from_user.id}>{admin_nick}</a>')
        await bot.send_message(OfficialChats.LOGCHAT, f'üë®‚Äçüî¨ –ê–∫–∫–∞—É–Ω—Ç <a href ="tg://user?id={args}>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> –Ω–∞—Å–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω. | <a href="tg://user?id={message.from_user.id}>{admin_nick}</a>')

    cur.execute(f"UPDATE userdata SET is_banned=True WHERE user_id={args}")
    conn.commit()

    await bot.send_message(message.chat.id, f'ü•∑ <a href="{await get_link(args)}">{user_nick}</a> [<code>id: {args}</code>] –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω. | <a href = "{await get_link(message.from_user.id)}">{admin_nick}</a>')
    await bot.send_message(OfficialChats.LOGCHAT, f'ü•∑ <a href="{await get_link(args)}">{user_nick}</a> [<code>id: {args}</code>] –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω. | <a href = "{await get_link(message.from_user.id)}">{admin_nick}</a>')


async def getall_cmd(message: Message) -> None:
    try:
        rank = cur.execute(f"SELECT rank FROM userdata WHERE user_id = {message.from_user.id}").fetchone()[0]
        is_banned = bool(cur.execute(f"SELECT is_banned FROM userdata WHERE user_id = {message.from_user.id}").fetchone()[0])
    except TypeError:
        return await message.reply("üßë‚Äçüé® –°—ç—Ä, —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∂–∏–≤–æ–ø–æ–ª–∏—Å–µ. –ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –∫–æ–º–º–∞–Ω–¥—ã –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
    
    if is_banned:
        return await bot.send_message(message.from_user.id, f'üßõüèª‚Äç‚ôÇÔ∏è –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã –≤ –±–æ—Ç–µ. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ - –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ <a href="{SUPPORT_LINK}">–ø–æ–¥–¥–µ—Ä–∂–∫—É</a>.')

    if rank < 2:
        return await message.reply("üë®‚Äç‚öñÔ∏è –°—É–¥–∞—Ä—å, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.") 

    await message.reply('üß¨ Loading...')

    for item in ITEMS:
        with contextlib.suppress(sqlite3.OperationalError):
            cur.execute(f"UPDATE userdata SET {item}={item}+1 WHERE user_id={message.from_user.id}"); conn.commit()
    await message.reply('ü™Ñ –Ø –¥–∞–ª –≤–∞–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ')


def register(dp: Dispatcher):
    dp.register_message_handler(sqlrun_cmd, Text(startswith=".sqlrun"))
    dp.register_message_handler(globan_cmd, Text(startswith='.globan'))
    dp.register_message_handler(getall_cmd, Text(startswith='.getall'))