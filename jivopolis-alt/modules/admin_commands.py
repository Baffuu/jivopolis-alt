from loguru import logger

from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters import Text

from ..bot import bot, Dispatcher

from ..database.sqlitedb import cur, conn, encode_payload
from ..database.functions import get_link
from ..config import CREATOR, log_chat

async def sqlrun_cmd(message: Message):
    try:
        msg = message.text[8:]
        if msg.startswith("SELECT"):
            logger.info(f"someone catch data with SELECT: {msg}")
            message.reply(cur.execute(msg).fetchone())
        cur.execute(msg)
        conn.commit()            
        return logger.success(f"SQL command was runned: {msg}")
    
        '''
        request=message.text[8:].replace("<concat>", "||")
        a = message.from_user
        try:
            cur.execute("SELECT rank FROM userdata WHERE user_id=?", (a.id,))
            rang = cur.fetchone()[0]
        except:
            return
        if rang<2:
            return
        rec = request.lower().replace(";", "").split(" ")
        if not "update" in rec and not "set" in rec and not "delete" in rec and not "alter" in rec and not "drop" in rec and not "insert" in rec and not "replace" in rec:
            try:
                cur.execute(request)
                conn.commit()
                try:
                    rval = ""
                    for row in cur.fetchall():
                        for raw in row:
                            rval = rval+"\n"+str(raw)
                    await message.answer("<i><b>–ó–Ω–∞—á–µ–Ω–∏—è: \n</b>{0}</i>".format(rval), parse_mode="html")
                except Exception as e:
                    await message.answer("<i><b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:</b> {0}</i>".format(e), parse_mode="html")
                    await message.answer("<i>–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω</i>", parse_mode="html")
            except Exception as e:
                await message.answer("<i><b>–ó–∞–ø—Ä–æ—Å –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: \n</b>{0}</i>".format(e), parse_mode = "html")
            return
        cur.execute("UPDATE userdata SET sql=? WHERE user_id=?", (request, a.id,))
        conn.commit()
        await message.answer("<i>–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥, –≤—Ä–µ–¥—è—â–∏–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–∏—Ç –∫–æ–¥ –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n<b>–ü–æ–º–Ω–∏—Ç–µ:</b> –ø–æ–∫–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—ë–Ω, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å</i>", parse_mode="html")
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="approve {0}".format(a.id)))
        markup.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject {0}".format(a.id)))
        await bot.send_message(CREATOR, "<i><a href=\"tg://user?id={0}\">{1}{2}</a> —Ö–æ—á–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å:\n\n<code>{3}</code></i>".format(a.id, a.first_name, " "+a.last_name if a.last_name!=None else "", request), reply_markup=markup)
       '''
    except Exception as e:
        await message.answer("<i><b>–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: </b>{0}</i>".format(e), parse_mode = "html")

async def globan_cmd(message: Message):    
    try:
        rank = cur.execute(f"SELECT rank FROM userdata WHERE user_id = {message.from_user.id}").fetchone()[0]
        is_banned = bool(cur.execute(f"SELECT is_banned FROM userdata WHERE user_id = {message.from_user.id}").fetchone()[0])
    except TypeError:
        return message.reply("üßë‚Äçüé® –°—ç—Ä, —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∂–∏–≤–æ–ø–æ–ª–∏—Å–µ. –ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –∫–æ–º–º–∞–Ω–¥—ã –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
    
    if is_banned:
        return bot.send_message(message.from_user.id, f'üßõüèª‚Äç‚ôÇÔ∏è –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã –≤ –±–æ—Ç–µ. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ - –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ <a href="{SUPPORT_LINK}">–ø–æ–¥–¥–µ—Ä–∂–∫—É</a>.')

    if rank < 2:
        return message.reply("üë®‚Äç‚öñÔ∏è –°—É–¥–∞—Ä—å, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")
    
    else:
        args = message.get_args()

        if args == '':
            return message.reply("üïµüèø‚Äç‚ôÇÔ∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
        
        try:
            user_nick = cur.execute(f"SELECT nickname FROM userdata WHERE user_id = '{args}'").fetchone()[0]
            admin_nick = cur.execute(f"SELECT nickname FROM userdata WHERE user_id={message.from_user.id}").fetchone()[0]
        except TypeError:
            user_nick = 'user'
            cur.execute(f"INSERT INTO userdata(user_id, nickname, login_id) VALUES ({args}, 'banned_user', \"{encode_payload(args)}\"")
            await bot.send_message(message.chat.id, f'üë®‚Äçüî¨ –ê–∫–∫–∞—É–Ω—Ç <a href ="tg://user?id={args}>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> –Ω–∞—Å–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω. | <a href="tg://user?id={message.from_user.id}>{admin_nick}</a>')
            await bot.send_message(log_chat, f'üë®‚Äçüî¨ –ê–∫–∫–∞—É–Ω—Ç <a href ="tg://user?id={args}>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> –Ω–∞—Å–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω. | <a href="tg://user?id={message.from_user.id}>{admin_nick}</a>')
        
        cur.execute(f"UPDATE userdata SET is_banned=True WHERE user_id={args}")
        conn.commit()

        await bot.send_message(message.chat.id, f'ü•∑ <a href="{get_link(args)}">{user_nick}</a> [<code>id: {args}</code>] –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω. | <a href = "{get_link(message.from_user.id)}">{admin_nick}</a>')
        await bot.send_message(log_chat, f'ü•∑ <a href="{get_link(args)}">{user_nick}</a> [<code>id: {args}</code>] –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω. | <a href = "{get_link(message.from_user.id)}">{admin_nick}</a>')

def register(dp: Dispatcher):
    dp.register_message_handler(sqlrun_cmd, Text(startswith=".sqlrun"))
    dp.register_message_handler(globan_cmd, Text(startswith='.globan'))