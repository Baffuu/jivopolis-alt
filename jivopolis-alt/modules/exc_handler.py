from .. import dp, logger, tglog
from ..misc import constants
from aiogram.types import Update


@dp.errors_handler()
async def exception_handler(update: Update, exc_desc: str):
    print(update)
    if hasattr(update, "message"):
        print(update.message)
        event = "message"
        if exc_desc == "None type object is not subscriptable":
            await update.message.reply(
                "üßë‚Äçüé® <i>–°—ç—Ä, —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ. –ü—Ä–µ–∂–¥–µ —á–µ–º "
                "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –∫–æ–º–∞–Ω–¥—ã, –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</i>"
            )
        else:
            await update.message.answer(
                constants.ERROR_MESSAGE.format(exc_desc)
            )

    if hasattr(update, "callback_query"):
        event = "callback_query" # noqa
        if exc_desc == "None type object is not subscriptable":
            logger.exception(exc_desc)
            await update.callback_query.answer(
                "üßë‚Äçüé® <i>–°—ç—Ä, —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ. –ü—Ä–µ–∂–¥–µ —á–µ–º "
                "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –∫–æ–º–∞–Ω–¥—ã, –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</i>",
                show_alert=True
            )
    await tglog(f"üêô Exception:<code> {exc_desc}</code>.", "#exception")
    logger.exception(exc_desc)
