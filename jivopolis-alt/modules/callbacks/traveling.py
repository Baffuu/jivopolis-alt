from ...database.functions import cur, conn, Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, buy, bot, get_link, get_mask, buybutton, itemdata
from ...config import METRO, WALK, CITY, trains, villages, walks, ITEMS, lvlcar, limeteds, lvlcab
import asyncio
import time

async def city(message: Message, user_id: str):
    place = cur.execute(f"SELECT current_place FROM userdata WHERE user_id={user_id}").fetchone()[0]
    line = cur.execute(f"SELECT line FROM userdata WHERE user_id={user_id}").fetchone()[0]
    car = cur.execute(f"SELECT blue_car+red_car FROM userdata WHERE user_id={user_id}").fetchone()[0] #todo MORE CARS
    
    markup = InlineKeyboardMarkup(row_width = 6)
    
    if not place in METRO[line]:
        for thisline in METRO:
            if place in thisline:
                cur.execute(f"UPDATE userdata SET line={METRO.index(thisline)} WHERE user_id={user_id}")
                conn.commit()
                
                line = METRO.index(thisline)

                break

    if line==2 or line==0:
        metro = InlineKeyboardButton(text="üöâ", callback_data="metro")
    else:
        metro = InlineKeyboardButton(text="üöá", callback_data="metro")

    caritem = InlineKeyboardButton(text="üöó", callback_data="car_menu")
    trbusitem = InlineKeyboardButton(text="üöé", callback_data="trolleybus")
    trainitem = InlineKeyboardButton(text="üöÜ", callback_data="railway_station")
    trlounge = InlineKeyboardButton(text="üöÜ", callback_data="lounge")
    taxi = InlineKeyboardButton(text="üöï", callback_data="taxi_menu")
    busitem = InlineKeyboardButton(text="üöå", callback_data="bus")
    lounge = InlineKeyboardButton(text="üöå", callback_data="bus_lounge")
    trans = []
    for thisline in METRO:
        if place in thisline:
            trans.append(metro)
            break
    if place in CITY:
        trans.append(trbusitem)
    if place in trains[0]:
        if place in ["–í–æ–∫–∑–∞–ª—å–Ω–∞—è", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∞—è", "–°—Ç–∞–Ω—Ü–∏—è –ö–æ—Ç–∞–π"]:
            trans.append(trainitem)
        else:
            trans.append(trlounge)
    if place in villages:
        if place in ["–ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª –ñ–∏–≤–æ–ø–æ–ª–∏—Å", "–ê–° –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–æ"]:
            trans.append(busitem)
        else:
            trans.append(lounge)
    if place in CITY:
        trans.append(taxi)
        if car>=1:
            trans.append(caritem)
    markup.add(*trans)
    iswalk = -1
    index = -1
    for wlk in WALK:
        if place in wlk:
            iswalk = WALK.index(wlk)
            break
    for wnk in WALK:
        walkindex = WALK.index(wnk)
        if iswalk == -1 or walkindex == iswalk or wnk[WALK[iswalk].index(place)] == "":
            continue
        index = WALK[iswalk].index(place)
        markup.add(InlineKeyboardButton(text=f"üö∂ {wnk[index]} - {walks[index]} —Å–µ–∫—É–Ω–¥ —Ö–æ–¥—å–±—ã".format(wnk[index], walks[index]), callback_data="walk_{0}".format(wnk[index])))
    print(time.time())
    if place=="–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è": #todo match (place):
        markup.add(InlineKeyboardButton(text="üå≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å—Å–∫–∏–π –±–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–π —Å–∞–¥", callback_data="botan_garden"))
    elif place=="–ñ–∏–≤–±–∞–Ω–∫":
        markup.add(InlineKeyboardButton(text="üè¶ –ñ–∏–≤–æ–ø–æ–ª–∏—Å—Å–∫–∏–π –±–∞–Ω–∫", callback_data="bank"))
    elif place=="–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç":
        markup.add(InlineKeyboardButton(text="üè´ –ñ–∏–≤–æ–ø–æ–ª–∏—Å—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", callback_data="university"))
    elif place=="–ö–æ—Ç–∞–π—Å–∫–∏–π –ú–µ–¥–∏–Ω—Å—Ç–∏—Ç—É—Ç":
        markup.add(InlineKeyboardButton(text="üè´ –ö–æ—Ç–∞–π—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –Ω–∞—É–∫", callback_data="university"))
    elif place=="–ê–≤—Ç–æ–ø–∞—Ä–∫ –∏–º. –ö–æ—Ç–∞":
        markup.add(InlineKeyboardButton(text="üöó –ê–≤—Ç–æ–ø–∞—Ä–∫ –∏–º–µ–Ω–∏ Cat Painted", callback_data="car_park"))
    elif place=="–¢–¶ –ú–∏–ì":
        markup.add(InlineKeyboardButton(text="üè¨ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä –ú–∏–ì", callback_data="mall"))
    elif place=="–ì–µ–æ—Ä–≥–∏–µ–≤—Å–∫–∞—è":
        markup.add(InlineKeyboardButton(text="üç∞ –ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è \"–°–ª–∞–¥–∫–æ–Å–∂–∫–∞\"", callback_data="candy_shop"))
    elif place=="–†–∞–π–±–æ–ª—å–Ω–∏—Ü–∞":
        markup.add(InlineKeyboardButton(text="üè• –ñ–∏–≤–æ–ø–æ–ª–∏—Å—Å–∫–∞—è —Ä–∞–π–æ–Ω–Ω–∞—è –±–æ–ª—å–Ω–∏—Ü–∞", callback_data="hospital"))
    elif place=="–°—Ç–∞—Ä–æ–∫–æ—Ç–∞–π—Å–∫–∏–π –§–ê–ü":
        markup.add(InlineKeyboardButton(text="üè• –°—Ç–∞—Ä–æ–∫–æ—Ç–∞–π—Å–∫–∏–π —Ñ–µ–ª—å–¥—à–µ—Ä—Å–∫–∏–π –ø—É–Ω–∫—Ç", callback_data="hospital"))
    elif place=="–ó–æ–æ–ø–∞—Ä–∫":
        markup.add(InlineKeyboardButton(text="ü¶ä –ñ–∏–≤–æ–ø–æ–ª–∏—Å—Å–∫–∏–π –∑–æ–æ–ø–∞—Ä–∫", callback_data="zoo"))
    elif place=="–ê—ç—Ä–æ–ø–æ—Ä—Ç –ö–æ—Ç–∞–π":
        markup.add(InlineKeyboardButton(text="‚úà –ê—ç—Ä–æ–ø–æ—Ä—Ç –ö–æ—Ç–∞–π", callback_data="airport"))
    elif place=="–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç":
        markup.add(InlineKeyboardButton(text="‚úà –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç –ñ–∏–≤–æ–ø–æ–ª–∏—Å", callback_data="airport"))
    elif place=="–ñ–∏–≤–æ–ø–æ–ª–∏—Å—Å–∫–∏–π –º—É–∑–µ–π":
        markup.add(InlineKeyboardButton(text="üèõ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º—É–∑–µ–π –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞", callback_data="museum"))
    elif place=="–ú–∞–∫–µ–µ–≤–∫–∞":
        markup.add(InlineKeyboardButton(text="üçè \"–ù–∞—Ç—É—Ä–∞–ª\". –§—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏", callback_data="fruit_shop"))
    elif place=="–†—ã–Ω–æ–∫":
        markup.add(InlineKeyboardButton(text="üè£ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫", callback_data="central_market_menu"))
    elif place=="–ö–æ—Ç–∞–π—Å–∫–∏–π —ç–ª–µ–∫—Ç—Ä–æ–∑–∞–≤–æ–¥":
        markup.add(InlineKeyboardButton(text="üè≠ –ö–æ—Ç–∞–π—Å–∫–∏–π –∑–∞–≤–æ–¥ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π", callback_data="factory"))
    elif place=="–°—Ç–∞–¥–∏–æ–Ω":
        markup.add(InlineKeyboardButton(text="üèü –ñ–∏–≤–æ–ø–æ–ª–∏—Å-–ê—Ä–µ–Ω–∞", url="t.me/jivopolistour"))
    elif place=="–†–æ—â–∞":
        markup.add(InlineKeyboardButton(text="üåæ –§–µ—Ä–º–∞", callback_data="farm"))
    elif place=="–ì–µ–Ω–µ—Ä–∞–ª–∞ –®–µ–ª–±–∏":
        markup.add(InlineKeyboardButton(text="üì± –ú–∞–≥–∞–∑–∏–Ω —Ç–µ—Ö–Ω–∏–∫–∏ –∏–º–µ–Ω–∏ –®–µ–ª–±–∏", callback_data="phone_shop"))
    print(time.time())
    '''cur.execute("SELECT * FROM clandata WHERE islocation=1 AND hqplace=? AND type=?", (place, "public",))
    for row in cur:
        markup.add(InlineKeyboardButton(text="üè¢ {0}".format(row[1]), url=row[8]))'''
    markup.add(InlineKeyboardButton(text="üì° GPS", callback_data="gps"))
    markup.add(InlineKeyboardButton(text="üè¢ –ö–ª–∞–Ω—ã —Ä—è–¥–æ–º", callback_data="local_clans"), InlineKeyboardButton(text="üë§ –ö—Ç–æ –∑–¥–µ—Å—å?", callback_data="local_people"))
    await message.answer("<i>–í –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ –µ—Å—Ç—å –º–Ω–æ–≥–æ —á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ!\n&#127963; <b>{0}</b></i>".format(place), parse_mode = "html", reply_markup = markup)
    chid = message.chat.id

async def buycall(call: CallbackQuery):
    user_id = call.from_user.id
    item = call.data.split(':')[0][4:]
    try:
        tip = int(call.data.split(':')[1])
    except:
        tip = 0
    if item in ITEMS:
        if ITEMS[item][4][0] == 'car':
            level = cur.execute(f"SELECT level FROM userdata WHERE user_id={user_id}").fetchone()[0]
            if level<lvlcar:
                return await call.answer(text='‚ùå –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å —É—Ä–æ–≤–Ω—è {0}'.format(lvlcar), show_alert = True)
                
            #await achieve(a.id, call.message.chat.id, 'myauto')
        await buy(call, item, user_id, cost=ITEMS[item][3]+tip)
    else:
        raise ValueError("no such item")

async def car_menu(call: CallbackQuery):
    message = call.message
    user_id = call.from_user.id
    car = cur.execute(f"SELECT red_car+blue_car FROM userdata WHERE user_id={user_id}").fetchone()[0] #todo more cars

    if car<1:
        return await call.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω—ã', show_alert = True)
        
    markup = InlineKeyboardMarkup(row_width=2)
    places = []
    
    for place in CITY:
        places.append(InlineKeyboardButton(text=f'{place}', callback_data=f'goto_on_car_{place}'))
    markup.add(*places)
    await message.answer('<i>üë®‚Äç‚úàÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏.</i>', parse_mode='html', reply_markup=markup)

async def goto_on_car(call: CallbackQuery):
    user_id = call.from_user.id
    car = cur.execute(f"SELECT red_car+blue_car FROM userdata WHERE user_id = {user_id}").fetchone()[0]

    if car < 1:
        return await call.message.answer('<i>&#128663; –£ –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω—ã</i>', parse_mode='html')
        
    station = call.data[12:]
    await call.message.answer('<i>–°–∫–æ—Ä–æ –ø—Ä–∏–µ–¥–µ–º!</i>', parse_mode='html')

    try:
        await bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass

    await asyncio.sleep(15)
    cur.execute(f"UPDATE userdata SET current_place=\"{station}\" WHERE user_id={user_id}"); conn.commit()
    await city(call.message, call.from_user.id)

async def local_people(call: CallbackQuery):
    place = cur.execute(f"SELECT current_place FROM userdata WHERE user_id = {call.from_user.id}").fetchone()[0]
    usercount = cur.execute(f"SELECT count(*) FROM userdata WHERE current_place = '{place}'").fetchone()[0]
    
    if usercount < 1:
        return await call.message.answer('<i>üë§ –í—ã —Å—Ç–æ–∏—Ç–µ –æ–¥–∏–Ω, –æ–≥–ª—è–¥—ã–≤–∞—è—Å—å –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º‚Ä¶</i>\n\
            \nüòì –í –≤–∞—à–µ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª—é–¥–µ–π. –ü–æ–º–∏–º–æ –≤–∞—Å, —Å–∞–º–æ —Å–æ–±–æ–π.', parse_mode = 'html')
        
    index = 0
    users = ''

    cur.execute(f"SELECT * FROM userdata WHERE current_place = '{place}'")

    for row in cur.fetchall():
        index += 1
        users += f'\n{index}. <a href="{get_link(row[1])}">{get_mask(row[1])} {row[2]}</a>'

    await call.message.answer(f'<i>&#128100; –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ <b>{place}</b>: <b>{users}</b></i>', parse_mode = 'html')

async def phone_shop(call: CallbackQuery):
    place = cur.execute(f"SELECT current_place FROM userdata WHERE user_id={call.from_user.id}").fetchone()[0]
    
    if place != '–ì–µ–Ω–µ—Ä–∞–ª–∞ –®–µ–ª–±–∏':
        return #todo callback answer

    await call.message.answer('<i>üì± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ç–µ—Ö–Ω–∏–∫–∏ –∏–º–µ–Ω–∏ –®–µ–ª–±–∏</i>', reply_markup = InlineKeyboardMarkup().\
        add(buybutton('phone')), parse_mode = 'html') 

async def candy_shop(call: CallbackQuery):
    place = cur.execute(f"SELECT current_place FROM userdata WHERE user_id={call.from_user.id}").fetchone()[0]
    if place != '–ì–µ–æ—Ä–≥–∏–µ–≤—Å–∫–∞—è':
        return #todo callback answer
    markup = InlineKeyboardMarkup(row_width=1)
    buttons = [buybutton('donut'), buybutton('cake'), buybutton('cookie'),
               #buybutton('yogurt'),
               buybutton('chocolate'), buybutton('ice_cream'),
               buybutton('shaved_ice')]

    sellitems = list(filter(lambda item: item is not None, sellitems))

    markup.add(*buttons)

    return await call.message.answer('<i>&#127856; –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫—É—é!</i>', reply_markup = markup, parse_mode = 'html')

async def japan_shop(call: CallbackQuery):
    place = cur.execute(f"SELECT current_place FROM userdata WHERE user_id={call.from_user.id}").fetchone()[0]

    if place != '–¢–¶ –ú–∏–ì':
        return #todo callback answer

    markup = InlineKeyboardMarkup(row_width=1)
    buttons = [buybutton('bento'), buybutton('pasta'), buybutton('rice')]

    sellitems = list(filter(lambda item: item is not None, sellitems))

    markup.add(*buttons)

    return await call.message.answer('<i>&#127857; –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –≤–æ—Å—Ç–æ—á–Ω–æ–π –∫—É—Ö–Ω–∏ "–Ø–ø–æ–Ω –ï–Ω–æ—Ç"!</i>', reply_markup = markup, parse_mode = 'html')

async def mall(call: CallbackQuery):
    place = cur.execute(f"SELECT current_place FROM userdata WHERE user_id={call.from_user.id}").fetchone()[0]
    
    if place != '–¢–¶ –ú–∏–ì':
        return #todo callback answer

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton(text='üëö ModaShop', callback_data='moda_shop'), 
               InlineKeyboardButton(text='üçî –ï–Ω–æ—Ç –ö–µ–±–∞–±', callback_data='enot_kebab'),
               InlineKeyboardButton(text='üçö –†–µ—Å—Ç–æ—Ä–∞–Ω –Ø–ø–æ–Ω –ï–Ω–æ—Ç', callback_data='japan_shop'))

    return await call.message.answer('<i>&#127978; –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä!</i>', reply_markup = markup, parse_mode = 'html')

async def moda_shop(call: CallbackQuery):
    place = cur.execute(f"SELECT current_place FROM userdata WHERE user_id={call.from_user.id}").fetchone()[0]

    if place != '–¢–¶ –ú–∏–ì':
        return #todo answer

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton(text='‚ùÑÔ∏è –ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –æ—Ç–¥–µ–ª', callback_data='xmas_shop'),
                InlineKeyboardButton(text='üë∫ –ú–∞—Å–∫–∞—Ä–∞–¥–Ω—ã–π –æ—Ç–¥–µ–ª', callback_data='mask_clothes'))

    return await call.message.answer('<i>&#128090; –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>ModaShop</b>! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ª—é–±—É—é –æ–¥–µ–∂–¥—É!</i>', reply_markup = markup, parse_mode = 'html')
    
async def xmas_shop(call: CallbackQuery):
    place = cur.execute(f"SELECT current_place FROM userdata WHERE user_id={call.from_user.id}").fetchone()[0]

    if place != '–¢–¶ –ú–∏–ì':
        return #todo

    markup = InlineKeyboardMarkup(row_width=1)
    
    buttons = [buybutton('snowman'), buybutton('snowflake'), buybutton('xmastree'), buybutton('fairy'), buybutton('santa_claus'),
    buybutton('mrs_claus'), buybutton('firework'),
    buybutton('fireworks'), buybutton('confetti')]

    markup.add(*list(filter(lambda item: item is not None, buttons)))

    return await call.message.answer('<i>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?</i>', reply_markup = markup, parse_mode = 'html')

async def delivery_menu(call: CallbackQuery):
    a = call.from_user.id
    phone = cur.execute(f"SELECT phone FROM userdata WHERE user_id={call.from_user.id}").fetchone()[0]

    if phone<1:
        return await call.answer('–í–∞–º –Ω—É–∂–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω. –ï–≥–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–∞ —É–ª. –ì–µ–Ω–µ—Ä–∞–ª–∞ –®–µ–ª–±–∏ –∏ –æ–¥–Ω–æ–∏–º—ë–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ', show_alert = True)

    markup = InlineKeyboardMarkup(row_width = 1)
    sellitems = ['snegovik', 'snow', 'tree', 'fairy', 'santa_claus', 'mrs_claus', 'firework', 'fireworks', 'confetti', 'clown', 'ghost', 'alien', 'robot', 'shit', 'moyai', 'pasta', 'rice', 'sushi']

    for item in sellitems:
        sellitems.append(buybutton(item, tip = 15))
        sellitems.remove(item)
    
    sellitems = list(filter(lambda item: item is not None, sellitems))
    sellitems = list(filter(lambda item: type(item) is InlineKeyboardButton, sellitems))

    markup.add(*sellitems)
    markup.add(InlineKeyboardMarkup(text='‚óÄ –ù–∞–∑–∞–¥', callback_data='cancel_action'))

    await call.message.answer('<i>üöö –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Å–µ–±–µ –ª—é–±–æ–π —Ç–æ–≤–∞—Ä –∏–∑ –¢–¶ –ú–∏–ì –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞, –¥–∞–∂–µ –∏–∑ —Å–∞–º–æ–π –≥–ª—É—Ö–æ–π –¥–µ—Ä–µ–≤–Ω–∏. –≠—Ç–æ –æ–±–æ–π–¥—ë—Ç—Å—è –¥–æ—Ä–æ–∂–µ, —á–µ–º –≤ –¢–¶, –∑–∞—Ç–æ —É–¥–æ–±–Ω–µ–µ :)</i>', parse_mode='html', reply_markup = markup)
            
async def fruit_shop(call: CallbackQuery):
    place = cur.execute(f"SELECT current_place FROM userdata WHERE user_id={call.from_user.id}").fetchone()[0]
    
    if place != '–ú–∞–∫–µ–µ–≤–∫–∞':
        return

    markup = InlineKeyboardMarkup(row_width=1)
    
    buttons = [buybutton('apple'), buybutton('cucumber'),
    buybutton('tomato'), buybutton('kiwi'), buybutton('cocoa')]

    markup.add(*list(filter(lambda item: item is not None, buttons)))

    await call.message.answer('<i>&#127823; –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–º–∞–≥–∞–∑–∏–Ω "–ù–∞—Ç—É—Ä–∞–ª"!</i>', reply_markup = markup, parse_mode = 'html')

async def central_market_menu(call: CallbackQuery):
    place = cur.execute(f"SELECT current_place FROM userdata WHERE user_id={call.from_user.id}").fetchone()[0]
    
    if place!='–†—ã–Ω–æ–∫':
        return #todo answer
    
    markup = InlineKeyboardMarkup(row_width=2).\
        add(InlineKeyboardMarkup(text='üç¶ –ü—Ä–æ–¥–∞–∂–∞ –µ–¥—ã', callback_data='central_market_food'), 
        InlineKeyboardMarkup(text='üëï –ü—Ä–æ–¥–∞–∂–∞ –º–∞—Å–æ–∫', callback_data='central_market_mask'),
        InlineKeyboardMarkup(text='üö™ –í—ã–π—Ç–∏', callback_data='cancel_action'))

    await call.message.answer('<i><b>üè£ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫</b> - –º–µ—Å—Ç–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã. –î–µ—à–µ–≤–ª–µ, —á–µ–º –≤ –º–∞–≥–∞–∑–∏–Ω–µ, –Ω–æ —É–¥–æ–±–Ω–æ\n\
        \n‚ùó –ó–¥–µ—Å—å –≤—ã <b>–ø—Ä–æ–¥–∞—ë—Ç–µ</b> —Ç–æ–≤–∞—Ä—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É, –∞ –Ω–µ –ø–æ–∫—É–ø–∞–µ—Ç–µ. –î–µ–Ω—å–≥–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤–∞—à —Ç–æ–≤–∞—Ä –Ω–∏–∫–æ–º—É –Ω–µ –¥–æ—Å—Ç–∞—ë—Ç—Å—è</i>', reply_markup = markup, parse_mode = 'html')

async def central_market_food(call: CallbackQuery):
    user_id = call.from_user.id
    place = cur.execute(f"SELECT current_place FROM userdata WHERE user_id={user_id}").fetchone()[0]
    
    if place!='–†—ã–Ω–æ–∫':
        return #todo answer

    markup = InlineKeyboardMarkup(row_width = 3)
    itemlist = []
    coef = 1.5 #todo cur.execute(f"SELECT coef FROM globaldata").fetchone()[0]

    for item in ITEMS:
        if await itemdata(user_id, item) != 'emptyslot' and ITEMS[item][4][0] == 'food' and ITEMS[item][3] > 0:
            cost = ITEMS[item][3]//coef
            itemlist.append(InlineKeyboardButton(text=f'{ITEMS[item][0]} - ${cost}', callback_data=f'sellitem_{item}'))
    
    if itemlist == []:
        desc = 'üö´ –£ –≤–∞—Å –Ω–µ—Ç –µ–¥—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏'
    else:
        markup.add(*itemlist)
        desc = '<b>üè£ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫</b> - –º–µ—Å—Ç–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã. –î–µ—à–µ–≤–ª–µ, —á–µ–º –≤ –º–∞–≥–∞–∑–∏–Ω–µ, –Ω–æ —É–¥–æ–±–Ω–æ\n\n‚ùó –ó–¥–µ—Å—å –≤—ã <b>–ø—Ä–æ–¥–∞—ë—Ç–µ</b> —Ç–æ–≤–∞—Ä—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É, –∞ –Ω–µ –ø–æ–∫—É–ø–∞–µ—Ç–µ. –î–µ–Ω—å–≥–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤–∞—à —Ç–æ–≤–∞—Ä –Ω–∏–∫–æ–º—É –Ω–µ –¥–æ—Å—Ç–∞—ë—Ç—Å—è'
    markup.add(InlineKeyboardMarkup(text='‚óÄ –ù–∞–∑–∞–¥', callback_data='cancel_action'))
    await call.message.answer(f'<i>{desc}</i>', reply_markup = markup, parse_mode = 'html')

async def bank(call: CallbackQuery):
    place = cur.execute(f"SELECT current_place from userdata WHERE user_id={call.from_user.id}").fetchone()[0]
    
    if place != '–ñ–∏–≤–±–∞–Ω–∫':
        return #todo answer
    markup = InlineKeyboardMarkup(row_width=1).\
        add(InlineKeyboardButton(text='üè¶ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞–∑–Ω–∞', callback_data='state_balance'),
        InlineKeyboardButton(text='ü§è –û–≥—Ä–∞–±–∏—Ç—å', callback_data='rob_bank'))

    await call.message.answer('<i>üè¶ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–∞–Ω–∫</i>', reply_markup = markup, parse_mode = 'html')

async def state_balance(call: CallbackQuery):
    place = cur.execute(f"SELECT current_place FROM userdata WHERE user_id={call.from_user.id}").fetchone()[0]
    treasury = cur.execute(f"SELECT treasury FROM globaldata").fetchone()[0]
    
    if place != '–ñ–∏–≤–±–∞–Ω–∫':
        return #todo answer
    
    markup = InlineKeyboardMarkup(row_width=1).\
        add(InlineKeyboardButton(text='üí∞ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å $100', callback_data='give_state 100'),
        InlineKeyboardButton(text='üí∞ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å $500', callback_data='give_state 500'), 
        InlineKeyboardButton(text='üí∞ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å $1000', callback_data='give_state 1000'), 
        InlineKeyboardButton(text='üí∞ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å $10,000', callback_data='give_state 10000'))

    await call.message.answer(f'<i>üè¶ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞–∑–Ω—É. –°–µ–π—á–∞—Å —Ç—É—Ç ${treasury}</i>', reply_markup = markup, parse_mode = 'html')

async def taxi_menu(message: Message, user_id: int):
    level = cur.execute(f"SELECT level FROM userdata WHERE user_id={user_id}").fetchone()[0]

    if level < lvlcab:
        return await message.answer(f'üö´ –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å —É—Ä–æ–≤–Ω—è {lvlcab}')
        
    markup = InlineKeyboardMarkup(row_width=2)
    places = []
    
    for place in CITY:
        places.append(InlineKeyboardButton(place, callback_data=f'taxicost_{place}'))
    
    markup.add(*places)

    await message.answer('<i>&#128661; –ö—É–¥–∞ –ø–æ–µ–¥–µ–º?</i>', parse_mode='html', reply_markup=markup)
    return await message.answer('<i>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Ç–¥–∞–ª—ë–Ω–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –µ–¥–µ—Ç–µ.\
    –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—É –ø–æ–µ–∑–¥–∫–∏ –¥–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ –ª–æ–∫–∞—Ü–∏–π –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>', parse_mode='html')