import contextlib
import random
import asyncio

from ... import logger, bot
from ...misc import (
    get_building, get_embedded_link, ITEMS, get_embedded_clan_link
)
from ...misc.misc import remaining, isinterval
from ...misc.constants import (MINIMUM_CAR_LEVEL, MAXIMUM_DRIVE_MENU_SLOTS,
                               MAP, REGIONAL_MAP, MINIMUM_TAXI_LEVEL)
from ...database import cur
from ...database.functions import (
    buy, buybutton, itemdata, achieve, weather_damage, set_ride_status,
    current_time
)

from ...misc.config import (
    METRO, WALK, CITY,
    trains, villages, autostations,
    limited_items,
    cabcost, locations, REGTRAIN,
    clanitems, LINES, LINES_GENITIVE, ticket_time, aircost,
    buscost, regbuscost, tramroute
)

from aiogram.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
)

# time required for specific type of transport to reach next station
# the lists contain minimum and maximum time
METRO_TIME = [15, 30]  # 15, 30
AIRPLANE_TIME = [90, 120]  # 90, 120
REGTRAIN_TIME = [30, 45]  # 30, 45
TROLLEYBUS_TIME = [10, 25]  # 10, 25
TRAIN_TIME = [45, 60]  # 45, 60
TRAM_TIME = [17, 32]  # 17, 32
BUS_TIME = [20, 30]  # 20, 30

# chance of a tram to crash during a random ride (per cent)
TRAM_CRASH_CHANCE = 15


def city_menu_page(index: int) -> list:
    '''
    A list of indices for a page in taxi or car

    :param index - page number:
    '''

    index = max(index, 1)
    min_index = (index - 1) * MAXIMUM_DRIVE_MENU_SLOTS
    max_index = index * MAXIMUM_DRIVE_MENU_SLOTS - 1
    if min_index > len(CITY):
        min_index = len(CITY) - MAXIMUM_DRIVE_MENU_SLOTS
    if max_index > len(CITY):
        max_index = len(CITY) - 1

    return [min_index, max_index]


async def city(message: Message, user_id: str | int):
    # sourcery skip: low-code-quality
    '''
    Callback for city

    :param message:
    :param user_id:
    '''
    set_ride_status(user_id, 0)
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    line = cur.select("line", "userdata").where(user_id=user_id).one()
    car = cur.select("blue_car+red_car", "userdata").where(
        user_id=user_id).one()  # todo MORE CARS

    markup = InlineKeyboardMarkup(row_width=6)

    if place not in METRO[line]:
        for metro_line in METRO:
            if place not in metro_line:
                continue

            cur.update("userdata").set(line=METRO.index(metro_line)).where(
                user_id=user_id).commit()

            line = METRO.index(metro_line)

            break

    if line in [2, 0]:
        metro = InlineKeyboardButton(text="üöâ", callback_data="metro")
    else:
        metro = InlineKeyboardButton(text="üöá", callback_data="metro")

    caritem = InlineKeyboardButton(text="üöó", callback_data="car_menu")
    trolleybus = InlineKeyboardButton(text="üöé", callback_data="trolleybus")
    train_station = InlineKeyboardButton(text="üöÜ",
                                         callback_data="railway_station")
    train_lounge = InlineKeyboardButton(text="üöÜ", callback_data="lounge")
    taxi = InlineKeyboardButton(text="üöï", callback_data="taxi_menu")
    bus_station = InlineKeyboardButton(text="üöå", callback_data="bus")
    bus_lounge = InlineKeyboardButton(text="üöå", callback_data="shuttle_lounge")
    tram = InlineKeyboardButton(text="üöã", callback_data="tram")
    trans = []
    for metro_line in METRO:
        if place in metro_line:
            trans.append(metro)
            break
    if place in CITY:
        trans.append(trolleybus)
    if place in tramroute:
        trans.append(tram)
    if place in REGTRAIN[1]:
        if place in trains[0]:
            trans.append(train_station)
        else:
            trans.append(train_lounge)
    if place in villages:
        if place in autostations:
            trans.append(bus_station)
        else:
            trans.append(bus_lounge)
    if place in CITY:
        trans.append(taxi)
        if car >= 1:
            trans.append(caritem)
    markup.add(*trans)

    location_button = get_building(place)

    if location_button is not None:
        markup.add(location_button)

    index = -1
    iswalk = next((WALK.index(walk_line) for walk_line in WALK
                   if place in walk_line), -1)
    for walkline in WALK:
        if walkline != WALK[3]:
            walkindex = WALK.index(walkline)
            if (
                iswalk == -1
                or walkindex == iswalk
                or walkline[WALK[iswalk].index(place)] == ""
            ):
                continue

            index = WALK[iswalk].index(place)

            markup.add(
                InlineKeyboardButton(
                    text=f"üö∂ {walkline[index]} ({WALK[3][index]} "
                         "—Å–µ–∫—É–Ω–¥ —Ö–æ–¥—å–±—ã)",
                    callback_data=f"walk_{walkline[index]}"
                )
            )

    clans = cur.execute("SELECT * FROM clandata WHERE addon_location=\"True\" "
                        f"AND HQ_place=\"{place}\" AND clan_type=\"public\""
                        " ORDER BY address LIMIT 7").fetchall() # noqa
    for row in clans:
        markup.add(InlineKeyboardButton(text=f"üè¢ {row[2]}", url=row[8])) # noqa

    markup.add(
        InlineKeyboardButton(
            text="üì° GPS",
            callback_data="gps"
        ),
        InlineKeyboardButton(
            text="üè¢ –ö–ª–∞–Ω—ã —Ä—è–¥–æ–º",
            callback_data="local_clans"
        ),
        InlineKeyboardButton(
            text="üë§ –ö—Ç–æ –∑–¥–µ—Å—å?",
            callback_data="local_people"
        )
    )
    await message.answer(
        "<i>–í –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ –µ—Å—Ç—å –º–Ω–æ–≥–æ —á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ!\n"
        f"&#127963; <b>{place}</b></i>",
        reply_markup=markup
    )

    lastdel = cur.select("last_delivery", "userdata").where(
        user_id=user_id).one()
    destination = cur.select("delivery_place", "userdata").where(
        user_id=user_id).one()
    if lastdel:
        if lastdel >= current_time() and destination == place:
            wage = random.randint(150, 300)
            await message.answer(
                '<i>üôÇ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É. –í–∞—à–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ '
                f'- <b>${wage}</b></i>'
            )
            cur.update("userdata").add(balance=wage).where(
                user_id=user_id).commit()
            cur.update("userdata").set(last_delivery=0).where(
                user_id=user_id).commit()
            if destination == "–ë–æ—Ä–∏—Å–æ–≤—Å–∫–∏–π –∑–∞–≤–æ–¥":
                await achieve(user_id, message.chat.id, "courier_achieve")
        elif lastdel < current_time():
            await message.answer(
                '<i>üòü –í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏ –º–∏—Å—Å–∏—é</i>'
            )
            cur.update("userdata").set(last_delivery=0).where(
                user_id=user_id).commit()
        else:
            await message.answer(
                '<i>üõµ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—ã –¥–æ–ª–∂–Ω—ã –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–∏—Ü—Ü—É –≤ –º–µ—Å—Ç–Ω–æ—Å—Ç—å'
                f'<b>{destination}</b> —á–µ—Ä–µ–∑ –º–µ–Ω–µ–µ —á–µ–º <b>'
                f'{int((lastdel - current_time()) // 60) + 1} –º–∏–Ω—É—Ç</b></i>'
            )

    await asyncio.sleep(3)
    await weather_damage(user_id, message.chat.id)


async def buycall(call: CallbackQuery):
    # sourcery skip: remove-unnecessary-cast
    '''
    Callback for buying an item

    :param call - callback:
    '''
    user_id = call.from_user.id
    item = call.data.split(':')[0][4:]
    try:
        tip = int(call.data.split(':')[1])
    except Exception:
        tip = 0

    try:
        amount = call.data.split(':')[2]
    except IndexError:
        amount = 1

    if item in ITEMS:
        if ITEMS[item].type == 'car':
            level = cur.select("level", "userdata").where(
                user_id=user_id).one()
            if level < MINIMUM_CAR_LEVEL:
                return await call.answer(
                    text=(
                        '‚ùå –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å —É—Ä–æ–≤–Ω—è'
                        f' {MINIMUM_CAR_LEVEL}'
                    ),
                    show_alert=True
                )

            await achieve(user_id, call.message.chat.id, 'auto_achieve')
        cost = ITEMS[item].cost
        assert cost is not None

        await buy(
            call,
            item,
            user_id,
            cost=cost+tip,
            amount=int(amount)
        )
    else:
        raise ValueError("no such item")


async def car_menu(call: CallbackQuery) -> None:
    '''
    Callback for car menu

    :param call - callback:
    '''
    message = call.message
    user_id = call.from_user.id
    car = cur.select("red_car+blue_car", "userdata").where(
        user_id=user_id).one()  # todo more cars

    if car < 1:
        return await call.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω—ã', show_alert=True)

    current_place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    places = []

    for place in CITY:
        if place == current_place:
            places.append(
                InlineKeyboardButton(
                    f"üìç {place}",
                    callback_data=f'goto_on_car_{place}'
                    )
                )
            continue

        places.append(
            InlineKeyboardButton(
                f"üèòÔ∏è {place}",
                callback_data=f'goto_on_car_{place}'
            )
        )

    markup = InlineKeyboardMarkup(row_width=2)

    for index, place in enumerate(places):
        if index < MAXIMUM_DRIVE_MENU_SLOTS:
            markup.add(place)
        else:
            break

    if markup.values["inline_keyboard"] == []:
        return await call.answer("dead end", True)

    markup.add(
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data="car_menu_page:2"),
    )

    await message.answer(
        '<i>üë®‚Äç‚úàÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏</i>',
        reply_markup=markup
    )


async def car_menu_page(call: CallbackQuery, menu: int):
    user_id = call.from_user.id
    message = call.message
    car = cur.select("red_car", "userdata").where(
        user_id=user_id).one()
    car = 0 if car is None else car

    if car < 1:
        return await call.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω—ã', show_alert=True)

    current_place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    markup = InlineKeyboardMarkup(row_width=2)
    places = []
    for place in CITY:
        if place == current_place:
            places.append(
                InlineKeyboardButton(
                    f"üìç {place}",
                    callback_data=f'goto_on_car_{place}'
                )
            )
        else:
            places.append(
                InlineKeyboardButton(
                    f"üèòÔ∏è {place}",
                    callback_data=f'goto_on_car_{place}'
                )
            )

    for index, place in enumerate(places):
        if index < city_menu_page(menu)[0]:
            continue
        elif index <= city_menu_page(menu)[1]:
            markup.add(place)
        else:
            break

    buttons = []
    if city_menu_page(menu)[0] > 0:
        buttons.append(
            InlineKeyboardButton(
                "‚¨ÖÔ∏è",
                callback_data=f"car_menu_page:{menu-1}"
            )
        )
    if city_menu_page(menu)[1] < len(CITY) - 1:
        buttons.append(
            InlineKeyboardButton(
                "‚û°",
                callback_data=f"car_menu_page:{menu+1}"
            )
        )

    markup.add(*buttons)
    await message.edit_reply_markup(markup)


async def goto_on_car(call: CallbackQuery):
    user_id = call.from_user.id
    car = cur.select("red_car+blue_car", "userdata").where(
        user_id=user_id).one()
    current_place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    if car < 1:
        return await call.message.answer('<i>üöó –£ –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω—ã</i>')

    station = call.data[12:]
    if station == current_place:
        return await call.answer(
            "‚õîÔ∏è –í—ã –∏ —Ç–∞–∫ –≤ —ç—Ç–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏.",
            show_alert=True
        )

    await call.message.answer('<i>–°–∫–æ—Ä–æ –ø—Ä–∏–µ–¥–µ–º!</i>')
    set_ride_status(user_id)

    with contextlib.suppress(Exception):
        await call.message.delete()

    await asyncio.sleep(15)

    cur.update("userdata").set(current_place=station).where(
        user_id=user_id).commit()
    await city(call.message, call.from_user.id)  # type: ignore


async def local_people(call: CallbackQuery):
    '''
    Callback for seeing people that are in the same place as you

    :param call - callback:
    '''
    place = cur.select("current_place", "userdata").where(
        user_id=call.from_user.id).one()
    count = cur.execute(
            f"SELECT count(*) FROM userdata WHERE current_place='{place}'"
            f" AND profile_type='public' AND NOT user_id={call.from_user.id}"
        ).one()

    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text="‚óÄ –ù–∞–∑–∞–¥",
            callback_data="cancel_action"
        )
    )

    if count < 1:
        return await call.message.answer(
            "<i>üë§ –í—ã —Å—Ç–æ–∏—Ç–µ –æ–¥–∏–Ω, –æ–≥–ª—è–¥—ã–≤–∞—è—Å—å –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º‚Ä¶\n"
            "\nüòì –í –≤–∞—à–µ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª—é–¥–µ–π. –ü–æ–º–∏–º–æ –≤–∞—Å, "
            "—Å–∞–º–æ —Å–æ–±–æ–π</i>",
            reply_markup=markup
        )

    cur.execute(f"SELECT * FROM userdata WHERE current_place = '{place}' "
                "AND profile_type = 'public' AND NOT "
                f"user_id={call.from_user.id} LIMIT 40")

    users = ''.join(
        [
            f'\n{index}. {await get_embedded_link(row[1])}'
            for index, row in enumerate(cur.fetchall(), start=1)
            if row[1] and row[1] != call.from_user.id
        ]
    )

    await call.message.answer(
        f'<i>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ <b>{place}</b>:\n<b>{users}</b></i>',
        reply_markup=markup)


async def delivery_menu(call: CallbackQuery) -> None:
    '''
    Callback for delivery phone app

    :param user_id:
    '''
    phone = cur.select("phone", "userdata").where(
        user_id=call.from_user.id).one()

    if phone < 1:
        return await call.answer(
            "–í–∞–º –Ω—É–∂–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω. –ï–≥–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–∞ —É–ª. –ì–µ–Ω–µ—Ä–∞–ª–∞ "
            "–®–µ–ª–±–∏ –∏ –æ–¥–Ω–æ–∏–º—ë–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –∏–ª–∏ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–µ–Ω—Ç—Ä–µ –≤ "
            "–ú–∞–∫—Å–∏–≥—Ä–∞–¥–µ",
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=1)
    sellitems = [
        'snegovik', 'snow', 'tree', 'fairy', 'santa_claus', 'mrs_claus',
        'firework', 'fireworks', 'confetti', 'clown', 'ghost', 'alien',
        'robot', 'shit', 'moyai', 'pasta', 'rice', 'sushi'
    ]
    _sellitems = []
    for item in sellitems:
        try:
            _sellitems.append(buybutton(item, tip=15))
        except ValueError:
            logger.error(f'no such item: {item}')

    sellitems = list(filter(lambda item: item is not None, _sellitems))
    sellitems = list(
        filter(lambda item: type(item) is InlineKeyboardButton, _sellitems))

    markup.add(*sellitems)
    markup.add(
        InlineKeyboardMarkup(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
    )

    await call.message.answer(
        '<i>üöö –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Å–µ–±–µ –ª—é–±–æ–π —Ç–æ–≤–∞—Ä –∏–∑ –¢–¶ –ú–∏–ì –∏–∑ –ª—é–±–æ–≥–æ '
        '–º–µ—Å—Ç–∞, –¥–∞–∂–µ –∏–∑ —Å–∞–º–æ–π –≥–ª—É—Ö–æ–π –¥–µ—Ä–µ–≤–Ω–∏. –≠—Ç–æ –æ–±–æ–π–¥—ë—Ç—Å—è –¥–æ—Ä–æ–∂–µ, —á–µ–º –≤ –¢–¶,'
        ' –∑–∞—Ç–æ —É–¥–æ–±–Ω–µ–µ :)</i>',
        reply_markup=markup
    )


async def central_market_menu(call: CallbackQuery) -> None:
    '''
    Callback for central market menu

    :param call - callback:
    '''
    place = cur.select("current_place", "userdata").where(
        user_id=call.from_user.id).one()

    if place != '–†—ã–Ω–æ–∫':
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=2).\
        add(
            InlineKeyboardMarkup(
                text='üç¶ –ü—Ä–æ–¥–∞–∂–∞ –µ–¥—ã',
                callback_data='central_market_food'
            ),
            InlineKeyboardMarkup(
                text='üëï –ü—Ä–æ–¥–∞–∂–∞ –º–∞—Å–æ–∫',
                callback_data='central_market_mask'
            ),
            InlineKeyboardMarkup(text='üö™ –í—ã–π—Ç–∏', callback_data='cancel_action')
        )

    await call.message.answer(
        (
            "<i><b>üè£ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫</b> - –º–µ—Å—Ç–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å "
            "–∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã. –î–µ—à–µ–≤–ª–µ, —á–µ–º –≤ –º–∞–≥–∞–∑–∏–Ω–µ, –Ω–æ —É–¥–æ–±–Ω–æ\n"
            "\n‚ùó –ó–¥–µ—Å—å –≤—ã <b>–ø—Ä–æ–¥–∞—ë—Ç–µ</b> —Ç–æ–≤–∞—Ä—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É, –∞ –Ω–µ –ø–æ–∫—É–ø–∞–µ—Ç–µ."
            " –î–µ–Ω—å–≥–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤–∞—à —Ç–æ–≤–∞—Ä –Ω–∏–∫–æ–º—É –Ω–µ –¥–æ—Å—Ç–∞—ë—Ç—Å—è"
            "</i>"
        ),
        reply_markup=markup
    )


async def central_market_food(call: CallbackQuery) -> None:
    '''
    Callback for food section of the central market

    :param call - callback:
    '''
    user_id = call.from_user.id
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    if place != '–†—ã–Ω–æ–∫':
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=3)
    itemlist = []
    coef = 1.5  # todo cur.execute(f"SELECT coef FROM globaldata").fetchone()[0] # noqa

    for item in ITEMS:
        if (
            await itemdata(user_id, item) != 'emptyslot'
            and ITEMS[item].type == 'food'
            and isinstance(ITEMS[item].price, int)
        ):
            cost = ITEMS[item].price
            assert isinstance(cost, int)
            cost //= coef
            itemlist.append(
                InlineKeyboardButton(
                    text=f'{ITEMS[item].emoji} - ${cost}',
                    callback_data=f'sellitem_{item}'
                )
            )

    if not itemlist:
        desc = 'üö´ –£ –≤–∞—Å –Ω–µ—Ç –µ–¥—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏'
    else:
        markup.add(*itemlist)
        desc = (
            '<b>üè£ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫</b> - –º–µ—Å—Ç–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å '
            '–∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã. –î–µ—à–µ–≤–ª–µ, —á–µ–º –≤ –º–∞–≥–∞–∑–∏–Ω–µ, –Ω–æ —É–¥–æ–±–Ω–æ\n\n‚ùó –ó–¥'
            '–µ—Å—å –≤—ã <b>–ø—Ä–æ–¥–∞—ë—Ç–µ</b> —Ç–æ–≤–∞—Ä—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É, –∞ –Ω–µ –ø–æ–∫—É–ø–∞–µ—Ç–µ. –î–µ'
            '–Ω—å–≥–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤–∞—à —Ç–æ–≤–∞—Ä –Ω–∏–∫–æ–º—É –Ω–µ –¥–æ—Å—Ç–∞—ë—Ç—Å—è'
        )
    markup.add(
        InlineKeyboardMarkup(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
    )
    await call.message.answer(f'<i>{desc}</i>', reply_markup=markup)


async def central_market_mask(call: CallbackQuery) -> None:
    '''
    Callback for mask section of the central market

    :param call - callback:
    '''
    user_id = call.from_user.id
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    if place != '–†—ã–Ω–æ–∫':
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=3)

    itemlist = []
    coef = 1.5  # todo cur.select("coef", "globaldata").one()

    for item in ITEMS:
        if (
            await itemdata(user_id, item) != 'emptyslot'
            and ITEMS[item].type == 'mask'
            and isinstance(ITEMS[item].price, int)
        ):
            cost = ITEMS[item].price
            assert isinstance(cost, int)

            cost //= coef
            itemlist.append(
                InlineKeyboardButton(
                    text=f'{ITEMS[item].emoji} - ${cost}',
                    callback_data=f'sellitem_{item}'
                )
            )

    if not itemlist:
        text = 'üö´ –£ –≤–∞—Å –Ω–µ—Ç –º–∞—Å–æ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏'

    else:
        markup.add(*itemlist)
        text = (
            '<b>üè£ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫</b> - –º–µ—Å—Ç–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∫—É–ø–ª'
            '–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã. –î–µ—à–µ–≤–ª–µ, —á–µ–º –≤ –º–∞–≥–∞–∑–∏–Ω–µ, –Ω–æ —É–¥–æ–±–Ω–æ\n\n‚ùó –ó–¥–µ—Å—å –≤—ã <b'
            '>–ø—Ä–æ–¥–∞—ë—Ç–µ</b> —Ç–æ–≤–∞—Ä—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É, –∞ –Ω–µ –ø–æ–∫—É–ø–∞–µ—Ç–µ. –î–µ–Ω—å–≥–∏ –≤—ã –ø–æ–ª—É—á'
            '–∞–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤–∞—à —Ç–æ–≤–∞—Ä –Ω–∏–∫–æ–º—É –Ω–µ –¥–æ—Å—Ç–∞—ë—Ç—Å—è'
        )
    markup.add(
        InlineKeyboardMarkup(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
    )
    await call.message.answer(
        f'<i>{text}</i>',
        reply_markup=markup
    )


async def bank(call: CallbackQuery) -> None:
    '''
    Callback for bank

    :param call - callback:
    '''
    place = cur.select("current_place", "userdata").where(
        user_id=call.from_user.id).one()

    if place != '–ñ–∏–≤–±–∞–Ω–∫':
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=1).\
        add(
            InlineKeyboardButton(
                text='üè¶ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞–∑–Ω–∞',
                callback_data='state_balance'
            ),
            InlineKeyboardButton(
                text='ü§è –û–≥—Ä–∞–±–∏—Ç—å',
                callback_data='rob_bank'
            )
        )

    await call.message.answer(
        '<i>üè¶ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–∞–Ω–∫</i>',
        reply_markup=markup
    )


async def state_balance(call: CallbackQuery) -> None:
    '''
    Callback for state treasury

    :param call - callback:
    '''
    place = cur.select("current_place", 'userdata').where(
        user_id=call.from_user.id).one()
    treasury = cur.select("treasury", "globaldata").one()

    if place != '–ñ–∏–≤–±–∞–Ω–∫':
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='üí∞ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å $100',
            callback_data='give_state 100'
        ),
        InlineKeyboardButton(
            text='üí∞ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å $500',
            callback_data='give_state 500'
        ),
        InlineKeyboardButton(
            text='üí∞ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å $1000',
            callback_data='give_state 1000'
        ),
        InlineKeyboardButton(
            text='üí∞ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å $10,000',
            callback_data='give_state 10000'
        )
    )

    await call.message.answer(
        f'<i>üè¶ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞–∑–Ω—É. –°–µ–π—á–∞—Å —Ç—É—Ç ${treasury}</i>',
        reply_markup=markup)


async def taxi_menu(message: Message, user_id: int):
    '''
    Callback for taxi menu

    :param message:
    :param user_id:
    '''
    level = cur.select("level", "userdata").where(
        user_id=user_id).one()

    if level < MINIMUM_TAXI_LEVEL:
        return await message.answer(
            f'üö´ –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å —É—Ä–æ–≤–Ω—è {MINIMUM_TAXI_LEVEL}'
        )

    current_place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    markup = InlineKeyboardMarkup(row_width=2)
    places = []
    for place in CITY:
        if place == current_place:
            places.append(
                InlineKeyboardButton(
                    f"üìç {place}",
                    callback_data=f'taxicost_{place}'
                )
            )
            continue
        places.append(
            InlineKeyboardButton(
                f"üèòÔ∏è {place}",
                callback_data=f'taxicost_{place}'
            )
        )

    for index, place in enumerate(places):
        if index < MAXIMUM_DRIVE_MENU_SLOTS:
            markup.add(place)
        else:
            break
    markup.add(
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data="taxi_page:2")
    )

    await message.answer('<i>üöï –ö—É–¥–∞ –ø–æ–µ–¥–µ–º?</i>', reply_markup=markup)
    return await message.answer(
        '<i>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Ç–¥–∞–ª—ë–Ω–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã'
        ' –µ–¥–µ—Ç–µ. –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—É –ø–æ–µ–∑–¥–∫–∏ –¥–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞, –Ω–∞–∂'
        '–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ –ª–æ–∫–∞—Ü–∏–π –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>'
    )


async def taxi_page(call: CallbackQuery, menu: int):
    user_id = call.from_user.id
    level = cur.select("level", "userdata").where(user_id=user_id).one()
    message = call.message

    if level < MINIMUM_TAXI_LEVEL:
        return await message.answer(
            f'üö´ –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å —É—Ä–æ–≤–Ω—è {MINIMUM_TAXI_LEVEL}'
        )

    current_place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    markup = InlineKeyboardMarkup(row_width=2)

    places = []

    for place in CITY:
        if place == current_place:
            places.append(
                InlineKeyboardButton(
                    f"üìç {place}",
                    callback_data=f'taxicost_{place}'
                )
            )
        else:
            places.append(
                InlineKeyboardButton(
                    f"üèòÔ∏è {place}",
                    callback_data=f'taxicost_{place}'
                )
            )

    for index, place in enumerate(places):
        if index < city_menu_page(menu)[0]:
            continue
        elif index <= city_menu_page(menu)[1]:
            markup.add(place)
        else:
            break

    buttons = []
    if city_menu_page(menu)[0] > 0:
        buttons.append(
            InlineKeyboardButton(
                "‚¨ÖÔ∏è",
                callback_data=f"taxi_page:{menu-1}"
            )
        )
    if city_menu_page(menu)[1] < len(CITY) - 1:
        buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=f"taxi_page:{menu+1}"
            )
        )

    markup.add(*buttons)
    await message.edit_reply_markup(markup)


async def taxicost(call: CallbackQuery, place: str) -> None:
    '''
    Callback for taxi cost & approval

    :param call - callback:
    :param place:
    '''
    current_place = cur.select("current_place", "userdata").where(
        user_id=call.from_user.id).one()

    if place not in CITY:
        raise ValueError('no such place')
    if place == current_place:
        return await call.answer(
            "‚õîÔ∏è –í—ã –∏ —Ç–∞–∫ –≤ —ç—Ç–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏.",
            show_alert=True
        )
    cost = (cabcost*abs(CITY.index(place)-CITY.index(current_place)))//1

    markup = InlineKeyboardMarkup(row_width=2).\
        add(
            InlineKeyboardButton(
                'üöï –ï—Ö–∞—Ç—å', callback_data=f'taxi_goto_{place}'),
            InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel_action')
        )

    await call.message.answer(
        f'<i>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –¥–æ –ª–æ–∫–∞—Ü–∏–∏ <b>{place}</b> - <b>${cost}</b></i>',
        reply_markup=markup
    )


async def taxi_goto_(call: CallbackQuery, place: str) -> None:
    '''
    Callback for going to {place} on taxi

    :param call - callback:
    :param place:
    '''
    user_id = call.from_user.id

    balance = cur.select("balance", "userdata").where(user_id=user_id).one()
    current_place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    if place not in CITY:
        raise ValueError('no such place')

    cost = (cabcost*abs(CITY.index(place)-CITY.index(current_place)))//1

    if balance < cost:
        return await call.answer(
            'üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏',
            show_alert=True
        )

    await call.message.answer('<i>–°–∫–æ—Ä–æ –ø—Ä–∏–µ–¥–µ–º!</i>')
    set_ride_status(user_id)

    with contextlib.suppress(Exception):
        await bot.delete_message(call.message.chat.id, call.message.message_id)
    await asyncio.sleep(15)

    cur.update('userdata').set(current_place=place).where(
        user_id=user_id).commit()
    cur.update("userdata").add(balance=-cost).where(
        user_id=user_id).commit()
    if cost == cabcost*(len(CITY)-1):
        await achieve(user_id, call.message.chat.id, "cab_achieve")

    await city(call.message, call.from_user.id)


async def gps_menu(call: CallbackQuery) -> None:
    '''
    Callback for GPS app menu

    :param call - callback:
    '''
    user_id = call.from_user.id
    phone = cur.select("phone", "userdata").where(user_id=user_id).one()

    if phone < 1:
        return await call.answer(
            '–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è GPS, –≤–∞–º –Ω—É–∂–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω. –ï–≥–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥'
            '–∞–∑–∏–Ω–µ –Ω–∞ —É–ª. –ì–µ–Ω–µ—Ä–∞–ª–∞ –®–µ–ª–±–∏ –∏ –æ–¥–Ω–æ–∏–º—ë–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –∏–ª–∏ –≤ –¢–¶ '
            '–≤ –ú–∞–∫—Å–∏–≥—Ä–∞–¥–µ',
            show_alert=True
        )

    categorylist = []
    markup = InlineKeyboardMarkup()

    for category in locations[3]:
        if category not in categorylist:
            categorylist.append(category)
            count = sum(
                locations[3][locations[0].index(location)] == category
                for location in locations[0]
            )
            markup.add(
                InlineKeyboardButton(
                    text=f'{category} ({count})',
                    callback_data=f'gps_category_{category}'
                )
            )

    markup.add(
        InlineKeyboardMarkup(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
    )
    await call.message.answer('<i>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</i>', reply_markup=markup)


async def gps_category(call: CallbackQuery, category: str,
                       nogps: bool = False):
    '''
    Callback for list of locations for chosen category

    :param call - callback:
    :param category - category of locations:
    :param nogps - True if no phone is required to open the category:
    '''
    user_id = call.from_user.id
    phone = cur.select("phone", "userdata").where(user_id=user_id).one()

    if phone < 1 and not nogps:
        return await call.answer(
            '–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è GPS, –≤–∞–º –Ω—É–∂–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω. –ï–≥–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥'
            '–∞–∑–∏–Ω–µ –Ω–∞ —É–ª. –ì–µ–Ω–µ—Ä–∞–ª–∞ –®–µ–ª–±–∏ –∏ –æ–¥–Ω–æ–∏–º—ë–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –∏–ª–∏ –≤ –¢–¶ '
            '–≤ –ú–∞–∫—Å–∏–≥—Ä–∞–¥–µ',
            show_alert=True
        )

    gps_name = 'nogps' if nogps else 'gps'

    markup = InlineKeyboardMarkup(row_width=2)
    locationlist = [
        InlineKeyboardButton(
            text=location, callback_data=f'{gps_name}_location_{index}'
        )
        for index, location in enumerate(locations[0])
        if locations[3][index] == category
    ]
    markup.add(*locationlist)
    markup.add(
        InlineKeyboardMarkup(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
    )
    text = "‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–∞—Ö, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ"\
           " –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å" if nogps else "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é"

    await call.message.answer(f"<i>{text}</i>", reply_markup=markup)


async def gps_location(call: CallbackQuery, index: int, nogps: bool = False):
    '''
    Callback for a GPS location

    :param call - callback:
    :param index - index of selected location:
    '''
    user_id = call.from_user.id
    phone = cur.select("phone", "userdata").where(user_id=user_id).one()

    if phone < 1 and not nogps:
        return await call.answer(
            '–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è GPS, –≤–∞–º –Ω—É–∂–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω. –ï–≥–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥'
            '–∞–∑–∏–Ω–µ –Ω–∞ —É–ª. –ì–µ–Ω–µ—Ä–∞–ª–∞ –®–µ–ª–±–∏ –∏ –æ–¥–Ω–æ–∏–º—ë–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –∏–ª–∏ –≤ –¢–¶ '
            '–≤ –ú–∞–∫—Å–∏–≥—Ä–∞–¥–µ',
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=2)

    name = locations[0][index]  # name of the location
    description = locations[1][index]  # description of the location
    place = locations[2][index]  # place where the location is

    markup.add(
        InlineKeyboardMarkup(
            text='üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Ä—è–¥–æ–º',
            callback_data=f'gps_transport_{place}'
        )
    )
    markup.add(
        InlineKeyboardMarkup(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
    )

    await call.message.answer(
        f'<i><b>{name}</b>\n\n{description}\n\n'
        f'üèõ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: <b>{place}</b></i>',
        reply_markup=markup)


async def gps_transport(call: CallbackQuery, place: str):
    '''
    Callback for list of transport stations at the location

    :param call - callback:
    :param place - selected location:
    '''
    user_id = call.from_user.id
    current_place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    level = cur.select("level", "userdata").where(user_id=user_id).one()
    markup = InlineKeyboardMarkup()

    text = ''
    if place in CITY:
        text += f'\nüöé –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–æ–ª–ª–µ–π–±—É—Å–∞ <b>{place}</b>'
    if place in tramroute:
        text += f'\nüöã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ë–æ—Ä–∏—Å–æ–≤—Å–∫–æ–≥–æ —Ç—Ä–∞–º–≤–∞—è <b>{place}</b>'
    for index, line in enumerate(METRO):
        if place in line:
            if index in [0, 2]:
                text += '\nüöä –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ä–æ–¥—Å–∫–æ–π —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∏ ' +\
                        f'<b>{place}</b> ' +\
                        f'({LINES[index].split(" –≥–æ—Ä–æ–¥—Å–∫–æ–π —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∏")[0]})'
            else:
                text += '\nüöá –°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ ' +\
                        f'<b>{place}</b> ({LINES[index]})'
    if place in REGTRAIN[1]:
        text += '\nüöÜ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∏ ' +\
                f'<b>{REGTRAIN[0][REGTRAIN[1].index(place)]}</b>'
    if place in trains[0]:
        text += '\nüöÑ –°—Ç–∞–Ω—Ü–∏—è –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–≤ ' +\
                f'<b>{trains[2][trains[0].index(place)]}</b>'
    if place in villages:
        if place in autostations:
            text += f'\nüöå –ê–≤—Ç–æ—Å—Ç–∞–Ω—Ü–∏—è <b>{place}</b>'
        else:
            text += f'\nüöê –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö —Ç–∞–∫—Å–∏ <b>{place}</b>'
    if place in CITY and current_place in CITY and place != current_place \
            and level >= MINIMUM_TAXI_LEVEL:
        cost = (cabcost*abs(CITY.index(place)-CITY.index(current_place)))//1
        text += '\n\nüöï –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–µ—Ö–∞—Ç—å –∏–∑ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ ' +\
                f'<b>{current_place}</b> –¥–æ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ <b>{place}</b>' +\
                f' –∑–∞ <b>${cost}</b>'
        markup.add(
            InlineKeyboardMarkup(
                text='üöï –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏',
                callback_data=f'taxicost_{place}'
            )
        )

    index = -1
    for n, walkline in enumerate(WALK):
        if place in walkline and n != 3:
            index = walkline.index(place)
    if index != -1:
        text += '\n\nüö∂‚Äç‚ôÇÔ∏è –í –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±—Ä–∞—Ç—å—Å—è –ø–µ—à–∫–æ–º' +\
                '. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, ' +\
                '–∫–∞–∫–∏–µ –≤–∏–¥—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ—Å—Ç–Ω–æ—Å—Ç—è—Ö, –≤ –∫–æ—Ç–æ—Ä—ã–µ' +\
                f' –º–æ–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å—Å—è –ø–µ—à–∫–æ–º –∏–∑ <b>{place}</b>'
        for n, walkline in enumerate(WALK):
            if n != 3 and place not in walkline and walkline[index] != '':
                markup.add(
                    InlineKeyboardMarkup(
                        text=f'üö∂‚Äç‚ôÇÔ∏è {walkline[index]}',
                        callback_data=f'gps_transport_{walkline[index]}'
                    )
                )

    markup.add(
        InlineKeyboardMarkup(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
    )

    if text == '':
        await call.answer(
            text='üò® –¢–∞–∫–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏, –≤–∏–¥–∏–º–æ, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n'
                 '–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å '
                 '–≤ –ü—Ä–∏—ë–º–Ω—É—é',
            show_alert=True
        )
    else:
        await call.message.answer(
            f'<i>üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –ª–æ–∫–∞—Ü–∏–∏ <b>{place}</b>:\n{text}</i>',
            reply_markup=markup
        )


async def buy24_(call: CallbackQuery, item: str) -> None:
    '''
    Callback for buying {item} in 24-hour shop

    :param call - callback:
    :param item:

    :raises ValueError if item doesn't seem to exists
    '''
    if item not in ITEMS or item not in limited_items:
        raise ValueError("no such item")
    items_left = cur.select(item, "globaldata").one()

    if items_left < 1:
        return await call.answer(
            text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å–µ–π—á–∞—Å –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ –≤–≤–∏–¥—É –¥–µ—Ñ–∏'
            '—Ü–∏—Ç–∞ :(\n–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –ª—é–±–æ–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏'
            '–Ω –≤ –ì–æ—Ä–æ–¥–µ',
            show_alert=True
        )

    cur.update("globaldata").add(**{item: -1}).commit()
    cost = ITEMS[item].price
    assert isinstance(cost, int)
    await buy(call, item, call.from_user.id, cost)


async def buyclan_(call: CallbackQuery, item: str) -> None:
    '''
    Callback for buying item in a clan using clan buildings

    :param call - callback:
    :param item:

    :raises ValueError if item does not exist or is not in clan-items
    '''
    if item not in clanitems[0]:
        raise ValueError("no such item in clanitems")

    cost = clanitems[1][clanitems[0].index(item)]
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        raise ValueError("clan not found")

    balance = cur.select("balance", 'userdata').where(user_id=user_id).one()

    if balance < cost:
        return await call.answer(
            '‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
            show_alert=True)

    cur.update("userdata").add(balance=-cost).where(user_id=user_id).commit()
    cur.update("userdata").add(**{item: 1}).where(user_id=user_id).commit()

    clan_bonus_devider = random.randint(1, 5)

    cur.update("clandata").add(clan_balance=cost//clan_bonus_devider).where(
        clan_id=chat_id).commit()
    await call.answer(
        f'–ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance-cost}. –ë–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞'
        f' –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${cost//clan_bonus_devider}',
        show_alert=True
    )


async def railway_station(call: CallbackQuery) -> None:
    '''
    Callback for railway station callback

    :param call - callback:
    '''
    markup = InlineKeyboardMarkup(row_width=1).\
        add(
            InlineKeyboardButton(
                text='üöÜ –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã —ç–∫–æ–Ω–æ–º–∫–ª–∞—Å—Å–∞',
                callback_data='lounge'
            ),
            InlineKeyboardButton(
                text='üöÑ –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å–∫–æ—Ä–æ—Å—Ç–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–≤',
                callback_data='businessclass_lounge'
            ),
            InlineKeyboardButton(
                text='üé´ –ë–∏–ª–µ—Ç–Ω—ã–µ –∫–∞—Å—Å—ã',
                callback_data='tickets'
            ),
            InlineKeyboardButton(
                text='üçî –ö–∞—Ñ–µ—Ç–µ—Ä–∏–π "–ï–Ω–æ—Ç –ö–µ–±–∞–±"',
                callback_data='enot_kebab_shop'
            ),
            InlineKeyboardButton(
                text='üèõ –í—ã–π—Ç–∏ –≤ –≥–æ—Ä–æ–¥',
                callback_data='city'
            )
        )

    await call.message.answer(
        '<i>–ü–æ—Ä–∞ —É–∂–µ –≤–∞–ª–∏—Ç—å –æ—Ç—Å—é–¥–∞...</i>',
        reply_markup=markup
    )


async def bus(call: CallbackQuery) -> None:
    '''
    Callback for bus menu

    :param call - callback:
    :param user_id:
    '''
    markup = InlineKeyboardMarkup(row_width=1).\
        add(
            InlineKeyboardButton(
                text='üöå –ö –∞–≤—Ç–æ–±—É—Å–∞–º',
                callback_data='bus_lounge'
            ),
            InlineKeyboardButton(
                text='üöê –ö –º–∞—Ä—à—Ä—É—Ç–Ω—ã–º —Ç–∞–∫—Å–∏',
                callback_data='shuttle_lounge'
            ),
            InlineKeyboardButton(
                text='üé´ –ë–∏–ª–µ—Ç–Ω—ã–µ –∫–∞—Å—Å—ã',
                callback_data='tickets'
            ),
            InlineKeyboardButton(
                text='üçî –ö–∞—Ñ–µ—Ç–µ—Ä–∏–π "–ï–Ω–æ—Ç –ö–µ–±–∞–±"',
                callback_data='enot_kebab_shop'
            ),
            InlineKeyboardButton(
                text='üèõ –í—ã–π—Ç–∏ –≤ –≥–æ—Ä–æ–¥',
                callback_data='city'
            )
        )

    await call.message.answer(
        '<i>–ü–æ—Ä–∞ —É–∂–µ –≤–∞–ª–∏—Ç—å –æ—Ç—Å—é–¥–∞...</i>',
        reply_markup=markup
    )


async def metro(call: CallbackQuery):
    '''
    Callback for subway station vestibule menu

    :param call - callback:
    '''
    user_id = call.from_user.id
    token = cur.select("metrotoken", "userdata").where(user_id=user_id).one()
    line = cur.select("line", "userdata").where(user_id=user_id).one()

    markup = InlineKeyboardMarkup()
    if line not in [0, 2]:
        markup.add(
            InlineKeyboardButton(
                text='üöá –ü—Ä–æ–π—Ç–∏ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é',
                callback_data='proceed_metro'
            )
        )
    else:
        markup.add(
            InlineKeyboardButton(
                text='üöâ –ü—Ä–æ–π—Ç–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É',
                callback_data='proceed_metro'
            )
        )
    markup.add(
        InlineKeyboardButton(
            text='üé´ –ü–æ–∫—É–ø–∫–∞ –∂–µ—Ç–æ–Ω–æ–≤',
            callback_data='metro_tickets'
        )
    )
    await call.message.answer(
        f'<i>–£ –≤–∞—Å <b>{token}</b> –∂–µ—Ç–æ–Ω–æ–≤</i>',
        reply_markup=markup
    )


async def proceed_metro(call: CallbackQuery):
    '''
    Callback for entering a subway station

    :param call - callback:
    '''
    user_id = call.from_user.id
    token = cur.select("metrotoken", "userdata").where(user_id=user_id).one()

    if token < 1:
        markup = InlineKeyboardMarkup()
        markup.add()
        return await call.message.answer(
            '<i>üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∂–µ—Ç–æ–Ω–æ–≤</i>',
            reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(
                        text='üé´ –ü–æ–∫—É–ø–∫–∞ –∂–µ—Ç–æ–Ω–æ–≤',
                        callback_data='metro_tickets'
                    )
                )
            )

    cur.update("userdata").add(metrotoken=-1).where(
        user_id=user_id).commit()
    await metrocall(call)


def _transfer(user_id) -> None | str | int:
    line = cur.select("line", "userdata").where(user_id=user_id).one()
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    for i in range(4):
        if i != line and place in METRO[i]:
            return i
    return


async def metrocall(call: CallbackQuery):
    '''
    Callback for subway station

    :param call - callback:
    '''
    user_id = call.from_user.id
    line = cur.select("line", "userdata").where(user_id=user_id).one()
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    index = METRO[line].index(place)
    markup = InlineKeyboardMarkup()
    desc = str()

    trans = _transfer(user_id)
    if trans is not None:
        desc += f'–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–µ–∑–¥–∞–º {LINES_GENITIVE[trans]}\n'  # type: ignore

        markup.add(
            InlineKeyboardButton(
                f'üîÑ {LINES[trans]}',  # type: ignore
                callback_data='transfer'
            )
        )

    if (
        place in ['–ö–æ—Ç–∞–π—Å–∫–∏–π –ú–µ–¥–∏–Ω—Å—Ç–∏—Ç—É—Ç', '–ö—Ä–∞–π–Ω–∏–π –°–µ–≤–µ—Ä', '–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ–∫']
        or
        (
            place in ['–ü–ª–æ—â–∞–¥—å –ê–¥–º–∏–Ω–æ–≤', '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è']
            and line == 0
        )
    ):
        desc += (
            '<b>–ö–æ–Ω–µ—á–Ω–∞—è.</b> –ü–æ–µ–∑–¥ –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë—Ç, –ø—Ä–æ—Å—å–±–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤'
            ' –≤—ã–π—Ç–∏ –∏–∑ –≤–∞–≥–æ–Ω–æ–≤'
        )
    if index > 0:
        previous_station = METRO[line][index-1]
        markup.add(
            InlineKeyboardButton(
                text=f'‚¨Ö {previous_station}',
                callback_data='metro_back'
            )
        )
    if index < len(METRO[line])-1:
        next_station = METRO[line][index+1]
        markup.add(
            InlineKeyboardButton(
                text=f'‚û° {next_station}',
                callback_data='metro_forward'
            )
        )
    markup.add(
        InlineKeyboardButton(
            text='üèõ –í—ã–π—Ç–∏ –≤ –≥–æ—Ä–æ–¥',
            callback_data='city'
        )
    )

    if line in [2, 0]:
        message = await call.message.answer_photo(
            MAP,
            caption=f'<i>–û—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π –ø—É–Ω–∫—Ç <b>{place}</b>\n{desc}</i>',
            reply_markup=markup
        )
    else:
        message = await call.message.answer_photo(
            MAP,
            caption=f'<i>–°—Ç–∞–Ω—Ü–∏—è <b>{place}</b>\n{desc}</i>',
            reply_markup=markup
        )
    await asyncio.sleep(ticket_time)

    with contextlib.suppress(Exception):
        await message.delete()


async def tostation(user_id: int | str, target_station: str,
                    line: int | None = None):
    '''
    Callback for a user to instantly go to some place

    :param user_id - ID of the user to go to the place:
    :param station - the place for the user to go:
    :param line - the line where the place is located:
    '''
    lines = (
        line
        or cur.select("line", "userdata").where(user_id=user_id).one()
    )
    cur.update("userdata").set(current_place=target_station).where(
        user_id=user_id).commit()
    cur.update("userdata").set(line=lines).where(user_id=user_id).commit()


async def metro_forward(call: CallbackQuery, already_onboard: bool = False):
    user_id = call.from_user.id
    line = cur.select("line", "userdata").where(user_id=user_id).one()

    if line in [0, 2]:
        if not isinterval('citylines') and not already_onboard:
            return await call.answer(
                (
                    "–ü–æ—Å–∞–¥–∫–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–µ–∑–¥ –ø—Ä–∏–µ–¥–µ—Ç —á–µ—Ä–µ–∑ "
                    f"{remaining('citylines')}"
                ),
                show_alert=True
            )

    elif not isinterval('metro') and not already_onboard:
        return await call.answer(
            "–ü–æ—Å–∞–¥–∫–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–µ–∑–¥ –ø—Ä–∏–µ–¥–µ—Ç —á–µ—Ä–µ–∑ "
            f"{remaining('metro')}",
            show_alert=True
        )

    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    index = METRO[line].index(place)

    if line not in [0, 2]:
        await call.message.answer_photo(
            'https://te.legra.ph/file/5104458f4a5bab9259a18.jpg',
            f'<i>–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è: <b>{METRO[line][index+1]}</b>. –û—Å—Ç–æ—Ä–æ–∂–Ω–æ,'
            ' –¥–≤–µ—Ä–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è!</i>'
        )

    else:
        await call.message.answer_photo(
            'https://telegra.ph/file/06103228e0d120bacf852.jpg',
            '<i>–ü–æ—Å–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ª–µ–¥—É—é—â–∏–π –æ—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π –ø—É–Ω–∫—Ç: <b>'
            f'{METRO[line][index+1]}</b></i>'
        )

    with contextlib.suppress(Exception):
        await call.message.delete()
    set_ride_status(user_id)
    await asyncio.sleep(random.randint(METRO_TIME[0], METRO_TIME[1]))
    await tostation(user_id, target_station=METRO[line][index+1])
    if index+2 == len(METRO[line]):
        await metrocall(call)
    else:
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton(
                                 text='üö∂ –í—ã–π—Ç–∏ –∏–∑ –ø–æ–µ–∑–¥–∞',
                                 callback_data='exit_metro'
                                )
                            )
        if line in [0, 2]:
            announcement = f'–û—Å—Ç–∞–Ω–æ–≤–∫–∞ <b>{METRO[line][index+1]}</b>. –°–ª–µ' +\
                           f'–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: <b>{METRO[line][index+2]}</b>'
        else:
            announcement = f'–°—Ç–∞–Ω—Ü–∏—è <b>{METRO[line][index+1]}</b>. ' +\
                           f'–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è: <b>{METRO[line][index+2]}</b>'
        message = await call.message.answer(f'<i>{announcement}</i>',
                                            reply_markup=markup)
        await asyncio.sleep(25)
        await message.delete()
        if not cur.select("left_transport", "userdata").\
                where(user_id=user_id).one() == message['message_id']:
            await metro_forward(call, True)


async def metro_back(call: CallbackQuery, already_onboard: bool = False):
    user_id = call.from_user.id
    line = cur.select("line", "userdata").where(user_id=user_id).one()

    if line in [0, 2] and not isinterval('citylines') and not already_onboard:
        return await call.answer(
            "–ü–æ—Å–∞–¥–∫–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–µ–∑–¥ –ø—Ä–∏–µ–¥–µ—Ç —á–µ—Ä–µ–∑ "
            f"{remaining('citylines')}",
            show_alert=True
        )

    elif not isinterval('metro') and not already_onboard:
        return await call.answer(
            "–ü–æ—Å–∞–¥–∫–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–µ–∑–¥ –ø—Ä–∏–µ–¥–µ—Ç —á–µ—Ä–µ–∑"
            f" {remaining('metro')}",
            show_alert=True
        )

    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    index = METRO[line].index(place)

    if line not in [2, 0]:
        await call.message.answer_photo(
            'https://te.legra.ph/file/5104458f4a5bab9259a18.jpg',
            caption=f'<i>–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è: <b>{METRO[line][index-1]}</b>.'
            ' –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –¥–≤–µ—Ä–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è!</i>'
        )
    else:
        await call.message.answer_photo(
            'https://telegra.ph/file/06103228e0d120bacf852.jpg',
            caption=f'<i>–ü–æ—Å–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ª–µ–¥—É—é—â–∏–π –æ—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π –ø—É–Ω–∫—Ç: '
            f'<b>{METRO[line][index-1]}</b></i>'
        )

    with contextlib.suppress(Exception):
        await call.message.delete()
    set_ride_status(user_id)
    await asyncio.sleep(random.randint(METRO_TIME[0], METRO_TIME[1]))
    await tostation(user_id, target_station=METRO[line][index-1])
    if index == 1:
        await metrocall(call)
    else:
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton(
                                 text='üö∂ –í—ã–π—Ç–∏ –∏–∑ –ø–æ–µ–∑–¥–∞',
                                 callback_data='exit_metro'
                                )
                            )
        if line in [0, 2]:
            announcement = f'–û—Å—Ç–∞–Ω–æ–≤–∫–∞ <b>{METRO[line][index-1]}</b>. –°–ª–µ' +\
                           f'–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: <b>{METRO[line][index-2]}</b>'
        else:
            announcement = f'–°—Ç–∞–Ω—Ü–∏—è <b>{METRO[line][index-1]}</b>. ' +\
                           f'–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è: <b>{METRO[line][index-2]}</b>'
        message = await call.message.answer(f'<i>{announcement}</i>',
                                            reply_markup=markup)
        await asyncio.sleep(25)
        await message.delete()
        if not cur.select("left_transport", "userdata").\
                where(user_id=user_id).one() == message['message_id']:
            await metro_back(call, True)


async def transfer_metro(call: CallbackQuery):
    '''
    Callback for a user to transfer to another line

    :param call - callback:
    '''
    user_id = call.from_user.id

    transfer_line = _transfer(user_id)
    cur.update("userdata").set(line=transfer_line).where(
        user_id=user_id).commit()

    await metrocall(call)

    with contextlib.suppress(Exception):
        await call.message.delete()


async def airport(call: CallbackQuery):
    '''
    Callback for airport menu

    :param call - callback:
    '''
    user_id = call.from_user.id
    set_ride_status(user_id, 0)
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    markup = InlineKeyboardMarkup()

    match (place):
        case '–ê—ç—Ä–æ–ø–æ—Ä—Ç –ë–æ—Ä–∏—Å–æ–≤':
            airport = '–ë–æ—Ä–∏—Å–æ–≤'
            markup.add(
                InlineKeyboardButton(
                    text='üõ´ –î–æ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞',
                    callback_data='flight'
                )
            )
        case '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç':
            airport = '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç –ñ–∏–≤–æ–ø–æ–ª–∏—Å'
            markup.add(
                InlineKeyboardButton(
                    text='üõ´ –î–æ –ë–æ—Ä–∏—Å–æ–≤–∞',
                    callback_data='flight'
                )
            )
        case _:
            return

    markup.add(
        InlineKeyboardButton(
            text='üèõ –í—ã–π—Ç–∏ –≤ –≥–æ—Ä–æ–¥',
            callback_data='city'
        )
    )
    await call.message.answer(
        f'‚úà <i>–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç—É <b>{airport}</b></i>',
        reply_markup=markup
    )


async def flight(call: CallbackQuery):
    '''
    Callback for an airplane flight

    :param call - callback:
    '''
    if not isinterval('plane'):
        return await call.answer(
            '–ü–æ—Å–∞–¥–∫–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –°–∞–º–æ–ª—ë—Ç –ø—Ä–∏–ª–µ—Ç–∏—Ç —á–µ—Ä–µ–∑'
            f' {remaining("plane")}',
            show_alert=True
        )

    if call.data == "flight_confirm":
        user_id = call.from_user.id
        balance = cur.select("balance", "userdata").where(
            user_id=user_id).one()

        if balance <= aircost:
            return await call.message.answer(
                '<i>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ :(</i>'
            )

        place = cur.select("current_place", "userdata").where(
            user_id=user_id).one()
        cur.update("userdata").add(balance=-aircost).where(
            user_id=user_id).commit()

        sleep_time = random.randint(AIRPLANE_TIME[0], AIRPLANE_TIME[1])

        if place == '–ê—ç—Ä–æ–ø–æ—Ä—Ç –ë–æ—Ä–∏—Å–æ–≤':
            await bot.send_photo(
                call.message.chat.id,
                'https://telegra.ph/file/d34459cedf14cb4b4a19a.jpg',
                '<i>–ù–∞—à —Å–∞–º–æ–ª—ë—Ç –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫ <b>–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –∞—ç—Ä–æ–ø–æ—Ä—Ç—É '
                '–ñ–∏–≤–æ–ø–æ–ª–∏—Å</b>. –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç. –£–¥–∞—á–Ω–æ–≥–æ '
                '–ø–æ–ª—ë—Ç–∞!</i>'
            )
            destination = '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç'
            destline = 2

        elif place == '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç':
            await bot.send_photo(
                call.message.chat.id,
                'https://telegra.ph/file/d34459cedf14cb4b4a19a.jpg',
                '<i>–ù–∞—à —Å–∞–º–æ–ª—ë—Ç –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫ <b>–ê—ç—Ä–æ–ø–æ—Ä—Ç—É –ë–æ—Ä–∏—Å–æ–≤</b>. –ü—É—Ç–µ'
                '—à–µ—Å—Ç–≤–∏–µ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç. –£–¥–∞—á–Ω–æ–≥–æ –ø–æ–ª—ë—Ç–∞!</i>'
            )
            destination = '–ê—ç—Ä–æ–ø–æ—Ä—Ç –ë–æ—Ä–∏—Å–æ–≤'
            destline = 1
        else:
            return
        set_ride_status(user_id)

        await achieve(
            user_id, call.message.chat.id, "plane_achieve"
        )
        await asyncio.sleep(sleep_time)
        await tostation(user_id, target_station=destination, line=destline)

        return await airport(call)

    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton(text='üõ´ –õ–µ—Ç–µ—Ç—å', callback_data='flight_confirm'),
        InlineKeyboardButton(text='üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel_action')
    )
    await call.message.answer(
        f'<i>üõ© –ü–æ–ª—ë—Ç –Ω–∞ —Å–∞–º–æ–ª—ë—Ç–µ —Å—Ç–æ–∏—Ç <b>${aircost}</b>. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ '
        '—Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?</i>',
        reply_markup=markup
    )


async def regtrain_lounge(call: CallbackQuery):
    '''
    Callback for railway platform vestibule menu

    :param call - callback:
    '''
    user_id = call.from_user.id
    token = cur.select("regtraintoken", "userdata").where(
        user_id=user_id).one()

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton(
            text='üöÜ –ü—Ä–æ–π—Ç–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É',
            callback_data='proceed_regtrain'
        )
    )
    markup.add(
        InlineKeyboardButton(
            text='üé´ –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤',
            callback_data='regtrain_tickets'
        )
    )
    await call.message.answer(
        f'<i>–£ –≤–∞—Å <b>{token}</b> –±–∏–ª–µ—Ç–æ–≤</i>',
        reply_markup=markup
    )


async def proceed_regtrain(call: CallbackQuery):
    '''
    Callback for entering a railway stop

    :param call - callback:
    '''
    user_id = call.from_user.id
    token = cur.select("regtraintoken", "userdata").where(
        user_id=user_id).one()

    if token < 1:
        markup = InlineKeyboardMarkup()
        markup.add()
        return await call.message.answer(
            '<i>üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤</i>',
            reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(
                        text='üé´ –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤',
                        callback_data='regtrain_tickets'
                    )
                )
            )

    cur.update("userdata").add(regtraintoken=-1).where(
        user_id=user_id).commit()
    await regtraincall(call)


async def regtraincall(call: CallbackQuery):
    '''
    Callback for regional economy class station

    :param call - callback:
    '''
    user_id = call.from_user.id
    set_ride_status(user_id, 0)
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    index = REGTRAIN[1].index(place)
    markup = InlineKeyboardMarkup()
    desc = str()
    if index in [0, len(REGTRAIN[1]) - 1]:
        desc += (
            '<b>–ö–æ–Ω–µ—á–Ω–∞—è.</b> –ü–æ–µ–∑–¥ –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë—Ç, –ø—Ä–æ—Å—å–±–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤'
            ' –≤—ã–π—Ç–∏ –∏–∑ –≤–∞–≥–æ–Ω–æ–≤'
        )
    if index > 0:
        markup.add(
            InlineKeyboardButton(
                text=f'‚¨Ö –î–æ —Å—Ç. {REGTRAIN[0][0]}',
                callback_data='regtrain_back'
            )
        )
    if index < len(REGTRAIN[1])-1:
        markup.add(
            InlineKeyboardButton(
                text=f'‚û° –î–æ —Å—Ç. {REGTRAIN[0][len(REGTRAIN[0])-1]}',
                callback_data='regtrain_forward'
            )
        )
    markup.add(
        InlineKeyboardButton(
            text='üèõ –í—ã–π—Ç–∏ –≤ –≥–æ—Ä–æ–¥',
            callback_data='city'
        )
    )
    message = await call.message.answer_photo(
        REGIONAL_MAP,
        caption=f'<i>–û—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π –ø—É–Ω–∫—Ç <b>{place}</b>\n{desc}</i>',
        reply_markup=markup
    )
    await asyncio.sleep(ticket_time)

    with contextlib.suppress(Exception):
        await message.delete()


async def regtrain_forward(call: CallbackQuery, already_onboard: bool = False):
    user_id = call.from_user.id

    if not isinterval('regtrain') and not already_onboard:
        return await call.answer(
            "–ü–æ—Å–∞–¥–∫–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–µ–∑–¥ –ø—Ä–∏–µ–¥–µ—Ç —á–µ—Ä–µ–∑ "
            f"{remaining('regtrain')}",
            show_alert=True
        )

    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    index = REGTRAIN[1].index(place)

    await call.message.answer_photo(
        'https://telegra.ph/file/71edfc6f9d47e6ea68b3f.jpg',
        f'<i>–°–ª–µ–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: <b>{REGTRAIN[0][index+1]}</b>. –û—Å—Ç–æ—Ä–æ–∂–Ω–æ,'
        ' –¥–≤–µ—Ä–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è!</i>'
    )

    with contextlib.suppress(Exception):
        await call.message.delete()
    set_ride_status(user_id)
    await asyncio.sleep(random.randint(REGTRAIN_TIME[0], REGTRAIN_TIME[1]))
    await tostation(user_id, target_station=REGTRAIN[1][index+1])
    if index+2 == len(REGTRAIN[1]):
        await regtraincall(call)
    else:
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton(
                                 text='üö∂ –í—ã–π—Ç–∏ –∏–∑ –ø–æ–µ–∑–¥–∞',
                                 callback_data='exit_regtrain'
                                )
                            )
        message = await call.message.answer(
                f'<i>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ <b>{REGTRAIN[1][index+1]}</b>. '
                f'–°–ª–µ–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: <b>{REGTRAIN[1][index+2]}</b></i>',
                reply_markup=markup)
        await asyncio.sleep(25)
        await message.delete()
        if not cur.select("left_transport", "userdata").\
                where(user_id=user_id).one() == message['message_id']:
            await regtrain_forward(call, True)


async def regtrain_back(call: CallbackQuery, already_onboard: bool = False):
    user_id = call.from_user.id

    if not isinterval('regtrain') and not already_onboard:
        return await call.answer(
            "–ü–æ—Å–∞–¥–∫–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–µ–∑–¥ –ø—Ä–∏–µ–¥–µ—Ç —á–µ—Ä–µ–∑ "
            f"{remaining('regtrain')}",
            show_alert=True
        )

    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    index = REGTRAIN[1].index(place)

    await call.message.answer_photo(
        'https://telegra.ph/file/71edfc6f9d47e6ea68b3f.jpg',
        f'<i>–°–ª–µ–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: <b>{REGTRAIN[0][index-1]}</b>. –û—Å—Ç–æ—Ä–æ–∂–Ω–æ,'
        ' –¥–≤–µ—Ä–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è!</i>'
    )

    with contextlib.suppress(Exception):
        await call.message.delete()
    set_ride_status(user_id)
    await asyncio.sleep(random.randint(REGTRAIN_TIME[0], REGTRAIN_TIME[1]))
    await tostation(user_id, target_station=REGTRAIN[1][index-1])
    if index == 1:
        await regtraincall(call)
    else:
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton(
                                 text='üö∂ –í—ã–π—Ç–∏ –∏–∑ –ø–æ–µ–∑–¥–∞',
                                 callback_data='exit_regtrain'
                                )
                            )
        message = await call.message.answer(
                f'<i>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ <b>{REGTRAIN[0][index-1]}</b>. '
                f'–°–ª–µ–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: <b>{REGTRAIN[0][index-2]}</b></i>',
                reply_markup=markup)
        await asyncio.sleep(25)
        await message.delete()
        if not cur.select("left_transport", "userdata").\
                where(user_id=user_id).one() == message['message_id']:
            await regtrain_back(call, True)


async def trolleybus_lounge(call: CallbackQuery):
    '''
    Callback for trolleybus stop vestibule menu

    :param call - callback:
    '''
    user_id = call.from_user.id
    token = cur.select("trolleytoken", "userdata").where(
        user_id=user_id).one()

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton(
            text='üöè –ü—Ä–æ–π—Ç–∏ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É',
            callback_data='proceed_trolleybus'
        )
    )
    markup.add(
        InlineKeyboardButton(
            text='üé´ –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤',
            callback_data='trolleybus_tickets'
        )
    )
    await call.message.answer(
        f'<i>–£ –≤–∞—Å <b>{token}</b> –±–∏–ª–µ—Ç–æ–≤</i>',
        reply_markup=markup
    )


async def proceed_trolleybus(call: CallbackQuery):
    '''
    Callback for entering a trolleybus stop

    :param call - callback:
    '''
    user_id = call.from_user.id
    token = cur.select("trolleytoken", "userdata").where(
        user_id=user_id).one()

    if token < 1:
        markup = InlineKeyboardMarkup()
        markup.add()
        return await call.message.answer(
            '<i>üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤</i>',
            reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(
                        text='üé´ –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤',
                        callback_data='trolleybus_tickets'
                    )
                )
            )

    cur.update("userdata").add(trolleytoken=-1).where(
        user_id=user_id).commit()
    await trolleybuscall(call)


async def trolleybuscall(call: CallbackQuery):
    '''
    Callback for trolleybus stop

    :param call - callback:
    '''
    user_id = call.from_user.id
    set_ride_status(user_id, 0)
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    index = CITY.index(place)
    markup = InlineKeyboardMarkup()
    desc = str()
    if index in [0, len(CITY) - 1]:
        desc += (
            '<b>–ö–æ–Ω–µ—á–Ω–∞—è.</b> –¢—Ä–æ–ª–ª–µ–π–±—É—Å –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë—Ç, –ø—Ä–æ—Å—å–±–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤'
            ' –ø–æ–∫–∏–Ω—É—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ'
        )
    if index > 0:
        markup.add(
            InlineKeyboardButton(
                text=f'‚¨Ö {CITY[index - 1]}',
                callback_data='trolleybus_back'
            )
        )
    if index < len(CITY)-1:
        markup.add(
            InlineKeyboardButton(
                text=f'‚û° {CITY[index + 1]}',
                callback_data='trolleybus_forward'
            )
        )
    markup.add(
        InlineKeyboardButton(
            text='üöè –°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤',
            callback_data='trolley_stops'
        )
    )
    markup.add(
        InlineKeyboardButton(
            text='üèõ –í—ã–π—Ç–∏ –≤ –≥–æ—Ä–æ–¥',
            callback_data='city'
        )
    )
    message = await call.message.answer(
        f'<i>–û—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π –ø—É–Ω–∫—Ç <b>{place}</b>\n{desc}</i>',
        reply_markup=markup
    )
    await asyncio.sleep(ticket_time)

    with contextlib.suppress(Exception):
        await message.delete()


async def trolleybus_forward(call: CallbackQuery,
                             already_onboard: bool = False):
    user_id = call.from_user.id

    if not isinterval('trolleybus') and not already_onboard:
        return await call.answer(
            "–ü–æ—Å–∞–¥–∫–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –¢—Ä–æ–ª–ª–µ–π–±—É—Å –ø—Ä–∏–µ–¥–µ—Ç —á–µ—Ä–µ–∑ "
            f"{remaining('trolleybus')}",
            show_alert=True
        )

    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    index = CITY.index(place)

    await call.message.answer_photo(
        'https://telegra.ph/file/411dad335dac249f8b1aa.jpg',
        f'<i>–°–ª–µ–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: <b>{CITY[index+1]}</b>. –û—Å—Ç–æ—Ä–æ–∂–Ω–æ,'
        ' –¥–≤–µ—Ä–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è!</i>'
    )

    with contextlib.suppress(Exception):
        await call.message.delete()
    set_ride_status(user_id)
    await asyncio.sleep(random.randint(TROLLEYBUS_TIME[0], TROLLEYBUS_TIME[1]))
    await tostation(user_id, target_station=CITY[index+1])
    if index+2 == len(CITY):
        await trolleybuscall(call)
    else:
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton(
                                 text='üö∂ –í—ã–π—Ç–∏ –∏–∑ —Ç—Ä–æ–ª–ª–µ–π–±—É—Å–∞',
                                 callback_data='exit_trolleybus'
                                )
                            )
        message = await call.message.answer(
                f'<i>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ <b>{CITY[index+1]}</b>. '
                f'–°–ª–µ–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: <b>{CITY[index+2]}</b></i>',
                reply_markup=markup)
        await asyncio.sleep(25)
        await message.delete()
        if not cur.select("left_transport", "userdata").\
                where(user_id=user_id).one() == message['message_id']:
            await trolleybus_forward(call, True)


async def trolleybus_back(call: CallbackQuery, already_onboard: bool = False):
    user_id = call.from_user.id

    if not isinterval('trolleybus') and not already_onboard:
        return await call.answer(
            "–ü–æ—Å–∞–¥–∫–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –¢—Ä–æ–ª–ª–µ–π–±—É—Å –ø—Ä–∏–µ–¥–µ—Ç —á–µ—Ä–µ–∑ "
            f"{remaining('trolleybus')}",
            show_alert=True
        )

    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    index = CITY.index(place)

    await call.message.answer_photo(
        'https://telegra.ph/file/411dad335dac249f8b1aa.jpg',
        f'<i>–°–ª–µ–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: <b>{CITY[index-1]}</b>. –û—Å—Ç–æ—Ä–æ–∂–Ω–æ,'
        ' –¥–≤–µ—Ä–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è!</i>'
    )

    with contextlib.suppress(Exception):
        await call.message.delete()
    set_ride_status(user_id)
    await asyncio.sleep(random.randint(TROLLEYBUS_TIME[0], TROLLEYBUS_TIME[1]))
    await tostation(user_id, target_station=CITY[index-1])
    if index == 1:
        await trolleybuscall(call)
    else:
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton(
                                 text='üö∂ –í—ã–π—Ç–∏ –∏–∑ —Ç—Ä–æ–ª–ª–µ–π–±—É—Å–∞',
                                 callback_data='exit_trolleybus'
                                )
                            )
        message = await call.message.answer(
                f'<i>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ <b>{CITY[index-1]}</b>. '
                f'–°–ª–µ–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: <b>{CITY[index-2]}</b></i>',
                reply_markup=markup)
        await asyncio.sleep(25)
        await message.delete()
        if not cur.select("left_transport", "userdata").\
                where(user_id=user_id).one() == message['message_id']:
            await trolleybus_back(call, True)


async def businessclass_lounge(call: CallbackQuery):
    '''
    Callback for high-speed train station

    :param call - callback:
    '''
    user_id = call.from_user.id
    set_ride_status(user_id, 0)
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    token = cur.select("traintoken", "userdata").where(
        user_id=user_id).one()

    if place not in trains[0]:
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    markup = InlineKeyboardMarkup()
    for index, station in enumerate(trains[0]):
        if station != place:
            markup.add(
                InlineKeyboardButton(
                    text=f'üöÑ {trains[1][index]}',
                    callback_data=f'go_bytrain_to_{station}'
                )
            )
    markup.add(
        InlineKeyboardButton(
            text='üöâ –í—ã–π—Ç–∏ –Ω–∞ –≤–æ–∫–∑–∞–ª',
            callback_data='exit_to_railway_station'
        )
    )

    await call.message.answer(
        f'<i>üöâ –°—Ç–∞–Ω—Ü–∏—è <b>{trains[2][trains[0].index(place)]}</b>\n\n'
        f'–ö—É–¥–∞ –ø—É—Ç—å –¥–µ—Ä–∂–∏—Ç–µ?\n\n–£ –≤–∞—Å <b>{token}</b> –±–∏–ª–µ—Ç–æ–≤</i>',
        reply_markup=markup
    )


async def go_bytrain(call: CallbackQuery, destination: str):
    '''
    Callback for high-speed train travel

    :param call - callback:
    :param destination - station to travel to'
    '''
    user_id = call.from_user.id
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    if place not in trains[0] or place == destination:
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    if not isinterval('train'):
        return await call.answer(
            "–ü–æ—Å–∞–¥–∫–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–µ–∑–¥ –ø—Ä–∏–µ–¥–µ—Ç —á–µ—Ä–µ–∑ "
            f"{remaining('train')}",
            show_alert=True
        )

    token = cur.select("traintoken", "userdata").where(
        user_id=user_id).one()
    if token < 1:
        markup = InlineKeyboardMarkup()
        markup.add()
        return await call.message.answer(
            '<i>üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤</i>',
            reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(
                        text='üé´ –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤',
                        callback_data='train_tickets'
                    )
                )
            )

    cur.update("userdata").add(traintoken=-1).where(
        user_id=user_id).commit()

    with contextlib.suppress(Exception):
        await call.message.delete()
    set_ride_status(user_id)

    index = trains[0].index(destination)
    await call.message.answer_photo(
        'https://telegra.ph/file/ead2a4bfc5e78cf56ba1e.jpg',
        caption='üöÜ <i>–ù–∞—à –ø–æ–µ–∑–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é <b>'
                f'{trains[2][index]}</b>. –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ'
        ' –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã. –£–¥–∞—á–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏!</i>'
        )

    await asyncio.sleep(random.randint(TRAIN_TIME[0], TRAIN_TIME[1]))
    await tostation(user_id, target_station=destination)
    await businessclass_lounge(call)


async def buscall(call: CallbackQuery):
    '''
    Callback for regional shuttle station

    :param call - callback:
    '''
    user_id = call.from_user.id
    set_ride_status(user_id, 0)
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    balance = cur.select("balance", "userdata").where(
        user_id=user_id).one()

    if place not in villages:
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=2)
    place_list = villages if place in autostations else autostations
    places = [
        InlineKeyboardButton(
            text=f'üöê {station}', callback_data=f'go_byshuttle_to_{station}'
        )
        for station in place_list
        if station != place
        and (place_list == autostations or station not in autostations)
    ]
    markup.add(*places)
    if place in autostations:
        markup.add(
            InlineKeyboardButton(
                text='‚óÄ –í—ã–π—Ç–∏ –Ω–∞ –∞–≤—Ç–æ—Å—Ç–∞–Ω—Ü–∏—é',
                callback_data='exit_to_busstation'
            )
        )
    else:
        markup.add(
            InlineKeyboardButton(
                text='üèõ –í—ã–π—Ç–∏ –≤ –≥–æ—Ä–æ–¥',
                callback_data='city'
            )
        )

    await call.message.answer(
        f'<i>üöê –û—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π –ø—É–Ω–∫—Ç <b>{place}</b>\n\n'
        f'–ö—É–¥–∞ –ø—É—Ç—å –¥–µ—Ä–∂–∏—Ç–µ?\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∑–¥–∞ - <b>${buscost}</b>\n'
        f'–í–∞—à –±–∞–ª–∞–Ω—Å: <b>${balance}</b></i>',
        reply_markup=markup
    )


async def regbuscall(call: CallbackQuery):
    '''
    Callback for regional bus station

    :param call - callback:
    '''
    user_id = call.from_user.id
    set_ride_status(user_id, 0)
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    balance = cur.select("balance", "userdata").where(
        user_id=user_id).one()

    if place not in autostations:
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    markup = InlineKeyboardMarkup()
    for station in autostations:
        if station != place:
            markup.add(
                InlineKeyboardButton(
                    text=f'üöå {station}',
                    callback_data=f'go_bybus_to_{station}'
                )
            )

    markup.add(
        InlineKeyboardButton(
            text='‚óÄ –í—ã–π—Ç–∏ –Ω–∞ –∞–≤—Ç–æ—Å—Ç–∞–Ω—Ü–∏—é',
            callback_data='exit_to_busstation'
        )
    )

    await call.message.answer(
        f'<i>üöå –ê–≤—Ç–æ—Å—Ç–∞–Ω—Ü–∏—è <b>{place}</b>\n\n'
        f'–ö—É–¥–∞ –ø—É—Ç—å –¥–µ—Ä–∂–∏—Ç–µ?\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∑–¥–∞ - <b>${regbuscost}</b>\n'
        f'–í–∞—à –±–∞–ª–∞–Ω—Å: <b>${balance}</b></i>',
        reply_markup=markup
    )


async def go_bybus(call: CallbackQuery, destination: str):
    '''
    Callback for regional bus travel

    :param call - callback:
    :param destination - station to travel to'
    '''
    user_id = call.from_user.id
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    if place not in autostations or place == destination:
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    if not isinterval('bus'):
        return await call.answer(
            "–ü–æ—Å–∞–¥–∫–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –ê–≤—Ç–æ–±—É—Å –ø—Ä–∏–µ–¥–µ—Ç —á–µ—Ä–µ–∑ "
            f"{remaining('bus')}",
            show_alert=True
        )

    token = cur.select("balance", "userdata").where(
        user_id=user_id).one()
    if token < regbuscost:
        markup = InlineKeyboardMarkup()
        markup.add()
        return await call.message.answer(
            '<i>üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</i>'
            )

    cur.update("userdata").add(balance=-regbuscost).where(
        user_id=user_id).commit()

    with contextlib.suppress(Exception):
        await call.message.delete()
    set_ride_status(user_id)

    await call.message.answer_photo(
        'https://telegra.ph/file/34226b77d11cbd7e19b7b.jpg',
        caption='üöå <i>–ü–æ—Å–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è: <b>'
                f'{destination}</b>. –£–¥–∞—á–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏!</i>'
        )

    await asyncio.sleep(random.randint(BUS_TIME[0], BUS_TIME[1]))
    await tostation(user_id, target_station=destination)
    await regbuscall(call)


async def go_byshuttle(call: CallbackQuery, destination: str):
    '''
    Callback for regional shuttle travel

    :param call - callback:
    :param destination - station to travel to'
    '''
    user_id = call.from_user.id
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    if place not in villages or place == destination:
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    if not isinterval('taxi'):
        return await call.answer(
            "–ü–æ—Å–∞–¥–∫–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –ú–∞—Ä—à—Ä—É—Ç–∫–∞ –ø—Ä–∏–µ–¥–µ—Ç —á–µ—Ä–µ–∑ "
            f"{remaining('taxi')}",
            show_alert=True
        )

    token = cur.select("balance", "userdata").where(
        user_id=user_id).one()
    if token < buscost:
        markup = InlineKeyboardMarkup()
        markup.add()
        return await call.message.answer(
            '<i>üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</i>'
            )

    cur.update("userdata").add(balance=-buscost).where(
        user_id=user_id).commit()

    with contextlib.suppress(Exception):
        await call.message.delete()
    set_ride_status(user_id)

    await call.message.answer_photo(
        'https://telegra.ph/file/8da21dc03e8f266e0845a.jpg',
        caption='üöê <i>–ü–æ—Å–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ª–µ–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: <b>'
                f'{destination}</b>. –£–¥–∞—á–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏!</i>'
        )

    await asyncio.sleep(random.randint(BUS_TIME[0], BUS_TIME[1]))
    await tostation(user_id, target_station=destination)
    if destination not in autostations:
        await achieve(
            user_id, call.message.chat.id, "shuttle_achieve"
        )
    await buscall(call)


async def tram_lounge(call: CallbackQuery):
    '''
    Callback for tram stop vestibule menu

    :param call - callback:
    '''
    user_id = call.from_user.id
    token = cur.select("tramtoken", "userdata").where(
        user_id=user_id).one()

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton(
            text='üöè –ü—Ä–æ–π—Ç–∏ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É',
            callback_data='proceed_tram'
        )
    )
    markup.add(
        InlineKeyboardButton(
            text='üé´ –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤',
            callback_data='tram_tickets'
        )
    )
    await call.message.answer(
        f'<i>–£ –≤–∞—Å <b>{token}</b> –±–∏–ª–µ—Ç–æ–≤</i>',
        reply_markup=markup
    )


async def proceed_tram(call: CallbackQuery):
    '''
    Callback for entering a tram stop

    :param call - callback:
    '''
    user_id = call.from_user.id
    token = cur.select("tramtoken", "userdata").where(
        user_id=user_id).one()

    if token < 1:
        markup = InlineKeyboardMarkup()
        markup.add()
        return await call.message.answer(
            '<i>üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤</i>',
            reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(
                        text='üé´ –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤',
                        callback_data='tram_tickets'
                    )
                )
            )

    cur.update("userdata").add(tramtoken=-1).where(
        user_id=user_id).commit()
    await tramcall(call)


async def tramcall(call: CallbackQuery):
    '''
    Callback for tram stop

    :param call - callback:
    '''
    user_id = call.from_user.id
    set_ride_status(user_id, 0)
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    index = tramroute.index(place)
    markup = InlineKeyboardMarkup()
    desc = str()
    if index in [0, len(tramroute) - 1]:
        desc += (
            '<b>–ö–æ–Ω–µ—á–Ω–∞—è.</b> –¢—Ä–∞–º–≤–∞–π –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë—Ç, –ø—Ä–æ—Å—å–±–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤'
            ' –ø–æ–∫–∏–Ω—É—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ'
        )
    if index > 0:
        markup.add(
            InlineKeyboardButton(
                text=f'‚¨Ö {tramroute[index - 1]}',
                callback_data='tram_back'
            )
        )
    if index < len(tramroute)-1:
        markup.add(
            InlineKeyboardButton(
                text=f'‚û° {tramroute[index + 1]}',
                callback_data='tram_forward'
            )
        )
    markup.add(
        InlineKeyboardButton(
            text='üöè –°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤',
            callback_data='tram_stops'
        )
    )
    markup.add(
        InlineKeyboardButton(
            text='üèõ –í—ã–π—Ç–∏ –≤ –≥–æ—Ä–æ–¥',
            callback_data='city'
        )
    )
    message = await call.message.answer(
        f'<i>–û—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π –ø—É–Ω–∫—Ç <b>{place}</b>\n{desc}</i>',
        reply_markup=markup
    )
    await asyncio.sleep(ticket_time)

    with contextlib.suppress(Exception):
        await message.delete()


async def tram_forward(call: CallbackQuery,
                       already_onboard: bool = False):
    user_id = call.from_user.id

    if not isinterval('tram') and not already_onboard:
        return await call.answer(
            "–ü–æ—Å–∞–¥–∫–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –¢—Ä–∞–º–≤–∞–π –ø—Ä–∏–µ–¥–µ—Ç —á–µ—Ä–µ–∑ "
            f"{remaining('tram')}",
            show_alert=True
        )

    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    index = tramroute.index(place)

    await call.message.answer_photo(
        'https://telegra.ph/file/e1cafc19ba1fabec68b0b.jpg',
        f'<i>–°–ª–µ–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: <b>{tramroute[index+1]}</b>. –û—Å—Ç–æ—Ä–æ–∂–Ω–æ,'
        ' –¥–≤–µ—Ä–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è!</i>'
    )

    with contextlib.suppress(Exception):
        await call.message.delete()
    set_ride_status(user_id)
    await asyncio.sleep(random.randint(TRAM_TIME[0], TRAM_TIME[1])/2)
    if random.uniform(0, 1) < TRAM_CRASH_CHANCE/100:
        await tram_crash(call)
        return await call.answer('üò£')
    await asyncio.sleep(random.randint(TRAM_TIME[0], TRAM_TIME[1])/2)
    await tostation(user_id, target_station=tramroute[index+1])
    if index+2 == len(tramroute):
        await tramcall(call)
    else:
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton(
                                 text='üö∂ –í—ã–π—Ç–∏ –∏–∑ —Ç—Ä–∞–º–≤–∞—è',
                                 callback_data='exit_tram'
                                )
                            )
        message = await call.message.answer(
                f'<i>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ <b>{tramroute[index+1]}</b>. '
                f'–°–ª–µ–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: <b>{tramroute[index+2]}</b></i>',
                reply_markup=markup)
        await asyncio.sleep(25)
        await message.delete()
        if not cur.select("left_transport", "userdata").\
                where(user_id=user_id).one() == message['message_id']:
            await tram_forward(call, True)


async def tram_back(call: CallbackQuery,
                    already_onboard: bool = False):
    user_id = call.from_user.id

    if not isinterval('tram') and not already_onboard:
        return await call.answer(
            "–ü–æ—Å–∞–¥–∫–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –¢—Ä–∞–º–≤–∞–π –ø—Ä–∏–µ–¥–µ—Ç —á–µ—Ä–µ–∑ "
            f"{remaining('tram')}",
            show_alert=True
        )

    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    index = tramroute.index(place)

    await call.message.answer_photo(
        'https://telegra.ph/file/e1cafc19ba1fabec68b0b.jpg',
        f'<i>–°–ª–µ–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: <b>{tramroute[index-1]}</b>. –û—Å—Ç–æ—Ä–æ–∂–Ω–æ,'
        ' –¥–≤–µ—Ä–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è!</i>'
    )

    with contextlib.suppress(Exception):
        await call.message.delete()
        set_ride_status(user_id)
    await asyncio.sleep(random.randint(TRAM_TIME[0], TRAM_TIME[1])/2)
    if random.uniform(0, 1) < TRAM_CRASH_CHANCE/100:
        set_ride_status(user_id, 0)
        await tram_crash(call)
        return await call.answer('üò£')
    await asyncio.sleep(random.randint(TRAM_TIME[0], TRAM_TIME[1])/2)
    await tostation(user_id, target_station=tramroute[index-1])
    if index == 1:
        await tramcall(call)
    else:
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton(
                                 text='üö∂ –í—ã–π—Ç–∏ –∏–∑ —Ç—Ä–∞–º–≤–∞—è',
                                 callback_data='exit_tram'
                                )
                            )
        message = await call.message.answer(
                f'<i>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ <b>{tramroute[index-1]}</b>. '
                f'–°–ª–µ–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: <b>{tramroute[index-2]}</b></i>',
                reply_markup=markup)
        await asyncio.sleep(25)
        await message.delete()
        if not cur.select("left_transport", "userdata").\
                where(user_id=user_id).one() == message['message_id']:
            await tram_forward(call, True)


async def tram_crash(call: CallbackQuery):
    '''
    Callback for a tram accident

    :param call - callback:
    '''
    set_ride_status(call.from_user.id, 0)
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton(
            text='‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É',
            callback_data='tram'
        )
    )

    await call.message.answer(
        '<i><b>üò£ –ö–∞–∫–∞—è –¥–æ—Å–∞–¥–∞...</b>\n–î—Ä—è—Ö–ª—ã–π —Ç—Ä–∞–º–≤–∞–π —Å–ª–æ–º–∞–ª—Å—è. –ü—Ä–∏–¥—ë—Ç—Å—è'
        ' –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É. –ñ–∞–ª—å, —á—Ç–æ –¥–µ–Ω—å–≥–∏ –∑–∞ –±–∏–ª–µ—Ç –Ω–∏–∫—Ç–æ –Ω–µ –≤–µ—Ä–Ω—ë—Ç'
        '...</i>', reply_markup=markup
        )
    await achieve(
        call.from_user.id, call.message.chat.id, "tram_achieve"
    )


async def walk(call: CallbackQuery, destination: str):
    '''
    Callback for walking

    :param call - callback:
    :param destination - name of the place to go to:
    '''
    user_id = call.from_user.id
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    await call.message.delete()

    # following code checks whether current location of the user
    # is in the walk list
    index = -1
    for walkline in WALK:
        if place in walkline and walkline != WALK[3]:
            index = walkline.index(place)
    if index == -1 or place == destination:
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    # following code checks whether the destination is accessible
    # from current user's location by walking

    exists = any(
        (walkline[index] == destination and walkline != WALK[3]) for walkline in WALK # noqa
    )
    if not exists:
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å. –í —ç—Ç—É –º–µ—Å—Ç–Ω–æ—Å—Ç—å –Ω–µ–ª—å–∑—è '
                '–¥–æ–±—Ä–∞—Ç—å—Å—è –ø–µ—à–∫–æ–º'
            ),
            show_alert=True
        )
    time_required = WALK[3][index]

    await call.message.answer(
        '<i>üö∂ –ö–∞–∫ –∂–µ —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–π—Ç–∏—Å—å –ø–µ—à–æ—á–∫–æ–º... –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –¥–æ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ '
        f'<b>{destination}</b> –∑–∞–π–º—ë—Ç <b>{time_required}</b> —Å–µ–∫—É–Ω–¥</i>'
    )
    set_ride_status(user_id)

    for _ in range(3):
        await asyncio.sleep(time_required / 3)
        if await weather_damage(call.from_user.id, call.message.chat.id):
            return
    await achieve(
        call.from_user.id, call.message.chat.id, "walk_achieve"
    )
    await tostation(call.from_user.id, target_station=destination)

    await city(call.message, call.from_user.id)


async def local_clans(call: CallbackQuery):
    '''
    Callback for local clans

    :param call - callback:
    '''
    user_id = call.from_user.id
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    count = cur.execute(
            f"SELECT count(*) FROM clandata WHERE HQ_place='{place}'"
            " AND clan_type='public'").one()

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
    )

    if count == 0:
        return await call.message.answer(
            'üò™ <i>–í –≤–∞—à–µ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –Ω–µ—Ç –∫–ª–∞–Ω–æ–≤</i>',
            reply_markup=markup)
    text = f'üè¨ –ö–ª–∞–Ω—ã –≤ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ {place}'
    cur.execute(f"SELECT * FROM clandata WHERE HQ_place = '{place}"
                "' AND clan_type = 'public' LIMIT 40")
    clans = ''.join(
        [
            f'\n{row[7]}. {await get_embedded_clan_link(row[1])}'
            for row in cur.fetchall()
        ]
    )

    markup.add(
        InlineKeyboardButton(
            text='üîç –ò—Å–∫–∞—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É –¥–æ–º–∞',
            callback_data='search_by_address'
        )
    )
    await call.message.answer(
        f'<i><b>{text}:\n{clans}</b></i>', reply_markup=markup
    )


async def search_by_address(call: CallbackQuery) -> None:
    cur.update("userdata").set(process="search_address").where(
        user_id=call.from_user.id).commit()

    await bot.send_message(
        call.message.chat.id,
        "<i>üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞</i>",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                text="üö´ –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_process"
            )
        )
    )


async def find_address(message: Message) -> None:
    '''
    Method for list of clan headquarters for selected address

    :param message - message which called this method:
    '''
    if message.chat.type != 'private':
        return
    try:
        address = int(message.text)
    except ValueError:
        return await message.answer(
            "<i>ü§î –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ</i>",
            reply_markup=InlineKeyboardMarkup(row_width=1).add(
                InlineKeyboardButton(
                    text="üîÑ –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ",
                    callback_data="search_by_address"
                ),
                InlineKeyboardButton(
                    text="üö´ –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_action"
                )
            )
        )
    place = cur.select("current_place", "userdata").where(
        user_id=message.from_user.id
    ).one()

    count = cur.execute(
            f"SELECT count(*) FROM clandata WHERE HQ_place='{place}'"
            f" AND clan_type='public' AND address={address}").one()

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
    )

    if count == 0:
        return await message.answer(
            'üò™ <i>–ü–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É –Ω–µ—Ç –∫–ª–∞–Ω–æ–≤</i>',
            reply_markup=markup)
    text = f'üè¨ –ö–ª–∞–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É {place}, {address}'
    cur.execute(f"SELECT * FROM clandata WHERE HQ_place = '{place}"
                f"' AND clan_type = 'public' AND address = {address}")
    clans = ''.join(
        [
            f'\n{row[7]}. {await get_embedded_clan_link(row[1])}'
            for row in cur.fetchall()
        ]
    )

    await message.answer(
        f'<i><b>{text}:\n{clans}</b></i>', reply_markup=markup
    )
