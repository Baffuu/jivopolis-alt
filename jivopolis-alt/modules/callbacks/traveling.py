from ...database.functions import cur, conn, Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, buy
from ...config import METRO, WALK, CITY, trains, villages, walks, ITEMS, lvlcar

async def city(message: Message, user_id: str):
    place = cur.execute(f"SELECT place FROM userdata WHERE user_id={user_id}").fetchone()[0]
    line = cur.execute(f"SELECT line FROM userdata WHERE user_id={user_id}").fetchone()[0]
    car = cur.execute(f"SELECT car+bluecar FROM userdata WHERE user_id={user_id}").fetchone()[0] #todo MORE CARS
    
    markup = InlineKeyboardMarkup(row_width = 6)
    
    if not place in METRO[line]:
        for thisline in METRO:
            if place in thisline:
                cur.execute(f"UPDATE userdata SET line={METRO.index(thisline)} WHERE user_id={user_id}")
                conn.commit()
                
                line = METRO.index(thisline)

                break

    if line==2 or line==0:
        metro = InlineKeyboardButton(text="üöâ", callback_data="metro")
    else:
        metro = InlineKeyboardButton(text="üöá", callback_data="metro")

    caritem = InlineKeyboardButton(text="üöó", callback_data="cardrive")
    trbusitem = InlineKeyboardButton(text="üöé", callback_data="trolleybus")
    trainitem = InlineKeyboardButton(text="üöÜ", callback_data="railway_station")
    trlounge = InlineKeyboardButton(text="üöÜ", callback_data="lounge")
    taxi = InlineKeyboardButton(text="üöï", callback_data="cab")
    busitem = InlineKeyboardButton(text="üöå", callback_data="bus")
    lounge = InlineKeyboardButton(text="üöå", callback_data="bus_lounge")
    trans = []
    for thisline in METRO:
        if place in thisline:
            trans.append(metro)
            break
    if place in CITY:
        trans.append(trbusitem)
    if place in trains[0]:
        if place in ["–í–æ–∫–∑–∞–ª—å–Ω–∞—è", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∞—è", "–°—Ç–∞–Ω—Ü–∏—è –ö–æ—Ç–∞–π"]:
            trans.append(trainitem)
        else:
            trans.append(trlounge)
    if place in villages:
        if place in ["–ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª –ñ–∏–≤–æ–ø–æ–ª–∏—Å", "–ê–° –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–æ"]:
            trans.append(busitem)
        else:
            trans.append(lounge)
    if place in CITY:
        trans.append(taxi)
        if car>=1:
            trans.append(caritem)
    markup.add(*trans)
    iswalk = -1
    index = -1
    for wlk in WALK:
        if place in wlk:
            iswalk = WALK.index(wlk)
            break
    for wnk in WALK:
        walkindex = WALK.index(wnk)
        if iswalk == -1 or walkindex == iswalk or wnk[WALK[iswalk].index(place)] == "":
            continue
        index = WALK[iswalk].index(place)
        markup.add(InlineKeyboardButton(text="üö∂ {0} - {1} —Å–µ–∫—É–Ω–¥ —Ö–æ–¥—å–±—ã".format(wnk[index], walks[index]), callback_data="walk_{0}".format(wnk[index])))
    if place=="–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è":
        markup.add(InlineKeyboardButton(text="üå≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å—Å–∫–∏–π –±–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–π —Å–∞–¥", callback_data="botan_garden"))
    elif place=="–ñ–∏–≤–±–∞–Ω–∫":
        markup.add(InlineKeyboardButton(text="üè¶ –ñ–∏–≤–æ–ø–æ–ª–∏—Å—Å–∫–∏–π –±–∞–Ω–∫", callback_data="bank"))
    elif place=="–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç":
        markup.add(InlineKeyboardButton(text="üè´ –ñ–∏–≤–æ–ø–æ–ª–∏—Å—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", callback_data="university"))
    elif place=="–ö–æ—Ç–∞–π—Å–∫–∏–π –ú–µ–¥–∏–Ω—Å—Ç–∏—Ç—É—Ç":
        markup.add(InlineKeyboardButton(text="üè´ –ö–æ—Ç–∞–π—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –Ω–∞—É–∫", callback_data="university"))
    elif place=="–ê–≤—Ç–æ–ø–∞—Ä–∫ –∏–º. –ö–æ—Ç–∞":
        markup.add(InlineKeyboardButton(text="üöó –ê–≤—Ç–æ–ø–∞—Ä–∫ –∏–º–µ–Ω–∏ Cat Painted", callback_data="car_park"))
    elif place=="–¢–¶ –ú–∏–ì":
        markup.add(InlineKeyboardButton(text="üè¨ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä –ú–∏–ì", callback_data="mall"))
    elif place=="–ì–µ–æ—Ä–≥–∏–µ–≤—Å–∫–∞—è":
        markup.add(InlineKeyboardButton(text="üç∞ –ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è \"–°–ª–∞–¥–∫–æ–Å–∂–∫–∞\"", callback_data="candy_shop"))
    elif place=="–†–∞–π–±–æ–ª—å–Ω–∏—Ü–∞":
        markup.add(InlineKeyboardButton(text="üè• –ñ–∏–≤–æ–ø–æ–ª–∏—Å—Å–∫–∞—è —Ä–∞–π–æ–Ω–Ω–∞—è –±–æ–ª—å–Ω–∏—Ü–∞", callback_data="hospital"))
    elif place=="–°—Ç–∞—Ä–æ–∫–æ—Ç–∞–π—Å–∫–∏–π –§–ê–ü":
        markup.add(InlineKeyboardButton(text="üè• –°—Ç–∞—Ä–æ–∫–æ—Ç–∞–π—Å–∫–∏–π —Ñ–µ–ª—å–¥—à–µ—Ä—Å–∫–∏–π –ø—É–Ω–∫—Ç", callback_data="hospital"))
    elif place=="–ó–æ–æ–ø–∞—Ä–∫":
        markup.add(InlineKeyboardButton(text="ü¶ä –ñ–∏–≤–æ–ø–æ–ª–∏—Å—Å–∫–∏–π –∑–æ–æ–ø–∞—Ä–∫", callback_data="zoo"))
    elif place=="–ê—ç—Ä–æ–ø–æ—Ä—Ç –ö–æ—Ç–∞–π":
        markup.add(InlineKeyboardButton(text="‚úà –ê—ç—Ä–æ–ø–æ—Ä—Ç –ö–æ—Ç–∞–π", callback_data="airport"))
    elif place=="–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç":
        markup.add(InlineKeyboardButton(text="‚úà –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç –ñ–∏–≤–æ–ø–æ–ª–∏—Å", callback_data="airport"))
    elif place=="–ñ–∏–≤–æ–ø–æ–ª–∏—Å—Å–∫–∏–π –º—É–∑–µ–π":
        markup.add(InlineKeyboardButton(text="üèõ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º—É–∑–µ–π –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞", callback_data="museum"))
    elif place=="–ú–∞–∫–µ–µ–≤–∫–∞":
        markup.add(InlineKeyboardButton(text="üçè \"–ù–∞—Ç—É—Ä–∞–ª\". –§—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏", callback_data="fruit_shop"))
    elif place=="–†—ã–Ω–æ–∫":
        markup.add(InlineKeyboardButton(text="üè£ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫", callback_data="central_market"))
    elif place=="–ö–æ—Ç–∞–π—Å–∫–∏–π —ç–ª–µ–∫—Ç—Ä–æ–∑–∞–≤–æ–¥":
        markup.add(InlineKeyboardButton(text="üè≠ –ö–æ—Ç–∞–π—Å–∫–∏–π –∑–∞–≤–æ–¥ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π", callback_data="factory"))
    elif place=="–°—Ç–∞–¥–∏–æ–Ω":
        markup.add(InlineKeyboardButton(text="üèü –ñ–∏–≤–æ–ø–æ–ª–∏—Å-–ê—Ä–µ–Ω–∞", url="t.me/jivopolistour"))
    elif place=="–†–æ—â–∞":
        markup.add(InlineKeyboardButton(text="üåæ –§–µ—Ä–º–∞", callback_data="farm"))
    elif place=="–ì–µ–Ω–µ—Ä–∞–ª–∞ –®–µ–ª–±–∏":
        markup.add(InlineKeyboardButton(text="üì± –ú–∞–≥–∞–∑–∏–Ω —Ç–µ—Ö–Ω–∏–∫–∏ –∏–º–µ–Ω–∏ –®–µ–ª–±–∏", callback_data="phone_shop"))
    cur.execute("SELECT * FROM clandata WHERE islocation=1 AND hqplace=? AND type=?", (place, "public",))
    for row in cur:
        markup.add(InlineKeyboardButton(text="üè¢ {0}".format(row[1]), url=row[8]))
    markup.add(InlineKeyboardButton(text="üì° GPS", callback_data="gps"))
    markup.add(InlineKeyboardButton(text="üè¢ –ö–ª–∞–Ω—ã —Ä—è–¥–æ–º", callback_data="local_clans"), InlineKeyboardButton(text="üë§ –ö—Ç–æ –∑–¥–µ—Å—å?", callback_data="local_people"))
    await message.answer("<i>–í –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ –µ—Å—Ç—å –º–Ω–æ–≥–æ —á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ!\n&#127963; <b>{0}</b></i>".format(place), parse_mode = "html", reply_markup = markup)
    chid = message.chat.id

async def buycall(call: CallbackQuery):
    user_id = call.from_user.id
    item = call.data.split(':')[0][4:]
    try:
        tip = int(call.data.split(':')[1])
    except:
        tip = 0
    if item in ITEMS:
        if ITEMS[item][4][0] == 'car':
            level = cur.execute(f"SELECT level FROM userdata WHERE user_id={user_id}").fetchone()[0]
            if level<lvlcar:
                return await call.answer(text='‚ùå –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å —É—Ä–æ–≤–Ω—è {0}'.format(lvlcar), show_alert = True)
                
            #await achieve(a.id, call.message.chat.id, 'myauto')
        await buy(call, item, user_id, cost=ITEMS[item][3]+tip)
    else:
        raise ValueError("no such item")