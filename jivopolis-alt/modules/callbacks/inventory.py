import random
from math import ceil
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from ...database.sqlitedb import cur, conn
from ...config import ITEMS, limeteds
from ...database.functions import itemdata, current_time

async def itemdesc(call: CallbackQuery, user_id: int):
    item = call.data

    count = cur.execute(f"SELECT {item} FROM userdata WHERE user_id={user_id}").fetchone()[0]

    if count < 1:
        return await call.message.answer('<i>&#10060; –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞</i>', reply_markup = markup, parse_mode = 'html')
    try:
        mask = cur.execute(f"SELECT mask FROM userdata WHERE user_id={user_id}").fetchone()[0]
    except TypeError:
        mask = None

    status = ITEMS[item][4][0]

    markup = InlineKeyboardMarkup()

    if status == 'food': #todo match case
        markup.add(InlineKeyboardButton(text='üçñ –°—ä–µ—Å—Ç—å', callback_data=f'eat_{item}'))
    elif status == 'medicine':
        markup.add(InlineKeyboardButton(text='üíä –í—ã–ø–∏—Ç—å', callback_data='drink_medicine'))
    elif status == 'car':
        markup.add(InlineKeyboardButton(text='üöó –í –ø—É—Ç—å!', callback_data='cardrive'))
    elif status == 'lootbox':
        markup.add(InlineKeyboardButton(text='üì¶ –û—Ç–∫—Ä—ã—Ç—å', callback_data='open_lootbox'))
    elif status == 'rob':
        markup.add(InlineKeyboardButton(text='üè¶ –û–≥—Ä–∞–±–∏—Ç—å –±–∞–Ω–∫', callback_data='rob_bank'))
    elif status == 'mask':
        if ITEMS[item][0] == mask:
            markup.add(InlineKeyboardButton(text='‚ùé –°–Ω—è—Ç—å', callback_data='putoff'))
        else:
            markup.add(InlineKeyboardButton(text='üë∫ –ù–∞–¥–µ—Ç—å', callback_data=f'puton_{item}'))
    elif status == 'key':
        markup.add(InlineKeyboardButton(text='üîê –ß—ë—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫', callback_data='darkweb'))
    elif status == 'phone':
        markup.add(InlineKeyboardButton(text='üì± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å', callback_data='smartphone'))
    rem = ''
    if call.data in limeteds:
        cur.execute(f"SELECT {item} FROM globaldata")
        itemrem = cur.fetchone()[0]
        rem = "\n\n&#127978; –í –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–º –æ—Å—Ç–∞–ª–æ—Å—å <b>{0}</b> –µ–¥–∏–Ω–∏—Ü —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞".format(itemrem)
    return await call.message.answer('<i><b>{0} {1}</b> - {2}{3}\n\n–£ –≤–∞—Å <b>{4}</b> –µ–¥–∏–Ω–∏—Ü —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞</i>'.format(ITEMS[item][0], ITEMS[item][2], ITEMS[item][5], rem, count), reply_markup = markup, parse_mode = 'html')

async def inventory(call: CallbackQuery):
    user_id = call.from_user.id
    markup = InlineKeyboardMarkup(row_width = 6)

    itemlist = []
    item: str

    for item in ITEMS:
        if await itemdata(user_id, item) != 'emptyslot':
            itemlist.append(await itemdata(user_id, item))

    if itemlist != []:
        markup.add(*itemlist)
    else:
        markup.add(InlineKeyboardButton('üôà –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤', callback_data='no_items_in_inventory'))
    
    try:
        mask = cur.execute(f"SELECT mask FROM userdata WHERE user_id={user_id}").fetchone()[0]
        print(mask)
    except TypeError:
        mask = ''
    if not mask:
        mask = ''
        
    if mask != '':
        markup.add(InlineKeyboardButton(text='‚ùé –°–Ω—è—Ç—å –º–∞—Å–∫—É', callback_data='put_mask_off'))

    markup.add(InlineKeyboardButton(text='üè™ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω', callback_data='shop_24'))
    
    await call.message.answer('<i>–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å</i>', reply_markup = markup, parse_mode = 'html')

async def put_mask_off(call: CallbackQuery, user_id: int):
    mask = cur.execute(f"SELECT mask FROM userdata WHERE user_id={user_id}").fetchone()[0]

    if mask:
        for item in ITEMS:
            if ITEMS[item][0] == mask:
                mask = item

        cur.execute(f"UPDATE userdata SET mask = NULL WHERE user_id = {user_id}")
        conn.commit()

        cur.execute(f"UPDATE userdata SET {mask} = {mask} + 1 WHERE user_id = {user_id}")
        conn.commit()

        return call.answer('ü¶πüèº –í–∞—à–∞ –º–∞—Å–∫–∞ —Å–Ω—è—Ç–∞.', show_alert=True)
    else:
        return

async def open_lootbox(user_id: int, message: Message): #todo: NEW BOXES
    mailbox = cur.execute(f"SELECT last_box FROM userdata WHERE user_id = {user_id}").fetchone()[0]
    difference: float = current_time() - mailbox
    lootbox: int = cur.execute(f"SELECT lootbox FROM userdata WHERE user_id={user_id}").fetchone()[0]
    if difference >= 86400:
        cur.execute(f"UPDATE userdata SET last_box = {current_time()} WHERE user_id = {user_id}")
        conn.commit()
    elif lootbox > 0:
        cur.execute(f"UPDATE userdata SET lootbox = lootbox - 1 WHERE user_id = {user_id}")
        conn.commit()
    else:
        h = int(24-ceil(difference/3600))
        m = int(60-ceil(difference%3600/60))
        s = int(60-ceil(difference%3600%60))
        markup = InlineKeyboardMarkup().add(InlineKeyboardButton(text='üñá –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='reflink'))
        return await message.answer(f'<i>&#10060; –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –≤ 24 —á–∞—Å–∞. –î–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {h} —á–∞—Å–æ–≤ {m} –º–∏–Ω—É—Ç {s} —Å–µ–∫—É–Ω–¥.\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤–Ω–µ–æ—á–µ—Ä–µ–¥–Ω—ã–µ —è—â–∏–∫–∏, –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ª—É—Ç–±–æ–∫—Å, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —è—â–∏–∫ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è</i>', parse_mode='html', reply_markup=markup)
    
    situation = random.uniform(0, 1)

    if situation>=0.2:
        rand = random.randint(1,26)

        cur.execute(f"UPDATE userdata SET balance = balance + {rand} WHERE user_id = {user_id}")
        conn.commit()
        return await message.answer(f'<i><b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ <b>${rand}</b></i>', parse_mode = 'html')
    else:
        return await message.answer('<i>–í —è—â–∏–∫–µ –≤—ã –Ω–∞—à–ª–∏ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—É—é –≥–∞–∑–µ—Ç—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–ø–µ—Ä—å –Ω–µ —Å—Ç–æ–∏—Ç –Ω–∏ –≥—Ä–æ—à–∞</i>', parse_mode = 'html')