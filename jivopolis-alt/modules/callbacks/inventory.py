import contextlib
import time
from ...misc import (
    Item, ITEMS,
    lootbox_open, LOOTBOX,
    get_time_units, current_time,
    RESOURCES
)
from ...misc.config import limited_items
from ..start import StartCommand
from ...database import cur
from ...database.functions import itemdata, achieve

from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    Message,
)


async def itemdesc(call: CallbackQuery, user_id: int):
    '''
    Callback for item info

    :param call - callback:
    :param user_id:
    '''
    try:
        item: Item = ITEMS[call.data]
    except KeyError:
        return await call.answer('–≠—Ço—Ç item –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

    count = cur.select(call.data, "userdata").where(user_id=user_id).one()

    if count < 1:
        return await call.message.answer(
            '<i>üö´ –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞</i>',
        )

    mask = cur.select("mask", "userdata").where(user_id=user_id).one()

    markup = InlineKeyboardMarkup()

    match (item.type):
        case 'food':
            markup.add(
                InlineKeyboardButton(
                    text='üçñ –°—ä–µ—Å—Ç—å',
                    callback_data=f'eat_{call.data}'
                )
            )
        case 'medicine':
            markup.add(
                InlineKeyboardButton(
                    text='üíä –í—ã–ø–∏—Ç—å',
                    callback_data='drink_medicine'
                )
            )
        case 'car':
            markup.add(
                InlineKeyboardButton(
                    text='üöó –í –ø—É—Ç—å!',
                    callback_data='car_menu'
                )
            )
        case 'lootbox':
            markup.add(
                InlineKeyboardButton(
                    text='üì¶ –û—Ç–∫—Ä—ã—Ç—å',
                    callback_data='open_lootbox'
                )
            )
        case 'rob':
            markup.add(
                InlineKeyboardButton(
                    text='üè¶ –û–≥—Ä–∞–±–∏—Ç—å –±–∞–Ω–∫',
                    callback_data='rob_bank'
                )
            )
        case 'mask':
            if item.emoji == mask:
                markup.add(
                    InlineKeyboardButton(
                        text='‚ùé –°–Ω—è—Ç—å',
                        callback_data='put_mask_off'
                    )
                )
            else:
                markup.add(
                    InlineKeyboardButton(
                        text='üë∫ –ù–∞–¥–µ—Ç—å',
                        callback_data=f'put_mask_on_{call.data}'
                    )
                )
        case 'key':
            markup.add(
                InlineKeyboardButton(
                    text='üîê –ß—ë—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫',
                    callback_data='darkweb'
                )
            )
        case 'phone':
            markup.add(
                InlineKeyboardButton(
                    text='üì± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å',
                    callback_data='cellphone_menu'
                )
            )
        case 'radio':
            markup.add(
                InlineKeyboardButton(
                    text='üìª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å',
                    callback_data='radio_menu'
                )
            )

    description = item.description or (
                '„Ä∞ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø—Ä–∏—ë–º–Ω—É—é,'
                ' –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞.'
            )

    if call.data in limited_items:
        itemsleft = cur.select(call.data, "globaldata").one()

        if itemsleft > 0:
            itemsleft = (
                f"\n\nüè™ –í –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–º –æ—Å—Ç–∞–ª–æ—Å—å <b>{itemsleft}</b> "
                "–µ–¥–∏–Ω–∏—Ü —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"
            )
        else:
            itemsleft = "\n\nüö´üè™ –í –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–º –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"

    else:
        itemsleft = ''

    return await call.message.answer(
        f'<i><b>{item.emoji} {item.ru_name}</b> - {description}{itemsleft}\n'
        f'\n–£ –≤–∞—Å <b>{count}</b> –µ–¥–∏–Ω–∏—Ü —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞</i>',
        reply_markup=markup
    )


async def inventory(call: CallbackQuery) -> None:
    '''
    Callback for inventory

    :param call - callback:
    '''
    user_id = call.from_user.id
    markup = InlineKeyboardMarkup(row_width=6)

    itemlist = []
    item: str

    for item in ITEMS:
        if (
            await itemdata(user_id, item) != 'emptyslot'
            and await itemdata(user_id, item) is not None
        ):
            itemlist.append(await itemdata(user_id, item))

    if itemlist != []:
        markup.add(*itemlist)
    else:
        markup.add(
            InlineKeyboardButton(
                'üôà –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤',
                callback_data='no_items_in_inventory'
            )
        )

    if (
        cur.select("mask", "userdata").where(
            user_id=user_id
        ).one()
        not in ["", None]
    ):
        markup.add(
            InlineKeyboardButton(
                text='‚ùé –°–Ω—è—Ç—å –º–∞—Å–∫—É',
                callback_data='put_mask_off'
            )
        )

    markup.add(
        InlineKeyboardButton(
            text='‚õ∞ –ü–æ–ª–µ–∑–Ω—ã–µ –∏—Å–∫–æ–ø–∞–µ–º—ã–µ',
            callback_data='resources'
        )
    )

    markup.add(
        InlineKeyboardButton(
            text='üè™ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω',
            callback_data='shop_24'
        )
    )

    await call.message.answer('<i>–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å</i>', reply_markup=markup)


async def resources(call: CallbackQuery) -> None:
    '''
    Callback for mineral data

    :param call - callback:
    '''
    user_id = call.from_user.id
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
    )

    text = '<b>‚õè –í–∞—à–∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∏—Å–∫–æ–ø–∞–º—ã–µ</b>\n\n'
    for resourceitem in RESOURCES:
        resource = RESOURCES[resourceitem]
        amount = cur.select(resource.name, "userdata").where(
            user_id=user_id).one()
        name = resource.ru_name
        text += f'{name} - <b>{amount}</b> —à—Ç.\n'
    text += '\n–ü–æ–ª–µ–∑–Ω—ã–µ –∏—Å–∫–æ–ø–∞–µ–º—ã–µ –º–æ–∂–Ω–æ –¥–æ–±—ã–≤–∞—Ç—å –≤ —à–∞—Ö—Ç–µ –≤ –ø–æ—Å—ë–ª–∫–µ –ì–æ—Ä' +\
            '–Ω—ã–π. –î–ª—è —ç—Ç–æ–≥–æ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –∫–∏—Ä–∫–∏ –≤ –ê–≥–∑–∞–º–æ–≥–æ—Ä—Å–∫–µ' +\
            ' (–ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—Å–∫–∞–ø—ã–≤–∞–Ω–∏–∏ –∑–∞–±–∏—Ä–∞–µ—Ç—Å—è –æ–¥–Ω–∞ –∫–∏—Ä–∫–∞). ' +\
            '–ó–∞—Ç–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –≤—ã–∫–æ–ø–∞–Ω–Ω—ã–µ –∏—Å–∫–æ–ø–∞–µ–º—ã–µ –≤ –ì–ª–∏–Ω—è–Ω–∫–µ'

    await call.message.answer(
        f'<i>{text}</i>', reply_markup=markup
    )


async def lootbox_button(user_id: int, message: Message) -> None:
    '''
    Callback for lootbox button

    :param user_id:
    :param message:
    '''
    mailbox = cur.select("last_box", "userdata").where(user_id=user_id).one()
    difference: float = current_time() - mailbox
    lootbox: int = cur.select("lootbox", "userdata").where(
        user_id=user_id).one()

    if difference >= 86400:
        cur.update("userdata").set(last_box=time.time()).where(
            user_id=user_id).commit()
    elif lootbox > 0:
        cur.update("userdata").add(lootbox=-1).where(
            user_id=user_id).commit()
    else:
        hours, minutes, seconds = get_time_units(difference)

        markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                text='üñá –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                callback_data='reflink'
            )
        )

        await message.answer(
            (
                "<i>&#10060; –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –≤ 24 "
                f"—á–∞—Å–∞. –î–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {hours} —á–∞—Å–æ–≤ {minutes}"
                f"  –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥.\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤–Ω–µ–æ—á–µ—Ä–µ–¥–Ω—ã–µ —è—â–∏–∫–∏,"  # noqa
                " –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω"
                "–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ª—É—Ç–±–æ–∫—Å, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂"
                "–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —è—â–∏–∫ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è</i>"
            ),
            reply_markup=markup
        )
        return

    price, price_type = await lootbox_open()

    if isinstance(price, str):
        item = ITEMS[price]
        cur.update("userdata").add(**{item.name: 1}).where(
            user_id=user_id).commit()

        await message.answer(
            LOOTBOX[price_type].format(f"{item.emoji} {item.ru_name}")
        )
        return
    elif price_type == "money_steal":
        cur.update("userdata").add(balance=-price).where(
            user_id=user_id).commit()
    elif callable(price):
        return await price(message.chat.id)
    elif isinstance(price, int):
        cur.update("userdata").add(balance=price).where(
            user_id=user_id).commit()

    await message.answer(LOOTBOX[price_type].format(price))

    start = StartCommand()
    text = await start._private_start(user_id, True)
    assert text is not None

    with contextlib.suppress(Exception):
        await message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(row_width=2).add(
                *start._start_buttons(user_id)
            )
        )


async def sellitem(call: CallbackQuery, item: str) -> None:
    '''
    Callback for selling item on central market

    :param call - callback:
    :param user_id:
    '''
    user_id = call.from_user.id

    if item not in ITEMS:
        raise ValueError("no such item")

    coef = 1.5  # todo cur.execute('SELECT coef FROM globaldata').fetchone()[0]
    item_count = cur.select(item, "userdata").where(user_id=user_id).one()

    if item_count < 1:
        return await call.answer(
            '‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ–¥–∏–Ω–∏—Ü —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞',
            show_alert=True
        )

    cost = ITEMS[item].cost
    assert cost is not None
    cost = cost // coef

    cur.update("userdata").add(**{item: -1}).where(user_id=user_id).commit()
    cur.update("userdata").add(balance=cost).where(user_id=user_id).commit()

    balance = cur.select("balance", "userdata").where(user_id=user_id).one()

    await call.answer(
        f'–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance}',
        show_alert=True
    )

    await achieve(user_id, call.message.chat.id, "sell_achieve")


async def sellresource(call: CallbackQuery, resource: str) -> None:
    '''
    Callback for selling a mineral in Glinyanka

    :param call - callback:
    :param user_id:
    '''
    user_id = call.from_user.id

    if resource not in RESOURCES:
        raise ValueError("no such resource")

    res_count = cur.select(resource, "userdata").where(user_id=user_id).one()

    if res_count < 1:
        return await call.answer(
            '‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ–¥–∏–Ω–∏—Ü —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞',
            show_alert=True
        )

    cost = RESOURCES[resource].cost
    assert cost is not None

    cur.update("userdata").add(**{resource: -1}).where(
        user_id=user_id).commit()
    cur.update("userdata").add(balance=cost).where(user_id=user_id).commit()

    balance = cur.select("balance", "userdata").where(user_id=user_id).one()

    await call.answer(
        f'–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance}',
        show_alert=True
    )
