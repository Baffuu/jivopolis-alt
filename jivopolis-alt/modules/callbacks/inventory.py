import random

from math import ceil
from ...misc import (
    Item, allitems, 
    lootbox_open, LOOTBOX, 
    get_time_units, current_time
)
from ...misc.config import limeteds, ITEMS

from ...database.sqlitedb import cur, conn
from ...database.functions import itemdata

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message

async def itemdesc(call: CallbackQuery, user_id: int) -> None:
    '''
    Callback for item info 
    
    :param call - callback:
    :param user_id:
    '''
    try:
        item: Item = allitems[call.data]
    except KeyError:
        return await call.answer('–≠—Çot predmet –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    count = cur.execute(f"SELECT {call.data} FROM userdata WHERE user_id={user_id}").fetchone()[0]

    if count < 1:
        return await call.message.answer('<i>üö´ –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞</i>', reply_markup = markup, parse_mode = 'html')
    
    try:
        mask = cur.execute(f"SELECT mask FROM userdata WHERE user_id={user_id}").fetchone()[0]
    except TypeError:
        mask = None

    markup = InlineKeyboardMarkup()

    match (item.type):
        case 'food': 
            markup.add(InlineKeyboardButton(text='üçñ –°—ä–µ—Å—Ç—å', callback_data=f'eat_{call.data}'))
        case 'medicine':
            markup.add(InlineKeyboardButton(text='üíä –í—ã–ø–∏—Ç—å', callback_data='drink_medicine'))
        case 'car':
            markup.add(InlineKeyboardButton(text='üöó –í –ø—É—Ç—å!', callback_data='cardrive'))
        case 'lootbox':
            markup.add(InlineKeyboardButton(text='üì¶ –û—Ç–∫—Ä—ã—Ç—å', callback_data='open_lootbox'))
        case 'rob':
            markup.add(InlineKeyboardButton(text='üè¶ –û–≥—Ä–∞–±–∏—Ç—å –±–∞–Ω–∫', callback_data='rob_bank'))
        case 'mask':
            if item.emoji == mask:
                markup.add(InlineKeyboardButton(text='‚ùé –°–Ω—è—Ç—å', callback_data='put_mask_off'))
            else:
                markup.add(InlineKeyboardButton(text='üë∫ –ù–∞–¥–µ—Ç—å', callback_data=f'put_mask_on_{call.data}'))
        case 'key':
            markup.add(InlineKeyboardButton(text='üîê –ß—ë—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫', callback_data='darkweb'))
        case 'phone':
            markup.add(InlineKeyboardButton(text='üì± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å', callback_data='cellphone_menu'))

    description = item.description
    
    if not description: 
        description = '„Ä∞ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø—Ä–∏—ë–º–Ω—É—é, –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞.'
    
    if call.data in limeteds:
        itemsleft = cur.execute(f"SELECT {item} FROM globaldata").fetchone()[0]
        
        if itemsleft > 0:
            itemsleft = f"\n\nüè™ –í –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–º –æ—Å—Ç–∞–ª–æ—Å—å <b>{itemsleft}</b> –µ–¥–∏–Ω–∏—Ü —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"
        else:
            itemsleft = "\n\nüö´üè™ –í –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–º –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"

    else:
        itemsleft = ''
    
    return await call.message.answer(f'<i><b>{item.emoji} {item.ru_name}</b> - {description}{itemsleft}\n\n–£ –≤–∞—Å <b>{count}</b> –µ–¥–∏–Ω–∏—Ü —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞</i>', reply_markup = markup, parse_mode = 'html')


async def inventory(call: CallbackQuery) -> None:
    '''
    Callback for inventory
    
    :param call - callback:
    '''
    user_id = call.from_user.id
    markup = InlineKeyboardMarkup(row_width = 6)

    itemlist = []
    item: str

    for item in ITEMS:
        if await itemdata(user_id, item) != 'emptyslot':
            itemlist.append(await itemdata(user_id, item))

    if itemlist != []:
        markup.add(*itemlist)
    else:
        markup.add(InlineKeyboardButton('üôà –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤', callback_data='no_items_in_inventory'))
    
    try:
        mask = cur.execute(f"SELECT mask FROM userdata WHERE user_id={user_id}").fetchone()[0]
        print(mask)
    except TypeError:
        mask = ''
    if not mask:
        mask = ''
        
    if mask != '':
        markup.add(InlineKeyboardButton(text='‚ùé –°–Ω—è—Ç—å –º–∞—Å–∫—É', callback_data='put_mask_off'))

    markup.add(InlineKeyboardButton(text='üè™ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω', callback_data='shop_24'))
    
    await call.message.answer('<i>–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å</i>', reply_markup = markup, parse_mode = 'html')


async def lootbox_button(user_id: int, message: Message) -> None:
    '''
    Callback for lootbox button
    
    :param call - callback:
    :param user_id:
    '''
    mailbox = cur.execute(f"SELECT last_box FROM userdata WHERE user_id = {user_id}").fetchone()[0]
    difference: float = current_time() - mailbox
    lootbox: int = cur.execute(f"SELECT lootbox FROM userdata WHERE user_id={user_id}").fetchone()[0]
    
    if difference >= 86400:
        cur.execute(f"UPDATE userdata SET last_box = {current_time()} WHERE user_id = {user_id}")
        conn.commit()
    elif lootbox > 0:
        cur.execute(f"UPDATE userdata SET lootbox = lootbox - 1 WHERE user_id = {user_id}")
        conn.commit()
    else:
        hours, minutes, seconds = get_time_units(difference)
        
        markup = InlineKeyboardMarkup().\
            add(InlineKeyboardButton(text='üñá –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='reflink'))
        
        return await message.answer(
            f'<i>&#10060; –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –≤ 24 —á–∞—Å–∞. –î–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥.\
            \n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤–Ω–µ–æ—á–µ—Ä–µ–¥–Ω—ã–µ —è—â–∏–∫–∏, –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ª—É—Ç–±–æ–∫—Å,\
            —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —è—â–∏–∫ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è</i>', 
            parse_mode='html', 
            reply_markup=markup
        )

    price, price_type = await lootbox_open()

    if isinstance(price, str):
        item = allitems[price]
        cur.execute(f"UPDATE userdata SET {item.name}={item.name}+1 WHERE user_id={user_id}")
        conn.commit()

        return await message.reply(LOOTBOX[price_type].format(f"{item.emoji} {item.ru_name}"))
    return await message.reply(LOOTBOX[price_type].format(price))


async def sellitem(call: CallbackQuery, item: str) -> None:
    '''
    Callback for selling item on central market
    
    :param call - callback:
    :param user_id:
    '''
    user_id = call.from_user.id

    if item not in ITEMS:
        raise ValueError("no such item")

    markup = InlineKeyboardMarkup(row_width = 3)

    coef = 1.5 #todo cur.execute('SELECT coef FROM globaldata').fetchone()[0]
    item_count = cur.execute(f"SELECT {item} FROM userdata WHERE user_id={user_id}").fetchone()[0]
    
    if item_count < 1:
        return await call.answer('‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ–¥–∏–Ω–∏—Ü —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞', show_alert = True)
        
    cost = ITEMS[item][3]//coef
    
    cur.execute(f"UPDATE userdata SET {item}={item}-1 WHERE user_id={user_id}"); conn.commit()
    cur.execute(f"UPDATE userdata SET balance=balance+{cost} WHERE user_id={user_id}"); conn.commit()
    
    balance = cur.execute(f"SELECT balance FROM userdata WHERE user_id={user_id}").fetchone()[0]
    await call.answer(f'–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance}', show_alert = True)
    
    '''cur.execute('UPDATE userdata SET sold=sold+1 WHERE user_id=?', (a,))
    conn.commit()
    cursor.execute("SELECT sold FROM userdata WHERE user_id=?", (a,))
    sold = cursor.fetchone()[0]
    if sold>=10:
        await achieve(a, call.message.chat.id, 'soldach')'''

