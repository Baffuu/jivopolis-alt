import contextlib
from ... import bot, tglog
import asyncio
import random

from ...misc import get_embedded_link, get_time_units
from ...misc.config import addon_prices, addon_descriptions, filter_names
from ...misc.constants import MINIMUM_PUBLIC_CLAN_LEVEL
from ...database import cur, insert_clan
from ...database.functions import (
    buybutton, current_time, prison_sentence, weather_damage
)
from ..start import StartCommand
from ...clanbuildings import CLAN_BUILDINGS

from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from aiogram.utils.exceptions import BadRequest


async def create_clan(call: CallbackQuery) -> None:
    '''
    Callback for clan creating.

    :param call - callback:
    '''
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    member = await bot.get_chat_member(chat_id, user_id)

    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count >= 1:
        return await call.answer(
            'üö• –¢–∞–∫–æ–π –∫–ª–∞–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–Ω–∞—á–∞–ª–∞'
            ' —Ä–∞—Å–ø—É—Å—Ç–∏—Ç–µ —Å—Ç–∞—Ä—ã–π',
            show_alert=True
        )
    try:
        link = await insert_clan(call.message.chat, call.from_user)
    except BadRequest as e:
        if str(e) == 'Not enough rights to manage chat invite link':
            return await call.message.edit_text(
                f"<i>{call.message.text}\n\n>>>üö® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–∞–π—Ç–µ "
                "–±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</i>"
            )
        else:
            raise

    await tglog(
            message=(
                f"<b>üèò {await get_embedded_link(user_id)}</b>"
                f" —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π –∫–ª–∞–Ω: <b><a href='{link}'>"
                f"{call.message.chat.title}</a></b>. <code>[{chat_id}]</code>"
            ),
            tag='#new_clan'
    )
    await bot.send_message(
        chat_id,
        text=(
            f"<i>üèò <b>{await get_embedded_link(user_id)}</b> —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π –∫–ª–∞–Ω"
            ". –°–∫–æ—Ä–µ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å!</i>"
        ),
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton('‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', callback_data='join_clan')
        )
    )

    await StartCommand()._clan_start(call.message.chat)


async def joinclan(call: CallbackQuery, user_id: int) -> None:
    '''
    Callback for clan joining

    :param call - callback:
    :param user_id:
    '''
    chat_id = call.message.chat.id

    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    user_clan = cur.select("clan_id", "userdata").where(user_id=user_id).one()

    if not user_clan or user_clan != chat_id:
        cur.update("userdata").set(clan_id=chat_id).where(
            user_id=user_id).commit()
        await bot.send_message(
            chat_id,
            f'<i><b>{await get_embedded_link(user_id)}</b> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ '
            '–∫–ª–∞–Ω—É</i>'
        )

        if user_clan:
            with contextlib.suppress(Exception):
                await bot.send_message(
                    user_clan,
                    f"<i><b>{await get_embedded_link(user_id)}</b> –≤—ã—à–µ–ª –∏–∑"
                    " –∫–ª–∞–Ω–∞</i>"
                )
    else:
        cur.update("userdata").set(
            clan_id=None).where(user_id=user_id).commit()
        await bot.send_message(
            chat_id,
            f"<i><b>{await get_embedded_link(user_id)}</b> –≤—ã—à–µ–ª –∏–∑ –∫–ª–∞–Ω–∞</i>"
        )


async def leaveclan(call: CallbackQuery) -> None:
    """
    Callback for leave clan

    :param call - callback:
    """
    user_id = call.from_user.id
    user_clan = cur.select("clan_id", "userdata").where(user_id=user_id).one()

    if not user_clan or user_clan != call.message.chat.id:
        return await call.answer(
            "ü§• –ù–æ —Ç—ã –≤–µ–¥—å –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ —ç—Ç–æ–º –∫–ª–∞–Ω–µ‚Ä¶ –ù–µ–ª—å–∑—è –≤—ã–π—Ç–∏, –µ—Å–ª–∏ —Ç—ã –Ω–µ "
            "–∑–∞—Ö–æ–¥–∏–ª, –¥–æ—Ä–æ–≥–æ–π!",
            show_alert=True
        )

    cur.update("userdata").set(clan_id=None).where(
        user_id=user_id).commit()

    await call.message.answer(
        f"<i><b>{await get_embedded_link(user_id)}</b> –≤—ã—à–µ–ª –∏–∑ –∫–ª–∞–Ω–∞</i>")


async def clan_members(call: CallbackQuery) -> None:
    """
    Callback for clan members list

    :param call - callback:
    """
    clan_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=clan_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    text = ''
    clan_owner = cur.select("owner_id", "clandata").where(
        clan_id=clan_id).one()
    clan_members = cur.select("user_id", "userdata").where(
        clan_id=clan_id).fetch()

    if clan_owner:
        text += (
            f'üëë –°–æ–∑–¥–∞—Ç–µ–ª—å –∫–ª–∞–Ω–∞:\n{await get_embedded_link(clan_owner)}\n\n'
        )
    if len(clan_members) > 0:
        text += 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞:'
        for member_id in clan_members:
            text += f'\n{await get_embedded_link(member_id[0])}'

    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text='‚óÄ –°–∫—Ä—ã—Ç—å',
            callback_data='cancel_action'
        )
    )
    await call.message.answer(f'<i><b>{text}</b></i>', reply_markup=markup)


async def call_clan(call: CallbackQuery):
    """
    Callback to call all clan members

    :param call - callback:
    """
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –°–æ–∑—ã–≤–∞—Ç—å –∫–ª–∞–Ω –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    clan_members = cur.select("user_id", "userdata").where(
        clan_id=chat_id).fetch()
    clan_name = cur.select("clan_name", "clandata").where(
        clan_id=chat_id).one()
    link = cur.select("link", "clandata").where(
        clan_id=chat_id).one()

    sent_successfully = 0
    errors = 0
    user_not_exists = 0
    blocked_bot = 0
    for member_id in clan_members:
        try:
            await bot.send_message(
                chat_id=member_id[0],
                text=f'<i>üì£ –í–∞—Å —Å–æ–∑—ã–≤–∞–µ—Ç –∫–ª–∞–Ω <b><a href="{link}">'
                     f'{clan_name}</a></b></i>'
            )
            sent_successfully += 1
        except Exception as e:
            match (str(e)):
                case (
                    "Chat not found" |
                    "Forbidden: user is deactivated" |
                    "Forbidden: bot can't send messages to bots"
                ):
                    user_not_exists += 1
                case 'Forbidden: bot was blocked by the user':
                    blocked_bot += 1
                case _:
                    errors += 1

    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text='‚úî –ì–æ—Ç–æ–≤–æ',
            callback_data='cancel_action'
        )
    )

    await call.message.answer(
        '<i><b>üì£ –°–æ–∑—ã–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω</b>\n\n'
        f'‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–≤–∞–Ω–æ: <b>{sent_successfully}</b>\n'
        'üöÆ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ Telegram: '
        f'<b>{user_not_exists}</b>\n‚úã –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –ñ–∏–≤–æ–ø–æ–ª–∏—Å: '
        f'<b>{blocked_bot}</b>\n‚ùå –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: <b>{errors}</b></i>',
        reply_markup=markup
    )


async def clan_top(call: CallbackQuery):
    """
    Callback for 10 clans with the greatest balance

    :param call - callback:
    """

    clans = cur.execute(
        "SELECT * FROM clandata WHERE clan_type=\"public\" AND "
        "clan_balance<1000000 ORDER BY -clan_balance LIMIT 20"
    )

    clan_text = ''.join(
        f'{clan_number}. \n<a href="{clan[8]}">{clan[2]}</a> - ${clan[4]}\n'
        for clan_number, clan in enumerate(clans, start=1)
    )
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text='‚óÄ –°–∫—Ä—ã—Ç—å',
            callback_data='cancel_action'
        )
    )

    await call.message.answer(
        f'<i><b>üèÜ –¢–æ–ø –∫–ª–∞–Ω–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É\n\n{clan_text}</b></i>',
        reply_markup=markup
    )


async def clan_settings(call: CallbackQuery):
    """
    Callback for clan settings

    :param call - callback:
    """
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    clan_type = cur.select("clan_type", "clandata").where(
        clan_id=chat_id).one()
    clan_type_ru = '–ß–∞—Å—Ç–Ω—ã–π' if clan_type == 'private' else '–ü—É–±–ª–∏—á–Ω—ã–π'
    clan_hq = cur.select("HQ_place", "clandata").where(
        clan_id=chat_id).one()
    user_place = cur.select("current_place", "userdata").where(
        user_id=call.from_user.id).one()

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text=f'üîê –¢–∏–ø –∫–ª–∞–Ω–∞: {clan_type_ru}',
            callback_data='toggle_clan_type'
        ),
        InlineKeyboardButton(
            text='‚úè –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∞–Ω–∞',
            callback_data='clan_profile'
        ),
        InlineKeyboardButton(
            text=f'üè¨ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –®–ö: {user_place}',
            callback_data='clan_hq'
        ) if clan_hq == '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' else InlineKeyboardButton(
            text='üè¨‚ùå –°–Ω–µ—Å—Ç–∏ —à—Ç–∞–±-–∫–≤–∞—Ä—Ç–∏—Ä—É',
            callback_data='clan_hq'
        )
    )
    if clan_hq != '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ':
        markup.add(
            InlineKeyboardButton(
                text='üèõ –ö–ª–∞–Ω-–ª–æ–∫–∞—Ü–∏—è',
                callback_data='addon_location'
            )
        )
    markup.add(
        InlineKeyboardButton(
            text='üõ† –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–ª–∞–Ω–∞',
            callback_data='clan_features'
        ),
        InlineKeyboardButton(
            text='üóë –†–∞—Å–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞–Ω',
            callback_data='delete_clan'
        ),
        InlineKeyboardButton(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
    )

    await call.message.answer(
        '<i>‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞–Ω–∞</i>',
        reply_markup=markup
    )


async def clan_profile(call: CallbackQuery):
    """
    Callback for clan profile settings

    :param call - callback:
    """
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='‚úè –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞',
            callback_data='set_clan_name'
        ),
        InlineKeyboardButton(
            text='üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞–Ω–∞',
            callback_data='set_clan_bio'
        ),
        InlineKeyboardButton(
            text='üìé –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–ª–∞–Ω',
            callback_data='set_clan_link'
        ),
        InlineKeyboardButton(
            text='üñº –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –∫–ª–∞–Ω–∞',
            callback_data='set_clan_photo'
        ),
        InlineKeyboardButton(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
    )

    await call.message.answer(
        '<i>‚úè –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∞–Ω–∞</i>',
        reply_markup=markup
    )


async def delete_clan(call: CallbackQuery):
    """
    Callback for a clan deleting menu

    :param call - callback:
    """
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    owner = cur.select("owner_id", "clandata").where(clan_id=chat_id).one()
    if owner != user_id:
        return await call.answer(
            'üëÄ –†–∞—Å–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞–Ω –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å',
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
            callback_data='delete_clan_confirm'
        ),
        InlineKeyboardButton(
            text='‚ùå –û—Ç–º–µ–Ω–∞',
            callback_data='cancel_action'
        )
    )

    await call.message.answer(
        '<i>üò® –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∞—à –∫–ª–∞–Ω –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ –µ–≥–æ '
        '–¥–µ–Ω—å–≥–∞–º–∏, –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏ –∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∞–º–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ '
        '–æ—Ç–º–µ–Ω–∏—Ç—å</i>',
        reply_markup=markup
    )


async def delete_clan_confirm(call: CallbackQuery):
    """
    Callback for clan removal

    :param call - callback:
    """
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    owner = cur.select("owner_id", "clandata").where(clan_id=chat_id).one()
    if owner != user_id:
        return await call.answer(
            'üëÄ –†–∞—Å–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞–Ω –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å',
            show_alert=True
        )

    name = cur.select("clan_name", "clandata").where(clan_id=chat_id).one()
    cur.execute(
        "DELETE FROM clandata WHERE clan_id=?", (chat_id,)
    ).commit()

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='üò™ –•–æ—Ä–æ—à–æ',
            callback_data='cancel_action'
        ),
        InlineKeyboardButton(
            text='‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞–Ω',
            callback_data='create_clan'
        )
    )
    await call.message.answer(
        '<i>üò• –í–æ—Ç –∏ –≤—Å—ë... –í–∞—à –∫–ª–∞–Ω –∫–∞–Ω—É–ª –≤ –õ–µ—Ç—É. –í–µ—Ä–Ω—É—Ç—å –µ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ</i>',
        reply_markup=markup
    )

    await tglog(
            message=(
                f"üò™ <b>{await get_embedded_link(user_id)}</b>"
                f" —Ä–∞—Å–ø—É—Å—Ç–∏–ª –∫–ª–∞–Ω <b>{name}</b>. <code>[{chat_id}]</code>"
            ),
            tag='#delete_clan'
    )


async def toggle_clan_type(call: CallbackQuery):
    """
    Callback for a clan type changing setting

    :param call - callback:
    """
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    clan_type = cur.select("clan_type", "clandata").where(
        clan_id=chat_id).one()
    new_clan_type = 'public' if clan_type == 'private' else 'private'
    new_clan_type_ru = '–ü—É–±–ª–∏—á–Ω—ã–π' if new_clan_type == 'public' else '–ß–∞—Å—Ç–Ω—ã–π'

    if new_clan_type == 'public':
        owner = cur.select("owner_id", "clandata").where(clan_id=chat_id).one()
        level = cur.select("level", "userdata").where(
            user_id=owner).one()

        if level < MINIMUM_PUBLIC_CLAN_LEVEL:
            return await call.answer(
                'üö´ –£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–ª–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ '
                f'{MINIMUM_PUBLIC_CLAN_LEVEL}, —á—Ç–æ–±—ã –∫–ª–∞–Ω —Å—Ç–∞–ª –ø—É–±–ª–∏—á–Ω—ã–º',
                show_alert=True
            )

    if call.message.chat.username is None:
        chat_data = await bot.get_chat(chat_id)
        username = chat_data.invite_link
    else:
        username = f't.me/{call.message.chat.username}'
    if not username:
        return await call.answer(
            'üö® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
            show_alert=True
        )

    cur.update("clandata").set(clan_type=new_clan_type).where(
        clan_id=chat_id).commit()
    cur.update("clandata").set(link=username).where(clan_id=chat_id).commit()

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='‚úÖ –ì–æ—Ç–æ–≤–æ',
            callback_data='cancel_action'
        )
    )
    await call.message.answer(
        f'<i>ü•≥ –¢–∏–ø –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>{new_clan_type_ru}</b></i>',
        reply_markup=markup
    )


async def clan_hq(call: CallbackQuery):
    """
    Callback for building or demolition of clan headquarters

    :param call - callback:
    """
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    clan_hq = cur.select("HQ_place", "clandata").where(
        clan_id=chat_id).one()
    user_place = cur.select("current_place", "userdata").where(
        user_id=call.from_user.id).one()

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='‚úÖ –ì–æ—Ç–æ–≤–æ',
            callback_data='cancel_action'
        )
    )

    if clan_hq == '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ':
        address = cur.select("MAX(address)+1", "clandata").where(
            HQ_place=user_place).one()
        address = address or 1
        cur.update("clandata").set(HQ_place=user_place).where(
            clan_id=chat_id).commit()
        cur.update("clandata").set(address=address).where(
            clan_id=chat_id).commit()
        await call.message.answer(
            f'<i>ü•≥ –®—Ç–∞–±-–∫–≤–∞—Ä—Ç–∏—Ä–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É <b>{user_place}, '
            f'{address}</b></i>',
            reply_markup=markup
        )
    else:
        cur.update("clandata").set(HQ_place='–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ').where(
            clan_id=chat_id).commit()
        cur.update("clandata").set(address=0).where(
            clan_id=chat_id).commit()
        await call.message.answer(
            '<i>üò™ –®—Ç–∞–±-–∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞ —Å–Ω–µ—Å–µ–Ω–∞</i>',
            reply_markup=markup
        )

    await weather_damage(call.from_user.id,
                         call.message.chat.id)


async def set_clan_name(call: CallbackQuery) -> None:
    '''
    Callback for clan name setting

    :param call - callback:
    '''
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    cur.update("userdata").set(process="set_clan_name").where(
        user_id=call.from_user.id).commit()

    await call.message.answer(
        "<i>‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞</i>",
        reply_markup=InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton(
                text="üîÑ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                callback_data="delete_clan_name"
            ),
            InlineKeyboardButton(
                text="üö´ –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_process"
            )
        )
    )


async def delete_clan_name(call: CallbackQuery) -> None:
    '''
    Callback for clan name resetting

    :param call - callback:
    '''
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    cur.update("userdata").set(process="").where(
        user_id=call.from_user.id).commit()
    cur.update("clandata").set(clan_name=call.message.chat.title).where(
        clan_id=chat_id).commit()

    await call.message.answer(
        "<i>üëå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ</i>",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                text="‚úÖ –ì–æ—Ç–æ–≤–æ",
                callback_data="cancel_action"
            )
        )
    )


async def set_clan_link(call: CallbackQuery) -> None:
    '''
    Callback for clan link setting

    :param call - callback:
    '''
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    cur.update("userdata").set(process="set_clan_link").where(
        user_id=call.from_user.id).commit()

    await call.message.answer(
        "<i>üìé –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–ª–∞–Ω.\n\n<b>‚Äº –í–Ω–∏–º–∞–Ω–∏–µ! </b>"
        "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª–∞–Ω –º–æ–∂–µ—Ç –≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π "
        "Telegram-—á–∞—Ç, –±–æ—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –ñ–∏–≤–æ–ø–æ–ª–∏—Å–æ–º, "
        "–ª–∏–±–æ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –ø—Ä–∏ –µ–≥–æ —Å–æ–≥–ª–∞—Å–∏–∏ (–µ—Å–ª–∏ "
        "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä—è–º–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫–ª–∞–Ω—É).\n\n"
        "–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞ –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ –Ω–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π "
        "—Ä–µ—Å—É—Ä—Å, –≤–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å –∏–ª–∏ —Ä–µ—Å—É—Ä—Å, –Ω–µ –∏–º–µ—é—â–∏–π –ø—Ä—è–º–æ–≥–æ "
        "–æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –ñ–∏–≤–æ–ø–æ–ª–∏—Å—É, –º—ã –º–æ–∂–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –∏–ª–∏ –≤–∞—à "
        "–∫–ª–∞–Ω. –ú—ã –≤–∞—Å –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª–∏</i>",
        reply_markup=InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton(
                text="üîÑ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                callback_data="delete_clan_link"
            ),
            InlineKeyboardButton(
                text="üö´ –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_process"
            )
        )
    )


async def delete_clan_link(call: CallbackQuery) -> None:
    '''
    Callback for custom clan link resetting

    :param call - callback:
    '''
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    cur.update("userdata").set(process="").where(
        user_id=call.from_user.id).commit()

    if call.message.chat.username is None:
        getchat = await bot.get_chat(chat_id)
        new_chat_link = getchat.invite_link
        if not new_chat_link:
            return await call.answer(
                "üö® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ "
                "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                show_alert=True
            )
    else:
        new_chat_link = f't.me/{call.message.chat.username}'
    cur.update("clandata").set(link=new_chat_link).where(
        clan_id=chat_id).commit()

    await call.message.answer(
        "<i>üëå –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞</i>",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                text="‚úÖ –ì–æ—Ç–æ–≤–æ",
                callback_data="cancel_action"
            )
        )
    )


async def set_clan_bio(call: CallbackQuery) -> None:
    '''
    Callback for clan bio setting

    :param call - callback:
    '''
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    cur.update("userdata").set(process="set_clan_bio").where(
        user_id=call.from_user.id).commit()

    await call.message.answer(
        "<i>üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞–Ω–∞</i>",
        reply_markup=InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞–Ω–∞",
                callback_data="delete_clan_bio"
            ),
            InlineKeyboardButton(
                text="üö´ –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_process"
            )
        )
    )


async def delete_clan_bio(call: CallbackQuery) -> None:
    '''
    Callback for clan bio deleting

    :param call - callback:
    '''
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    cur.update("userdata").set(process="").where(
        user_id=call.from_user.id).commit()
    cur.update("clandata").set(description="").where(
        clan_id=chat_id).commit()

    await call.message.answer(
        "<i>üëå –û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ</i>",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                text="‚úÖ –ì–æ—Ç–æ–≤–æ",
                callback_data="cancel_action"
            )
        )
    )


async def set_clan_photo(call: CallbackQuery) -> None:
    '''
    Callback for clan profile picture setting

    :param call - callback:
    '''
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    cur.update("userdata").set(process="set_clan_photo").where(
        user_id=call.from_user.id).commit()

    await call.message.answer(
        "<i>üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∫–ª–∞–Ω–∞ (–≤ —Å–∂–∞—Ç–æ–º –≤–∏–¥–µ) "
        "–∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ</i>",
        reply_markup=InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –∫–ª–∞–Ω–∞",
                callback_data="delete_clan_photo"
            ),
            InlineKeyboardButton(
                text="üö´ –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_process"
            )
        )
    )


async def delete_clan_photo(call: CallbackQuery) -> None:
    '''
    Callback for clan profile picture deleting

    :param call - callback:
    '''
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    cur.update("userdata").set(process="").where(
        user_id=call.from_user.id).commit()
    cur.update("clandata").set(photo_id="").where(
        clan_id=chat_id).commit()

    await call.message.answer(
        "<i>üëå –ê–≤–∞—Ç–∞—Ä–∫–∞ –∫–ª–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞</i>",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                text="‚úÖ –ì–æ—Ç–æ–≤–æ",
                callback_data="cancel_action"
            )
        )
    )


async def confirm_clan_profile_setting(message: Message, setting: str) -> None:
    '''
    Callback for changing a clan profile setting

    :param message - message:
    :param setting - the setting to be changed:
    '''
    chat_id = message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    failure_markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text='üò™ –•–æ—Ä–æ—à–æ',
            callback_data='cancel_action'
        )
    )

    if count < 1:
        return await message.reply(
            "<i>üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</i>",
            reply_markup=failure_markup
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, message.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await message.reply(
            '<i>üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞</i>',
            reply_markup=failure_markup
        )

    cur.update("clandata").set(**{setting: message.text}).where(
        clan_id=chat_id).commit()

    await message.answer(
        "<i>ü•≥ –î–∞–Ω–Ω—ã–µ –∫–ª–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã</i>",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                text="‚úÖ –ì–æ—Ç–æ–≤–æ",
                callback_data="cancel_action"
            )
        )
    )


async def confirm_clan_photo(message: Message) -> None:
    '''
    Callback for changing clan profile picture

    :param message - message:
    '''
    chat_id = message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    failure_markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text='üò™ –•–æ—Ä–æ—à–æ',
            callback_data='cancel_action'
        )
    )

    if count < 1:
        return await message.reply(
            "<i>üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</i>",
            reply_markup=failure_markup
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, message.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await message.reply(
            '<i>üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞</i>',
            reply_markup=failure_markup
        )

    if len(message.photo) == 0:
        new_photo = message.text
    else:
        new_photo = message.photo[0].file_id

    try:
        await message.answer_photo(
            new_photo,
            "<i>ü•≥ –§–æ—Ç–æ –∫–ª–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ</i>",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton(
                    text="‚úÖ –ì–æ—Ç–æ–≤–æ",
                    callback_data="cancel_action"
                )
            )
        )
        cur.update("clandata").set(photo_id=new_photo).where(
            clan_id=chat_id).commit()
    except Exception:
        await message.answer(
            'üò® <i>–í–∏–¥–∏–º–æ, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ñ–æ—Ç–æ –∏ –Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ</i>',
            reply_markup=failure_markup.add(
                InlineKeyboardButton(
                    text='üîÑ –ó–∞–Ω–æ–≤–æ',
                    callback_data='set_clan_photo'
                )
            )
        )


async def buy_clan_addon(call: CallbackQuery, addon: str) -> None:
    '''
    Callback for buying a clan addon

    :param call - callback:
    :param addon - addon symbolic name:
    '''
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    if (
        cur.select(f"addon_{addon}", "clandata")
        .where(clan_id=chat_id)
        .one()
    ):
        return await call.answer(
            'ü§® –í –∫–ª–∞–Ω–µ —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –∑–∞—á–µ–º –≤–∞–º –µ—â—ë –æ–¥–Ω–æ?',
            show_alert=True
        )

    balance = cur.select("balance", "userdata").where(
        user_id=call.from_user.id).one()
    if balance < addon_prices[addon]:
        return await call.answer(
            'üò™ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥',
            show_alert=True
        )

    cur.update("userdata").add(balance=-addon_prices[addon]).where(
        user_id=call.from_user.id).commit()
    cur.update("clandata").set(**{f'addon_{addon}': 1}).where(
        clan_id=chat_id).commit()

    await call.message.answer(
        "<i>üëå –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ</i>",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                text="‚úÖ –ì–æ—Ç–æ–≤–æ",
                callback_data="cancel_action"
            )
        )
    )


async def sell_clan_addon(call: CallbackQuery, addon: str) -> None:
    '''
    Callback for unbuying a clan addon

    :param call - callback:
    :param addon - addon symbolic name:
    '''
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    addon_amount = cur.select(f"addon_{addon}", "clandata").where(
        clan_id=chat_id).one()
    if not addon_amount:
        return await call.answer(
            'ü§® –í –∫–ª–∞–Ω–µ –Ω–µ—Ç —ç—Ç–æ–≥–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è, —á—Ç–æ –≤—ã —Å–æ–±—Ä–∞–ª–∏—Å—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å?',
            show_alert=True
        )

    cur.update("userdata").add(balance=addon_prices[addon]).where(
        user_id=call.from_user.id).commit()
    cur.update("clandata").set(**{f'addon_{addon}': 0}).where(
        clan_id=chat_id).commit()

    await call.message.answer(
        "<i>üëå –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω–æ</i>",
        reply_markup=InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton(
                text="‚úÖ –ì–æ—Ç–æ–≤–æ",
                callback_data="cancel_action"
            )
        )
    )


async def clan_addon_menu(call: CallbackQuery, addon: str):
    '''
    Callback for a clan addon menu

    :param call - callback:
    :param addon - addon symbolic name:
    '''
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    addon_amount = cur.select(f"addon_{addon}", "clandata").where(
        clan_id=chat_id).one()

    cost = addon_prices[addon]
    description = addon_descriptions[addon]

    markup = InlineKeyboardMarkup(row_width=1)
    if addon == "gameclub" and addon_amount:
        timeout = cur.select("game_timeout", "clandata").where(
            clan_id=chat_id).one()
        markup.add(
            InlineKeyboardButton(
                text=f"‚è± –ö—É–ª–¥–∞—É–Ω: {timeout} —Å",
                callback_data="set_gameclub_timeout"
            )
        )

    await call.message.answer(
        f"<i>{description}.\n\nüí∏ –í–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç–æ–∏—Ç <b>${cost}"
        "</b>. –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–∫—É–ø–∫–∏ —ç—Ç–∞ —Å—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ç–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É,"
        " –∫—Ç–æ –µ—ë –æ—Ç–º–µ–Ω–∏–ª</i>",
        reply_markup=markup.add(
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É",
                callback_data=f"selladdon_{addon}"
            ) if addon_amount else InlineKeyboardButton(
                            text=f"‚úÖ –ö—É–ø–∏—Ç—å (${cost})",
                            callback_data=f"buyaddon_{addon}"
                        ),
            InlineKeyboardButton(
                text="‚óÄ –ù–∞–∑–∞–¥",
                callback_data="cancel_action"
            )
        )
    )


async def clan_features(call: CallbackQuery):
    """
    Callback for clan features menu

    :param call - callback:
    """
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='üìõ –§–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π',
            callback_data='clan_filter'
        ),
        InlineKeyboardButton(
            text='üé∞ –ú–∏–Ω–∏-–∫–∞–∑–∏–Ω–æ',
            callback_data='addon_gameclub'
        ),
        InlineKeyboardButton(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
    )

    await call.message.answer(
        '<i>üõ† –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–ª–∞–Ω–∞</i>',
        reply_markup=markup
    )


async def set_gameclub_timeout(call: CallbackQuery):
    """
    Callback for game club timeout menu

    :param call - callback:
    """
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    amount = cur.select("addon_gameclub", "clandata").where(
        clan_id=chat_id).one()
    if not amount:
        return await call.answer(
            'ü§î –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ "–ú–∏–Ω–∏-–∫–∞–∑–∏–Ω–æ"',
            show_alert=True
        )

    timeout = cur.select("game_timeout", "clandata").where(
        clan_id=chat_id).one()
    markup = InlineKeyboardMarkup(row_width=5)
    optionlist = [
        InlineKeyboardButton(
            text=f"{option} —Å", callback_data=f"set_timeout_{option}"
        )
        for option in ["5", "10", "15", "20", "30", "45", "60", "90", "300"]
    ]
    markup.add(*optionlist)
    markup.add(
        InlineKeyboardButton(
            text="‚óÄ –ù–∞–∑–∞–¥",
            callback_data="cancel_action"
        )
    )

    await call.message.answer(
        '<i>‚è± –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –º–µ–∂–¥—É –∫—Ä—É—Ç–∫–∞–º–∏'
        f' –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n–¢–µ–∫—É—â–∏–π –∫—É–ª–¥–∞—É–Ω: <b>{timeout} —Å</b></i>',
        reply_markup=markup
    )


async def confirm_timeout(call: CallbackQuery, timeout: int):
    """
    Callback for game club timeout setting

    :param call - callback:
    """
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    amount = cur.select("addon_gameclub", "clandata").where(
        clan_id=chat_id).one()
    if not amount:
        return await call.answer(
            'ü§î –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ "–ú–∏–Ω–∏-–∫–∞–∑–∏–Ω–æ"',
            show_alert=True
        )

    cur.update("clandata").set(game_timeout=timeout).where(
        clan_id=call.message.chat.id).commit()
    await clan_addon_menu(call, addon="gameclub")


async def clan_filter(call: CallbackQuery):
    """
    Callback for clan filter feature menu

    :param call - callback:
    """
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=1)
    for filter in filter_names:
        filter_state = cur.select(f"filter_{filter}", "clandata").where(
            clan_id=chat_id).one()
        filter_state_ru = "–í–∫–ª—é—á–µ–Ω–æ" if filter_state else "–í—ã–∫–ª—é—á–µ–Ω–æ"
        markup.add(
            InlineKeyboardButton(
                f'{filter_names[filter]}: {filter_state_ru}',
                callback_data=f'toggle_filter_{filter}'
            )
        )

    markup.add(
        InlineKeyboardButton(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
    )

    await call.message.answer(
        '<i>üìõ <b>–§–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π</b> —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞. '
        '–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –æ–Ω –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å.\n\n<b>–û–±—Ä–∞—Ç–∏—Ç–µ '
        '–≤–Ω–∏–º–∞–Ω–∏–µ!\n1.</b> –§–∏–ª—å—Ç—Ä —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–∂–µ –∞–¥–º–∏–Ω–æ–≤ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è '
        '–≥—Ä—É–ø–ø—ã.\n<b>2.</b> –ï—Å–ª–∏ —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ–Ω '
        '–ø—Ä–æ—Å—Ç–æ –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è</i>',
        reply_markup=markup
    )


async def toggle_filter(call: CallbackQuery, filter: str):
    """
    Callback for toggling a filter

    :param call - callback:
    :param filter - filter name:
    """
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    filter_enabled = cur.select(f"filter_{filter}", "clandata").where(
        clan_id=chat_id).one()

    cur.update("clandata").set(**{f"filter_{filter}": abs(
        filter_enabled-1)}).where(clan_id=chat_id).commit()

    await call.message.delete()
    await clan_filter(call)


async def clan_buildings(call: CallbackQuery):
    """
    Callback for clan buildings menu

    :param call - callback:
    """
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    markup = InlineKeyboardMarkup(row_width=1)
    for building in CLAN_BUILDINGS:
        amount = cur.select(f"build_{building}", "clandata").where(
            clan_id=chat_id).one()
        if amount > 0:
            build = CLAN_BUILDINGS[building]
            markup.add(
                InlineKeyboardButton(
                    text=build.ru_name,
                    callback_data=f'building_{building}'
                )
            )

    markup.add(
        InlineKeyboardButton(
            text='üèó –ú–∞–≥–∞–∑–∏–Ω –ø–æ—Å—Ç—Ä–æ–µ–∫',
            callback_data='clan_building_shop'
        ),
        InlineKeyboardButton(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
    )

    await call.message.answer(
        '<i>üèô –ü–æ—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞–Ω–∞</i>',
        reply_markup=markup
    )


async def clan_building_shop(call: CallbackQuery):
    """
    Callback for clan buildings shop

    :param call - callback:
    """
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=1)
    for building in CLAN_BUILDINGS:
        build = CLAN_BUILDINGS[building]
        markup.add(
            InlineKeyboardButton(
                text=build.ru_name,
                callback_data=f'building_{building}'
            )
        )

    markup.add(
        InlineKeyboardButton(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
    )

    await call.message.answer(
        '<i>üèó –ú–∞–≥–∞–∑–∏–Ω –ø–æ—Å—Ç—Ä–æ–µ–∫ –∫–ª–∞–Ω–∞</i>',
        reply_markup=markup
    )


async def clan_building_menu(call: CallbackQuery, building: str):
    '''
    Callback for a clan building menu

    :param call - callback:
    :param addon - addon symbolic name:
    '''
    chat_id = call.message.chat.id
    build = CLAN_BUILDINGS[building]
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
        and CLAN_BUILDINGS[building].admins_only
    ):
        return await call.answer(
            'üëÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –ø–æ—Å—Ç—Ä–æ–π–∫–æ–π –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    amount = cur.select(f"build_{building}", "clandata").where(
        clan_id=chat_id).one()

    cost = build.price
    description = build.description
    name = build.ru_name

    markup = InlineKeyboardMarkup(row_width=1)
    text = (
        f"<b>{name}</b> - {description}.\n\nüí∏ –ü–æ–∫—É–ø–∫–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ–∏—Ç "
        f"<b>${cost}</b>. –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–∫—É–ø–∫–∏ —ç—Ç–∞ —Å—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ç–æ–º—É"
        " –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –∫—Ç–æ –µ—ë –æ—Ç–º–µ–Ω–∏–ª"
    )
    if build.max_level and amount:
        text += (
            f".\n\n–≠—Ç—É –ø–æ—Å—Ç—Ä–æ–π–∫—É –º–æ–∂–Ω–æ —É–ª—É—á—à–∞—Ç—å –≤–ø–ª–æ—Ç—å –¥–æ <b>{build.max_level}"
            "</b> —É—Ä–æ–≤–Ω—è. –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∞–ø–≥—Ä–µ–π–¥–∞ –Ω–∞ <b>$"
            f"{build.upgrade_markup}</b> –±–æ–ª—å—à–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.\n\n"
            "‚ùó –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –µ—ë –Ω–∞—á–∞–ª—å–Ω–∞—è"
            " —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–µ–∑ —É—á—ë—Ç–∞ —É–ª—É—á—à–µ–Ω–∏–π.\n\n–£—Ä–æ–≤–µ–Ω—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ - "
            f"<b>{amount}</b>"
        )

    if amount:
        markup.add(
            InlineKeyboardButton(
                text="‚ñ∂ –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è",
                callback_data=f"use_building_{building}"
            )
        )
        if build.max_level and amount <= build.max_level:
            cost = build.price + amount*build.upgrade_markup
            markup.add(
                InlineKeyboardButton(
                    text=f"‚Üó –£–ª—É—á—à–∏—Ç—å (${cost})",
                    callback_data=f"upgrade_building_{building}"
                )
            )
        markup.add(
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É",
                callback_data=f"sellbuilding_{building}"
            )
        )
    else:
        markup.add(
            InlineKeyboardButton(
                text=f"üèó –ü–æ—Å—Ç—Ä–æ–∏—Ç—å (${build.price})",
                callback_data=f"buybuilding_{building}"
            )
        )

    await call.message.answer(
        f"<i>{text}</i>",
        reply_markup=markup.add(
            InlineKeyboardButton(
                text="‚óÄ –ù–∞–∑–∞–¥",
                callback_data="cancel_action"
            )
        )
    )


async def buy_clan_building(call: CallbackQuery, building: str) -> None:
    '''
    Callback for buying a clan building

    :param call - callback:
    :param building - building symbolic name:
    '''
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    if (
        cur.select(f"build_{building}", "clandata")
        .where(clan_id=chat_id)
        .one()
    ):
        return await call.answer(
            'ü§® –í –∫–ª–∞–Ω–µ —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∞, –∑–∞—á–µ–º –≤–∞–º –µ—â—ë –æ–¥–Ω–∞?',
            show_alert=True
        )

    price = CLAN_BUILDINGS[building].price

    balance = cur.select("balance", "userdata").where(
        user_id=call.from_user.id).one()
    if balance < price:
        return await call.answer(
            'üò™ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥',
            show_alert=True
        )

    cur.update("userdata").add(balance=-price).where(
        user_id=call.from_user.id).commit()
    cur.update("clandata").set(**{f'build_{building}': 1}).where(
        clan_id=chat_id).commit()

    await call.message.answer(
        "<i>üëå –ü–æ—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞</i>",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                text="‚úÖ –ì–æ—Ç–æ–≤–æ",
                callback_data="cancel_action"
            )
        )
    )


async def sell_clan_building(call: CallbackQuery, building: str) -> None:
    '''
    Callback for unbuying a clan building

    :param call - callback:
    :param building - building symbolic name:
    '''
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    amount = cur.select(f"build_{building}", "clandata").where(
        clan_id=chat_id).one()
    if not amount:
        return await call.answer(
            'ü§® –í –∫–ª–∞–Ω–µ —É–∂–µ –Ω–µ—Ç —ç—Ç–æ–π –ø–æ—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ –≤—ã —Å–æ–±—Ä–∞–ª–∏—Å—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å?',
            show_alert=True
        )

    price = CLAN_BUILDINGS[building].price

    cur.update("userdata").add(balance=price).where(
        user_id=call.from_user.id).commit()
    cur.update("clandata").set(**{f'build_{building}': 0}).where(
        clan_id=chat_id).commit()

    await call.message.answer(
        "<i>üëå –ü–æ—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω–∞</i>",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                text="‚úÖ –ì–æ—Ç–æ–≤–æ",
                callback_data="cancel_action"
            )
        )
    )


async def upgrade_clan_building(call: CallbackQuery, building: str) -> None:
    '''
    Callback for upgrading a clan building

    :param call - callback:
    :param building - building symbolic name:
    '''
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    amount = cur.select(f"build_{building}", "clandata").where(
        clan_id=chat_id).one()
    if not amount:
        return await call.answer(
            'ü§® –í –∫–ª–∞–Ω–µ –Ω–µ—Ç —ç—Ç–æ–π –ø–æ—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ –≤—ã —Å–æ–±—Ä–∞–ª–∏—Å—å —É–ª—É—á—à–∞—Ç—å?',
            show_alert=True
        )
    if amount >= CLAN_BUILDINGS[building].max_level:
        return await call.answer(
            'üò™ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ —É–∂–µ —É–ª—É—á—à–µ–Ω–∞ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è',
            show_alert=True
        )

    price = CLAN_BUILDINGS[building].price +\
        CLAN_BUILDINGS[building].upgrade_markup*amount

    balance = cur.select("balance", "userdata").where(
        user_id=call.from_user.id).one()
    if balance < price:
        return await call.answer(
            'üò™ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥',
            show_alert=True
        )

    cur.update("userdata").add(balance=-price).where(
        user_id=call.from_user.id).commit()
    cur.update("clandata").add(**{f'build_{building}': 1}).where(
        clan_id=chat_id).commit()

    await call.message.answer(
        f"<i>üëå –ü–æ—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω–∞ –¥–æ —É—Ä–æ–≤–Ω—è <b>{amount+1}</b></i>",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                text="‚úÖ –ì–æ—Ç–æ–≤–æ",
                callback_data="cancel_action"
            )
        )
    )


async def use_clan_building(call: CallbackQuery, building: str) -> None:
    '''
    Callback for using a clan building

    :param call - callback:
    :param building - building symbolic name:
    '''
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()
    build = CLAN_BUILDINGS[building]

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
        and build.admins_only
    ):
        return await call.answer(
            'üëÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –ø–æ—Å—Ç—Ä–æ–π–∫–æ–π –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    amount = cur.select(f"build_{building}", "clandata").where(
        clan_id=chat_id).one()
    if not amount:
        return await call.answer(
            'ü§® –í –∫–ª–∞–Ω–µ –Ω–µ—Ç —ç—Ç–æ–π –ø–æ—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ –≤—ã —Å–æ–±—Ä–∞–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?',
            show_alert=True
        )

    text = f"<b>{build.ru_name}</b> - {build.description}"
    if build.max_level:
        text += f".\n\n–£—Ä–æ–≤–µ–Ω—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ - <b>{amount}</b>"

    markup = InlineKeyboardMarkup(row_width=1)
    if build.shop is not None:
        for item in build.shop:
            markup.add(
                buybutton(item, status='clan')
            )

    match(building):
        case "farm":
            clan_cows = cur.select("cows", "clandata").where(
                clan_id=chat_id).one()
            user_cows = cur.select("cow", "userdata").where(
                user_id=call.from_user.id).one()
            text += (
                ".\n\nüêÑ –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞ –º–æ–≥–ª–∏ –¥–æ–∏—Ç—å –∫–æ—Ä–æ–≤, –≤ –∫–ª–∞–Ω–µ "
                f"–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω–∞ –∫–æ—Ä–æ–≤–∞. –£ –≤–∞—Å <b>{user_cows}"
                f"</b> –∫–æ—Ä–æ–≤, –≤ –∫–ª–∞–Ω–µ <b>{clan_cows}</b> –∫–æ—Ä–æ–≤.\n\n–ö–∞–∂–¥—ã–π "
                "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–æ—Ä–æ–≤—É –≤ –¥–µ–Ω—å (–∏ —Ç–æ–ª—å–∫–æ"
                " –≤ —Ç–æ–º –∫–ª–∞–Ω–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω —Å–æ—Å—Ç–æ–∏—Ç). –ü—Ä–∏ –∫–∞–∂–¥–æ–π –¥–æ–π–∫–µ –∏–∑ "
                "–∫–ª–∞–Ω–∞ –∑–∞–±–∏—Ä–∞–µ—Ç—Å—è –æ–¥–Ω–∞ –∫–æ—Ä–æ–≤–∞"
            )
            markup.add(
                InlineKeyboardButton(
                    text='üêÑ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –∫–æ—Ä–æ–≤—É –≤ –∫–ª–∞–Ω',
                    callback_data='donate_cow'
                ),
                InlineKeyboardButton(
                    text='ü•õ –ü–æ–¥–æ–∏—Ç—å –∫–æ—Ä–æ–≤—É',
                    callback_data='milk_cow_clan'
                )
            )
        case "mail":
            text += (
                ".\n\nüì¶ –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç —Ä–∞–∑–¥–∞—Ç—å "
                "–ª—É—Ç–±–æ–∫—Å—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–ª–∞–Ω–∞. –ö–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –≤—ã–¥–∞—ë—Ç—Å—è "
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É—Ç–±–æ–∫—Å–æ–≤, —Ä–∞–≤–Ω–æ–µ —É—Ä–æ–≤–Ω—é –ø–æ—Å—Ç—Ä–æ–π–∫–∏"
            )
            markup.add(
                InlineKeyboardButton(
                    text='üì¶ –†–∞–∑–¥–∞—Ç—å –ª—É—Ç–±–æ–∫—Å—ã',
                    callback_data='give_lootboxes'
                )
            )

    await call.message.answer(
        f"<i>{text}</i>",
        reply_markup=markup.add(
            InlineKeyboardButton(
                text="‚óÄ –ù–∞–∑–∞–¥",
                callback_data="cancel_action"
            )
        )
    )


async def donate_cow(call: CallbackQuery) -> None:
    '''
    Callback for donating a cow to clan

    :param call - callback:
    '''
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    user_cow = cur.select("cow", "userdata").where(
        user_id=user_id).one()
    if user_cow < 1:
        return await call.answer(
            "üò£ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ä–æ–≤. –ö—É–ø–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤ –∑–æ–æ–ø–∞—Ä–∫–µ",
            show_alert=True
        )

    cur.update("userdata").add(cow=-1).where(user_id=user_id).commit()
    cur.update("clandata").add(cows=1).where(clan_id=chat_id).commit()
    clan_cow = cur.select("cows", "clandata").where(
        clan_id=chat_id).one()

    await call.answer(
        f"ü•≥ –í—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª–∏ –∫–æ—Ä–æ–≤—É –≤ –∫–ª–∞–Ω. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_cow-1}"
        f" –∫–æ—Ä–æ–≤, –∑–∞—Ç–æ –≤ –∫–ª–∞–Ω–µ –∏—Ö {clan_cow}",
        show_alert=True
    )


async def milk_cow_clan(call: CallbackQuery) -> None:
    '''
    Callback for donating a cow in a clan

    :param call - callback:
    '''
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    has_building = cur.select("build_farm", "clandata").where(
        clan_id=chat_id).one()
    if not has_building:
        return await call.answer(
            "üò£ –í –∫–ª–∞–Ω–µ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–π–∫–∏ \"–§–µ—Ä–º–∞\"",
            show_alert=True
        )

    last_milk = cur.select("last_milk", "userdata").where(
        user_id=user_id).one()
    if current_time()-last_milk < 86400:
        hours, minutes, seconds = get_time_units(current_time()-last_milk)
        return await call.answer(
            "ü•± –í—ã —É–∂–µ –¥–æ–∏–ª–∏ –∫–æ—Ä–æ–≤—É —Å–µ–≥–æ–¥–Ω—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ "
            f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥",
            show_alert=True
        )

    clan_id = cur.select("clan_id", "userdata").where(
        user_id=user_id).one()
    if clan_id != chat_id:
        return await call.answer(
            "üò® –î–æ–∏—Ç—å –∫–æ—Ä–æ–≤—É –≤ –∫–ª–∞–Ω–µ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞",
            show_alert=True
        )

    clan_cow = cur.select("cows", "clandata").where(
        clan_id=chat_id).one()
    if clan_cow < 1:
        return await call.answer(
            "üò£ –í –∫–ª–∞–Ω–µ –Ω–µ—Ç –∫–æ—Ä–æ–≤",
            show_alert=True
        )

    await call.answer(
        "ü•õ –î–æ–π–∫–∞ –∫–æ—Ä–æ–≤—ã –Ω–∞—á–∞–ª–∞—Å—å... –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥",
        show_alert=True
    )
    cur.update("userdata").set(last_milk=current_time()).where(
        user_id=user_id).commit()
    await asyncio.sleep(10)
    cur.update("userdata").add(milk=1).where(user_id=user_id).commit()
    cur.update("clandata").add(cows=-1).where(clan_id=chat_id).commit()

    await call.message.answer(
        f"<i>üêÑ –£—á–∞—Å—Ç–Ω–∏–∫ –∫–ª–∞–Ω–∞ <b>{await get_embedded_link(user_id)}</b> "
        "–ø–æ–¥–æ–∏–ª –∫–æ—Ä–æ–≤—É</i>"
    )


async def give_lootboxes(call: CallbackQuery) -> None:
    '''
    Callback for sending lootboxes to clan members

    :param call - callback:
    '''
    chat_id = call.message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()

    if count < 1:
        return await call.answer(
            "üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            show_alert=True
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    amount = cur.select("build_mail", "clandata").where(
        clan_id=chat_id).one()
    if not amount:
        return await call.answer(
            "üò£ –í –∫–ª–∞–Ω–µ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–π–∫–∏ \"–ü–æ—á—Ç–æ–≤–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ\"",
            show_alert=True
        )

    member = await bot.get_chat_member(chat_id, call.from_user.id)
    if (
        not member.is_chat_admin()
        and not member.is_chat_creator()
    ):
        return await call.answer(
            'üëÄ –†–∞–∑–¥–∞–≤–∞—Ç—å –ª—É—Ç–±–æ–∫—Å—ã –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞',
            show_alert=True
        )

    remaining = 604800-current_time()+cur.select(
        "last_lootbox", "clandata").where(clan_id=chat_id).one()
    if remaining >= 0:
        days = int(remaining // 86400)
        without_days = remaining-days*86400
        hours, minutes, seconds = get_time_units(86400-without_days)
        return await call.answer(
            f"ü•± –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª—É—Ç–±–æ–∫—Å—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {days}"
            f" –¥–Ω–µ–π {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥",
            show_alert=True
        )

    cur.update("clandata").set(last_lootbox=current_time()).where(
        clan_id=chat_id).commit()

    clan_members = cur.select("user_id", "userdata").where(
        clan_id=chat_id).fetch()
    clan_name = cur.select("clan_name", "clandata").where(
        clan_id=chat_id).one()
    link = cur.select("link", "clandata").where(
        clan_id=chat_id).one()

    sent_successfully = 0
    errors = 0
    user_not_exists = 0
    blocked_bot = 0
    match(str(amount)[-1]):
        case "1":
            lootbox_case = "–ª—É—Ç–±–æ–∫—Å"
        case "2" | "3" | "4":
            lootbox_case = "–ª—É—Ç–±–æ–∫—Å–∞"
        case _:
            lootbox_case = "–ª—É—Ç–±–æ–∫—Å–æ–≤"
    if len(str(amount)) > 1 and str(amount)[-2] == "1":
        lootbox_case = "–ª—É—Ç–±–æ–∫—Å–æ–≤"

    for member_id in clan_members:
        cur.update("userdata").add(lootbox=amount).where(
            user_id=member_id[0]).commit()
        try:
            await bot.send_message(
                chat_id=member_id[0],
                text=f'<i>üì¶ –í–∞–º {amount} {lootbox_case} –æ—Ç <b>'
                     f'<a href="{link}">{clan_name}</a></b></i>'
            )
            sent_successfully += 1
        except Exception as e:
            match (str(e)):
                case (
                    "Chat not found" |
                    "Forbidden: user is deactivated" |
                    "Forbidden: bot can't send messages to bots"
                ):
                    user_not_exists += 1
                case 'Forbidden: bot was blocked by the user':
                    blocked_bot += 1
                case _:
                    errors += 1

    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text='‚úî –ì–æ—Ç–æ–≤–æ',
            callback_data='cancel_action'
        )
    )

    await call.message.answer(
        '<i><b>üì¶ –†–∞–∑–¥–∞—á–∞ –ª—É—Ç–±–æ–∫—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n'
        f'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{sent_successfully}</b>\n'
        'üöÆ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ Telegram: '
        f'<b>{user_not_exists}</b>\n‚úã –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –ñ–∏–≤–æ–ø–æ–ª–∏—Å: '
        f'<b>{blocked_bot}</b>\n‚ùå –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: <b>{errors}</b></i>',
        reply_markup=markup
    )


async def rob_clan(message: Message):
    '''
    Callback for clan robbing

    :param message - user's message:
    '''
    chat_id = message.chat.id
    count = cur.select("count(*)", "clandata").where(clan_id=chat_id).one()
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text='ü•± –•–æ—Ä–æ—à–æ',
            callback_data='cancel_action'
        )
    )

    if count < 1:
        return await message.reply(
            "üòì <i>–ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</i>",
            reply_markup=markup
        )
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    balance = cur.select("clan_balance", "clandata").where(
        clan_id=chat_id).one()
    if balance > 100000:
        return await message.reply(
            "üëÄ <i>–ù–µ–ª—å–∑—è –≤–∑–ª–∞–º—ã–≤–∞—Ç—å –∫–ª–∞–Ω—ã, –±–∞–ª–∞–Ω—Å –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ $100k</i>",
            reply_markup=markup
        )

    if random.randint(1, 10) < 10:
        return await prison_sentence(
            message, term=10, reason="–ø–æ–ø—ã—Ç–∫—É –æ–±–≤–æ—Ä–æ–≤–∞—Ç—å –∫–ª–∞–Ω",
            caption="–í–∏–¥–∏–º–æ, –∫–æ–º—É-—Ç–æ –ø—Ä–∏–¥—ë—Ç—Å—è –ø–æ—É—á–∏—Ç—å—Å—è –≤–∑–ª–∞–º—ã–≤–∞—Ç—å..."
        )
    if balance < 45:
        return await message.reply(
            "üò£ <i>–í –∫–ª–∞–Ω–µ –ø–æ—á—Ç–∏ –Ω–µ—Ç –¥–µ–Ω–µ–≥ :(</i>",
            reply_markup=markup
        )
    rob_sum = random.randint(1, 45)
    cur.update("clandata").add(clan_balance=-rob_sum).where(
        clan_id=chat_id).commit()
    cur.update("userdata").add(balance=rob_sum).where(
        user_id=message.from_user.id).commit()

    await message.answer(
        f"<i>üòé –ö—Ä—É—Ç–æ–π <b>{await get_embedded_link(message.from_user.id)}"
        f"</b> –≤–∑–ª–æ–º–∞–ª –∫–ª–∞–Ω –∏ –∑–∞–±—Ä–∞–ª <b>${rob_sum}</b></i>"
    )
