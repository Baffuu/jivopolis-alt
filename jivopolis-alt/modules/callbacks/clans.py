from ... import bot
from ...misc import OfficialChats

from ...misc import get_mask, get_link, get_embedded_link
from ...database.sqlitedb import cur, conn, insert_clan

from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.exceptions import BadRequest

async def create_clan(call: CallbackQuery) -> None:
    '''
    Callback for clan creating. 
    
    :param call - callback:
    '''
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    member = await bot.get_chat_member(chat_id, user_id)

    if (
        not member.is_chat_admin() 
        and not member.is_chat_creator()
    ):
        return await bot.send_message(chat_id, 'üëÄ <i>–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞</i>')

    count = cur.execute(f"SELECT count(*) FROM clandata WHERE clan_id = {chat_id}").fetchone()[0]

    if count >= 1:
        return await bot.send_message(chat_id, '<i>üö• –¢–∞–∫–æ–π –∫–ª–∞–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π.</i>')
    try:
        link = await insert_clan(call.message.chat, call.from_user)
    except BadRequest as e:
        if str(e) == 'Not enough rights to manage chat invite link':
            await call.message.edit_text(f"{call.message.text}\n\n>>>üö® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–∞–π—Ç–µ –±–æ—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞.", parse_mode='html')
        else:
            raise

    mask = get_mask(user_id)
    nick = cur.execute(f"SELECT nickname FROM userdata WHERE user_id={user_id}").fetchone()[0]
    await bot.send_message(
        OfficialChats.LOGCHAT, 
        text=(
            f"üèò #new_clan | {await get_embedded_link(user_id)}"
            f" —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π –∫–ª–∞–Ω: <a href='{link}'>{call.message.chat.title}</a>. <code>[{chat_id}]</code>"
        )
    )
    return await bot.send_message(
        chat_id, 
        text = (
            f"<i>üèò <a href='{await get_embedded_link(user_id)}</a> —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π –∫–ª–∞–Ω. –°–∫–æ—Ä–µ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å!</i>"
            "\n<code>ü™ù –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞–Ω–∞ –Ω–∞–ø–∏—à–∏—Ç–µ</code> /start"
        ), 
        reply_markup=InlineKeyboardMarkup().\
            add(InlineKeyboardButton('‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', callback_data='join_clan'))
    )


async def joinclan(call: CallbackQuery, user_id: int) -> None:
    '''
    Callback for clan joining
    
    :param call - callback:
    :param user_id:
    '''
    chat_id = call.message.chat.id

    count = cur.execute(f"SELECT count(*) FROM clandata WHERE clan_id = {chat_id}").fetchone()[0]

    if count < 1:
        return call.answer("üòì –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", show_alert=True)
    elif count > 1:
        raise ValueError("found more than one clan with such ID")

    mask = get_mask(user_id)
    nick = cur.execute(f"SELECT nickname FROM userdata WHERE user_id = {user_id}").fetchone()[0]
    user_clan = cur.execute(f"SELECT clan_id FROM userdata WHERE user_id={user_id}").fetchone()[0]

    if user_clan != chat_id and user_clan:
        cur.execute(f"UPDATE userdata SET clan_id={chat_id} WHERE user_id={user_id}"); conn.commit()
        return await bot.send_message(
            chat_id, 
        f'<i><b><a href="{await get_embedded_link(user_id)}</a></b> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–ª–∞–Ω—É</i>')
    else:
        cur.execute(f"UPDATE userdata SET clan_id=NULL WHERE user_id={user_id}")
        conn.commit()
        await bot.send_message(chat_id, f"<i><b>{await get_embedded_link(user_id)}</b> –≤—ã—à–µ–ª –∏–∑ –∫–ª–∞–Ω–∞</i>")
            