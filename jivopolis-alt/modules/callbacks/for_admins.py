from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from ...database.functions import cur, conn
from ...config import ITEMS, TESTCHAT, JIVADMCHAT, LOGCHATLINK, BAFFUADM, MEGACHATLINK
from ... import bot
import os, sys

async def adminpanel(call: CallbackQuery, user_id: int):
    rank = cur.execute(f"SELECT rank FROM userdata WHERE user_id={user_id}").fetchone()[0]

    if rank < 2:
        return await call.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞", show_alert = True)
        
    markup = InlineKeyboardMarkup(row_width = 1)
    markup.add(InlineKeyboardButton(text = '‚ùì –ü–æ–º–æ—â—å', callback_data='adminhelp'), 
               InlineKeyboardButton(text = 'üíº –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º', callback_data='itemsinfo_table'), 
               InlineKeyboardButton(text = 'üìÅ –§–∞–π–ª—ã –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞', callback_data='backup'), 
               InlineKeyboardButton(text = 'üí¨ –ê–¥–º–∏–Ω—Å–∫–∏–µ —á–∞—Ç—ã', callback_data='adminchats'))

    if rank > 2:
        markup.add(InlineKeyboardButton(text='‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞', callback_data='restart_bot'))
    await call.message.answer("<i>–≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –∞–¥–º–∏–Ω–∞–º. –¢–æ–ª—å–∫–æ —Ç—Å—Å</i>", parse_mode='html', reply_markup=markup)
        
async def itemsinfo_table(call: CallbackQuery, user_id: int):
    rank = cur.execute(f"SELECT rank FROM userdata WHERE user_id={user_id}").fetchone()[0]

    if rank < 2:
        return await call.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞", show_alert = True)

    markup = InlineKeyboardMarkup(row_width = 10)
    items = [
        InlineKeyboardButton(
            text=ITEMS[item][0], callback_data=f'iteminfo_{item}'
        )
        for item in ITEMS
    ]
    markup.add(*items)
    await call.message.answer("<i>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ</i>", parse_mode='html', reply_markup=markup)

async def itemsinfo_item(call: CallbackQuery, user_id: int):
    item = call.data.split('_')[1]

    if item not in ITEMS:
        return

    rank = cur.execute(f"SELECT rank FROM userdata WHERE user_id={user_id}").fetchone()[0]

    if rank < 2:
        return await call.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞", show_alert = True)

    cost = '–Ω–µ –ø—Ä–æ–¥–∞–µ—Ç—Å—è' if ITEMS[item][3] < 0 else ITEMS[item][3]
    match (ITEMS[item][4][0]):
        case 'food':
            itemtype = '–µ–¥–∞'
        case 'mask':
            itemtype = '–º–∞—Å–∫–∞'
        case 'car':
            itemtype = '–º–∞—à–∏–Ω–∞'
        case _:
            itemtype = 'undefined'

    await call.answer(f'{ITEMS[item][0]}{ITEMS[item][2]}\n–ö–æ–¥: {item}\n–¢–∏–ø: {itemtype}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost}', show_alert = True)

async def adminhelp(call: CallbackQuery, user_id: int):
    rank = cur.execute(f"SELECT rank FROM userdata WHERE user_id={user_id}").fetchone()[0]

    if rank < 2:
        return await call.answer("üë®‚Äç‚öñÔ∏è –°—É–¥–∞—Ä—å, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. ", show_alert = True)
        
    return await call.message.answer("<i><b>–°—Ç–∞—Ç—å–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤</b>\n–ê–¥–º–∏–Ω—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://telegra.ph/Administratorskaya-dokumentaciya-ZHivopolisa-01-03\n–ü–æ—Å–æ–±–∏–µ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é /sqlrun: https://telegra.ph/Administratorskaya-dokumentaciya-ZHivopolisa-Komanda-sqlrun-07-25</i>", parse_mode='html')

async def sqlapprove(call: CallbackQuery):
    try:
        request_user_id = call.data.split(':')[2]
        user_id = call.from_user.id
        rank = cur.execute(f"SELECT rank FROM userdata WHERE user_id={user_id}").fetchone()[0]

        if rank < 3:
            return call.answer('üë®‚Äç‚öñÔ∏è –°—É–¥–∞—Ä—å, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.', show_alert=True)
        
        request: str = cur.execute(f"SELECT sql FROM userdata WHERE user_id={request_user_id}").fetchone()[0]

        if not request:
            return call.answer("404: request not found")
        
        cur.execute(f"UPDATE userdata SET sql=NULL WHERE user_id={request_user_id}")
        conn.commit()

        await bot.send_message(user_id, f'‚úÖ <i>–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ën:\n\n<code>{request}</code></i>')
        
        cur.execute(request)
        if "select" in request.lower():
            try:
                rval = ''
                for row in cur.fetchall():
                    for slot in row:
                        rval = rval+'\n'+str(slot)
                await call.message.answer(f'<i><b>–ó–Ω–∞—á–µ–Ω–∏—è: \n</b>{rval}</i>', parse_mode='html')
                if request_user_id  !=  user_id:
                    await bot.send_message(request_user_id, f'<i><b>–ó–Ω–∞—á–µ–Ω–∏—è: \n</b>{rval}</i>', parse_mode='html')
            except Exception as e:
                await call.message.answer(f'<i><b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:</b> {e}</i>', parse_mode='html')
                await call.message.answer('<i>–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω</i>', parse_mode='html')
                if request_user_id!=user_id:
                    await bot.send_message(request_user_id, '<i>–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω</i>')
        else:
            conn.commit()
        
    except Exception as e:
        await call.message.answer(f'<i><b>–ó–∞–ø—Ä–æ—Å –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: \n</b>{e}</i>', parse_mode = 'html')
        if request_user_id!=user_id:
            await bot.send_message(request_user_id, f'<i><b>–ó–∞–ø—Ä–æ—Å –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: \n</b>{e}</i>')

async def sqldecline(call: CallbackQuery):
    try:
        request_user_id = call.data.split(':')[2]
        user_id = call.from_user.id
        rank = cur.execute(f"SELECT rank FROM userdata WHERE user_id={user_id}").fetchone()[0]
        
        if rank < 3:
            return call.answer('üë®‚Äç‚öñÔ∏è –°—É–¥–∞—Ä—å, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.', show_alert=True)

        request = cur.execute(f"SELECT sql FROM userdata WHERE user_id={request_user_id}").fetchone()[0]
       
        cur.execute(f"UPDATE userdata SET sql=NULL WHERE user_id={request_user_id}")
        conn.commit()

        await call.answer('–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω', show_alert=True)
        await bot.send_message(request_user_id, f'‚ùå <i>–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º:\n\n<code>{request}</code></i>', parse_mode='html')
        return await bot.delete_message(call.message.chat.id, call.message.message_id)
    
    except Exception as e:
        return await call.message.answer(f'<i><b>&#10060; –û—à–∏–±–∫–∞: </b>{e}</i>', parse_mode = 'html')

async def adminchats(call: CallbackQuery):
    user_id = call.from_user.id
    rank = cur.execute(f"SELECT rank FROM userdata WHERE user_id={user_id}").fetchone()[0]

    markup = InlineKeyboardMarkup(row_width=1)

    if rank < 1:
        return await call.answer("üë®‚Äç‚öñÔ∏è –°—É–¥–∞—Ä—å, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", show_alert = True)
    if rank > 0:
        markup.add(InlineKeyboardButton('üëæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞', TESTCHAT),
        InlineKeyboardButton('üì£ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞', JIVADMCHAT),
        InlineKeyboardButton('üë®‚Äçüîß LOG CHAT', LOGCHATLINK))
    if rank > 1:
        markup.add(InlineKeyboardButton('üßû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è Baffu', BAFFUADM))
    if rank > 2:
        markup.add(InlineKeyboardButton('ü¶πüèº –ú–µ–≥–∞–ß–∞—Ç', MEGACHATLINK))

    await call.message.answer_sticker('CAACAgIAAxkBAAIEN2QE3dP0FVb2HNOHw1QC2TMpUEpsAAK7IAACEkDwSZtWAAEk41obpC4E')
    await call.message.answer("<i><b>üßë‚Äçüíª –ê–¥–º–∏–Ω—Å–∫–∏–µ —á–∞—Ç—ã –∂–∏–≤–æ–ø–æ–ª–∏—Å–∞:</b>\nüíª –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞: https://t.me/+k2LZEIyZtpRiMjcy</i>", parse_mode='html', reply_markup=markup)

async def restart(call: CallbackQuery):
    try:
        rank = cur.execute(f"SELECT rank FROM userdata WHERE user_id = {call.from_user.id}").fetchone()[0]
        
        if rank < 3:
            return await call.answer("üë®‚Äç‚öñÔ∏è –°—É–¥–∞—Ä—å, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", show_alert = True)
            
        await call.answer("üåÄ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...")
        os.execv(sys.executable, ['python3'] + sys.argv)
        
    except Exception as e:
        await call.message.answer(f'<i><b>‚ô®Ô∏è –û—à–∏–±–∫–∞: </b>{e}</i>', parse_mode = 'html')