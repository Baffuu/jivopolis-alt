from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from ...database.sqlitedb import cur
from ...config import ITEMS

async def adminpanel(call: CallbackQuery, user_id: int):
    rank = cur.execute(f"SELECT rank FROM userdata WHERE user_id={user_id}").fetchone()[0]

    if rank < 2:
        return await call.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞", show_alert = True)
        
    markup = InlineKeyboardMarkup(row_width = 1)
    markup.add(InlineKeyboardButton(text = '‚ùì –ü–æ–º–æ—â—å', callback_data='adminhelp'), 
               InlineKeyboardButton(text = 'üíº –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º', callback_data='itemsinfo_table'), 
               InlineKeyboardButton(text = 'üìÅ –§–∞–π–ª—ã –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞', callback_data='backup'), 
               InlineKeyboardButton(text = 'üí¨ –ê–¥–º–∏–Ω—Å–∫–∏–µ —á–∞—Ç—ã', callback_data='adminchats'))
    await call.message.answer("<i>–≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –∞–¥–º–∏–Ω–∞–º. –¢–æ–ª—å–∫–æ —Ç—Å—Å</i>", parse_mode='html', reply_markup=markup)
            
async def itemsinfo_table(call: CallbackQuery, user_id: int):
    rank = cur.execute(f"SELECT rank FROM userdata WHERE user_id={user_id}").fetchone()[0]

    if rank < 2:
        return await call.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞", show_alert = True)
        
    markup = InlineKeyboardMarkup(row_width = 10)
    items = []

    for item in ITEMS:
        items.append(InlineKeyboardButton(text = ITEMS[item][0], callback_data = 'iteminfo_'+ item))

    markup.add(*items)
    await call.message.answer("<i>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ</i>", parse_mode='html', reply_markup=markup)

async def itemsinfo_item(call: CallbackQuery, user_id: int):
    item = call.data.split('_')[1]

    if item not in ITEMS:
        return
    
    rank = cur.execute(f"SELECT rank FROM userdata WHERE user_id={user_id}").fetchone()[0]
    
    if rank < 2:
        return await call.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞", show_alert = True)
    
    if ITEMS[item][3] < 0:
        cost = '–Ω–µ –ø—Ä–æ–¥–∞–µ—Ç—Å—è'
    else:
        cost = ITEMS[item][3]

    match (ITEMS[item][4][0]):
        case 'food':
            type = '–µ–¥–∞'
        case 'mask':
            type = '–º–∞—Å–∫–∞'
        case 'car':
            type = '–º–∞—à–∏–Ω–∞'
        case _:
            type = 'undefined'

    await call.answer(f'{ITEMS[item][0]}{ITEMS[item][2]}\n–ö–æ–¥: {item}\n–¢–∏–ø: {type}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost}', show_alert = True)

async def adminhelp(call: CallbackQuery, user_id: int):
    rank = cur.execute(f"SELECT rank FROM userdata WHERE user_id={user_id}").fetchone()[0]

    if rank < 2:
        return await call.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞", show_alert = True)
        
    return await call.message.answer("<i><b>–°—Ç–∞—Ç—å–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤</b>\n–ê–¥–º–∏–Ω—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://telegra.ph/Administratorskaya-dokumentaciya-ZHivopolisa-01-03\n–ü–æ—Å–æ–±–∏–µ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é /sqlrun: https://telegra.ph/Administratorskaya-dokumentaciya-ZHivopolisa-Komanda-sqlrun-07-25</i>", parse_mode='html')