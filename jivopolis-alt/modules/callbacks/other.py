import time
import contextlib
from gtts import gTTS
import os
from math import floor
from datetime import datetime, timezone
from .traveling import state_balance

from ... import bot, logger
from ...database import cur, conn
from ...database.functions import (
    get_weather, str_weather, month, current_time, cancel_button
)
from ...misc.config import limited_items
from ...misc import get_mask, get_link, OfficialChats, get_embedded_link, ITEMS

from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Message, CallbackQuery
)
from aiogram.utils.exceptions import (
    MessageCantBeDeleted,
    MessageToDeleteNotFound
)
from ..._world_updater import get_crypto
from ...utils import is_allowed_nonick


async def chats(user_id: int, message: Message) -> None:
    '''
    Callback for chats

    :param user_id:
    :param message:
    '''
    rase = cur.select("rase", "userdata").where(user_id=user_id).one()
    markup = InlineKeyboardMarkup()

    match(rase):
        case "üê±":
            info = ("–†–∞—Å–æ–≤—ã–π —á–∞—Ç –ö–æ—Ç–æ–≤",
                    "https://t.me/joinchat/mWs48dy5cAo1ZmEy")
        case "üê∂":
            info = ("–†–∞—Å–æ–≤—ã–π —á–∞—Ç –°–æ–±–∞–∫",
                    "https://t.me/joinchat/yQ8X_uD1MydmNWIy")
        case "&#129437":
            info = ("–†–∞—Å–æ–≤—ã–π —á–∞—Ç –ï–Ω–æ—Ç–æ–≤",
                    "https://t.me/joinchat/vuVCKuUIB2gxZTYy")
        case "&#128056;":
            info = ("–†–∞—Å–æ–≤—ã–π —á–∞—Ç –ñ–∞–±",
                    "https://t.me/joinchat/ACneINZ0hl43YTUy")
        case "&#129417;":
            info = ("–†–∞—Å–æ–≤—ã–π —á–∞—Ç –°–æ–≤",
                    "https://t.me/joinchat/nCt9oB_cX8I3NzMy")
        case _:
            info = None

    if info is not None:
        markup.add(InlineKeyboardButton(text=info[0], url=info[1]))
    else:
        markup.add(
            InlineKeyboardButton(
                text="–í—ã–±—Ä–∞—Ç—å —Ä–∞—Å—É",
                callback_data="change_rase"
            )
        )

    markup.add(
        InlineKeyboardButton(
            text="üéÆ –ò–≥—Ä–æ–≤–æ–π –∫–ª—É–±",
            url="https://t.me/+2UuPwVyac6lkYjRi"
        )
    )

    await message.answer(
        "<i><b>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞</b>\n&#128221; –ü—Ä–∏—ë–º–Ω–∞—è –¥–ª—è –∏–¥–µ–π –∏"
        "–≤–æ–ø—Ä–æ—Å–æ–≤:https://t.me/zhivolab\n&#128172; –ß–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è: https://t"
        ".me/chatzhivopolisa\n&#128163; –ß–∞—Ç –¥–ª—è —Ñ–ª—É–¥–∞: https://t.me/jivopolis"
        "_flood\n&#128176; –†—ã–Ω–æ–∫ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞: t.me/jivopolis_bazar\n&#128572; "
        "–ü–æ—Å–æ–ª—å—Å—Ç–≤–æ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞ –≤ –ö–æ—Ç–æ—Å—Ç–∞–Ω–µ: https://t.me/posolstvo_jivopolis_"
        "in_kotostan\n{0}</i>".format(
            "–í—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Å–µ–±–µ —Ä–∞—Å—É. –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å, –Ω–∞–∂–º–∏"
            "—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å —Ä–∞—Å—É\"\n" if info is None else ""
        ),
        reply_markup=markup
    )


async def infomenu(call: CallbackQuery):
    '''
    Information menu.

    :param call:
    '''
    await call.message.answer(
        "<i>‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø–æ–º–æ—â—å</i>",
        reply_markup=InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton(
                text="üí¨ –ß–∞—Ç—ã",
                callback_data="chats"
            ),
            InlineKeyboardButton(
                text="üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞",
                callback_data="economics"
            ),
            InlineKeyboardButton(
                text="‚ùì –ü–æ–º–æ—â—å",
                callback_data="help"
            ),
            cancel_button()
        )
    )


async def gadgets_menu(call: CallbackQuery):
    '''
    Phone and radio menu.

    :param call:
    '''
    markup = InlineKeyboardMarkup()
    if cur.select("phone", "userdata").where(
            user_id=call.from_user.id).one():
        markup.add(
            InlineKeyboardButton(
                text="üì± –¢–µ–ª–µ—Ñ–æ–Ω",
                callback_data="cellphone_menu"
            )
        )
    if cur.select("radio", "userdata").where(
            user_id=call.from_user.id).one():
        markup.add(
            InlineKeyboardButton(
                text="üìª –†–∞–¥–∏–æ",
                callback_data="radio_menu"
            )
        )

    await call.message.answer(
        "<i>üì± –ì–∞–¥–∂–µ—Ç—ã</i>",
        reply_markup=markup.add(cancel_button())
    )


async def my_refferals(message: Message, user_id: int):
    '''
    Callback for user refferals

    :param message:
    :param user_id:
    '''
    user_mask = get_mask(user_id)
    nick = cur.select("nickname", "userdata").where(user_id=user_id).one()
    count = cur.select("count(*)", "userdata").where(inviter_id=user_id).one()
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton(
            text="üñá –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞",
            callback_data="reflink"
        )
    )

    if count < 1:
        return await message.answer(
            f"<i><b><a href=\"tg://user?id={user_id}\">{user_mask}{nick}</a></"
            "b>, –≤—ã –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å :(</i>",
            reply_markup=markup
        )

    cur.execute(
        f"""
            SELECT * FROM userdata
            WHERE refid = {user_id}
            ORDER BY -lastseen
            LIMIT 100
        """
    )

    users = str()

    for ref_num, row in enumerate(cur, start=1):
        mask = get_mask(row[1])
        users += (
            f"\n{ref_num}. <a href = \""
            f"{await get_link(row[1])}\">{mask}{row[7]}</a>"
        )

    await message.answer(
        text=(
            "<i>&#128100; –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø—Ä–∏–≤–ª–µ—á—ë–Ω–Ω—ã–µ <b><a href=\"tg://user"
            f"?id={user_id}\">{user_mask}{nick}</a></b>: <b>{users}</b></i>"
        ),
        reply_markup=markup
    )


async def get_cheque(call: CallbackQuery, user_id: int) -> None:
    money = int(call.data[6:])
    mask = get_mask(user_id)
    nick = cur.select("nickname", "userdata").where(user_id=user_id).one()

    cur.update("userdata").add(balance=money).where(user_id=user_id).commit()

    if not call.message:
        await bot.edit_message_text(
            inline_message_id=call.inline_message_id,
            text=(
                f"<i><b><a href=\"{await get_link(user_id)}\">{mask}{nick}</a"
                f"></b> –∑–∞–±—Ä–∞–ª <b>${money}</b></i>"
            )
        )
    else:
        await bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=(
                f"<i><b><a href=\"{await get_link(user_id)}\">{mask}{nick}<"
                f"/a></b> –∑–∞–±—Ä–∞–ª <b>${money}</b></i>"
            )
        )
    if money > 0:
        await bot.send_message(
            OfficialChats.LOGCHAT,
            f"<i><b>{await get_embedded_link(user_id)}</b> –∑–∞–±—Ä–∞–ª <b>${money}<"
            "/b>\n#user_getcheck</i>"
        )


async def cellphone_menu(call: CallbackQuery) -> None:
    '''
    Callback for cell phone menu

    :param call - callback:
    :param user_id:
    '''
    phone = cur.select("phone", "userdata").where(
        user_id=call.from_user.id).one()

    if phone < 1:
        return await call.answer(
            "–í–∞–º –Ω—É–∂–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω. –ï–≥–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–∞ —É–ª. –ì–µ–Ω–µ—Ä–∞–ª–∞ "
            "–®–µ–ª–±–∏ –∏ –æ–¥–Ω–æ–∏–º—ë–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –∏–ª–∏ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–µ–Ω—Ç—Ä–µ –≤ "
            "–ú–∞–∫—Å–∏–≥—Ä–∞–¥–µ",
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=1)
    weather = str_weather(get_weather())

    markup.add(
        InlineKeyboardButton(
            text="üì° GPS",
            callback_data="gps"
        ),
        InlineKeyboardButton(
            text="üöö –ú–∏–ì.–î–æ—Å—Ç–∞–≤–∫–∞",
            callback_data="delivery_app"
        ),
        InlineKeyboardButton(
            text="üöÇ –ñ–∏–≤–ì–æ—Ä–¢—Ä–∞–Ω—Å: –ë–∏–ª–µ—Ç—ã",
            callback_data="tickets"
        ),
        InlineKeyboardButton(
            text=f"{weather[0]} –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã",
            callback_data="weather_forecast"
        ),
        InlineKeyboardMarkup(
            text="‚óÄ –ù–∞–∑–∞–¥",
            callback_data="cancel_action"
        )
    )

    now = datetime.now(timezone.utc)

    # a function that adds 0 to the beginning of a number
    # if it has less than 2 digits
    def f(x):
        return x if len(str(x)) > 1 else f"0{x}"

    str_date = f"{f(now.day)}.{f(now.month)}.{now.year}"
    str_time = f"{f(now.hour)}:{f(now.minute)}"
    await call.message.answer(
        "<i>üì± –¢–µ–ª–µ—Ñ–æ–Ω - —ç—Ç–æ —É–¥–æ–±–Ω–∞—è –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—â—å.\n\n"
        f"–°–µ–π—á–∞—Å: <b>{str_time}</b> (UTC), <b>{str_date}</b>\n"
        f"–ü–æ–≥–æ–¥–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: <b>{weather}</b></i>",
        reply_markup=markup
    )


async def radio_menu(call: CallbackQuery) -> None:
    '''
    Callback for radio menu

    :param call - callback:
    :param user_id:
    '''
    radio = cur.select("radio", "userdata").where(
        user_id=call.from_user.id).one()

    if radio < 1:
        return await call.answer(
            "–í–∞–º –Ω—É–∂–µ–Ω –ø—Ä–∏—ë–º–Ω–∏–∫. –ï–≥–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–∞ —É–ª. –ì–µ–Ω–µ—Ä–∞–ª–∞ "
            "–®–µ–ª–±–∏ –∏ –æ–¥–Ω–æ–∏–º—ë–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –∏–ª–∏ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–µ–Ω—Ç—Ä–µ –≤ "
            "–ú–∞–∫—Å–∏–≥—Ä–∞–¥–µ",
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=1)
    weather = str_weather(get_weather())

    markup.add(
        InlineKeyboardButton(
            text=f"71.0 {weather[0]} –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã",
            callback_data="weather_forecast_radio"
        ),
        InlineKeyboardMarkup(
            text="‚óÄ –ù–∞–∑–∞–¥",
            callback_data="cancel_action"
        )
    )

    await call.message.answer(
        "<i>üìª –ö –∫–∞–∫–æ–π —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è?</i>",
        reply_markup=markup
    )


async def weather_forecast(call: CallbackQuery) -> None:
    '''
    Callback for weather forecast phone app

    :param user_id:
    '''
    phone = cur.select("phone+radio", "userdata").where(
        user_id=call.from_user.id).one()

    if phone < 1:
        return await call.answer(
            '–í–∞–º –Ω—É–∂–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ —Ä–∞–¥–∏–æ. –ò—Ö –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ'
            ' –Ω–∞ —É–ª. –ì–µ–Ω–µ—Ä–∞–ª–∞ –®–µ–ª–±–∏ –∏ –æ–¥–Ω–æ–∏–º—ë–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –∏–ª–∏ –≤ '
            '—Ç–æ—Ä–≥–æ–≤–æ–º —Ü–µ–Ω—Ç—Ä–µ –≤ –ú–∞–∫—Å–∏–≥—Ä–∞–¥–µ',
            show_alert=True
        )

    weather_texts = ''
    for day in range(7):
        now = datetime.fromtimestamp(current_time() + 86400*day)
        weather_texts += (
            f"\n<b>{now.day} {month(now.month)}</b> - "
            f"{str_weather(get_weather(day))}"
        )

    await call.message.answer(
        f"<i><b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π:</b>\n{weather_texts}\n\n"
        "<b>!!</b> –ü–æ–≥–æ–¥–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –≤ 00:00 UTC –∫–∞–∂–¥—ã–π –¥–µ–Ω—å</i>",
        reply_markup=InlineKeyboardMarkup().add(
            cancel_button()
        )
    )


async def radio_frequency(call: CallbackQuery, frequency: int,
                          speech: str) -> None:
    '''
    Callback for weather forecast phone radio program text

    :param call - callback:
    :param frequency - radio station frequency:
    :param speech - radio station text:
    '''
    now = datetime.now(timezone.utc)
    file_name = f"radio_{frequency}.mp3"
    speech = (
        f"–°–ª—É—à–∞–π—Ç–µ –ì–æ–ª–æ—Å –ö–æ—Ç–∞—è! –í–∞—Å –≤—Å—Ç—Ä–µ—á–∞–µ—Ç —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è {frequency}...\n"
        f"–í –ö–æ—Ç–∞–µ {now.day} {month(now.month)}, {now.hour} —á–∞—Å–æ–≤ {now.minute}"
        f" –º–∏–Ω—É—Ç...\n{speech}...\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏!"
    )
    gTTS(speech, lang='ru').save(file_name)

    with open(file_name, "rb") as audio_file:
        await call.message.answer_audio(
            audio_file,
            caption=f"<i>–í —ç—Ñ–∏—Ä–µ –ì–æ–ª–æ—Å –ö–æ—Ç–∞—è, —á–∞—Å—Ç–æ—Ç–∞ <b>{frequency}.0</b>\n\n"
                    f"<code>{speech}</code></i>",
            reply_markup=InlineKeyboardMarkup().add(cancel_button())
        )
    os.remove(file_name)


def weather_forecast_radio_program() -> None:
    '''
    Callback for weather forecast phone radio program text
    '''
    weather_texts = '–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —Å–µ–º—å –¥–Ω–µ–π...\n'
    for day in range(7):
        now = datetime.fromtimestamp(current_time() + 86400*day)
        weather_texts += (
            f"\n{now.day} {month(now.month)} - "
            f"{str_weather(get_weather(day))[2:]}..."
        )

    return weather_texts


async def give_state(call: CallbackQuery, amount) -> None:
    '''
    Callback for clan joining

    :param call - callback:
    :param user_id:
    '''
    amount = int(call.data[11:])
    user_id = call.from_user.id
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    balance = cur.select("balance", "userdata").where(user_id=user_id).one()
    # treasury = cur.select("treasury", "globaldata").one()

    if place != "–ñ–∏–≤–±–∞–Ω–∫":
        return

    if balance >= amount:
        cur.execute(f"UPDATE globaldata SET treasury=treasury+{amount}")
        conn.commit()
        cur.update("userdata").add(balance=-amount).where(
            user_id=user_id).commit()
        await call.answer('success.', show_alert=True)  # todo better answer
    else:
        await call.message.answer("&#10060; –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</i>")

    await state_balance(call)
    await bot.delete_message(call.message.chat.id, call.message.message_id)


async def economics(call: CallbackQuery) -> None:
    '''
    Callback for jivopolis economics menu

    :param call - callback:
    '''
    treasury = cur.execute("SELECT treasury FROM globaldata").fetchone()[0]
    try:
        balance = cur.execute(
            "SELECT clan_balance FROM clandata WHERE clan_id=-1001395868701"
        ).fetchone()[0]
    except TypeError:
        logger.warning(
            'Game club does not exists or bot not added to the chat'
        )
        balance = 0
    lastfill = cur.execute("SELECT lastfill FROM globaldata").fetchone()[0]
    coef = 1.5  # todo cur.execute("SELECT coef FROM globaldata").fetchone()[0]

    diff = time.time() - lastfill
    h = floor(diff / 3600)
    m = floor(diff % 3600 / 60)
    s = floor(diff % 3600 % 60)

    limits = ''

    for item in limited_items:
        limits += f'\n{ITEMS[item].emoji} {ITEMS[item].ru_name} - '
        item_left = cur.execute(f"SELECT {item} FROM globaldata").fetchone()[0]

        limits += '–¥–µ—Ñ–∏—Ü–∏—Ç' if item_left <= 0 else str(item_left)

    crypto = await get_crypto()
    crypto_text = ''
    for c in crypto:
        value = cur.select("value", 'cryptodata').where(crypto=c).one()
        prev_value = cur.select("prev_value", 'cryptodata').where(
            crypto=c).one()
        crypto_text += f"{ITEMS[c].emoji}{ITEMS[c].name} - ${value}"
        crypto_text += (
            f" üîª {round((value-prev_value) / prev_value * 100, 2)}%\n"
            if value-prev_value < 0 else
            f" üîº +{round((value-prev_value) / prev_value * 100, 2)}%\n"
        )
    await call.message.answer(
        (
            f"<i><b>üìä –≠–ö–û–ù–û–ú–ò–ö–ê –ñ–ò–í–û–ü–û–õ–ò–°–ê</b>\n"
            "\nüí∏ <b>–§–∏–Ω–∞–Ω—Å—ã</b>"
            f"\nüí∞ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞–∑–Ω–∞ - <b>${treasury}</b>"
            f"\nüéÆ –ë–∞–ª–∞–Ω—Å –ò–≥—Ä–æ–≤–æ–≥–æ –∫–ª—É–±–∞ - <b>${balance}</b>"
            f"\n\nüè™ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–º</b>{limits}\n"
            "\n\nüöö –ó–∞–≤–æ–∑ —Ç–æ–≤–∞—Ä–∞ –≤ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å."
            f" –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≤–æ–∑ –±—ã–ª {h} —á–∞—Å–æ–≤ {m} –º–∏–Ω—É—Ç {s} —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥"
            "\n\nüí∞ <b>–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫</b>"
            f"\n–†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {round(1//coef, 2)}</i>"
            "\n\n<b>üíé –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:</b>\n\n"
            f"{crypto_text}"
        )
    )


async def toggle_nonick(call: CallbackQuery) -> None:
    if await is_allowed_nonick(call.from_user.id):
        new_mode = 0
        new_mode_ru = "–≤—ã–∫–ª—é—á–µ–Ω"
    else:
        new_mode = 1
        new_mode_ru = "–≤–∫–ª—é—á—ë–Ω"

    cur.update("userdata").set(nonick_cmds=new_mode).where(
        user_id=call.from_user.id).commit()

    await call.answer(f"üëÅ Nonick —Ç–µ–ø–µ—Ä—å {new_mode_ru}", show_alert=True)
    with contextlib.suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await call.message.delete()
    await user_settings(call)


async def user_settings(call: CallbackQuery):
    markup = InlineKeyboardMarkup(row_width=1)
    ready = cur.select("is_ready", "userdata").where(
        user_id=call.from_user.id).one()

    nonick = (
        "–≤–∫–ª—é—á—ë–Ω"
        if await is_allowed_nonick(call.from_user.id)
        else "–≤—ã–∫–ª—é—á–µ–Ω"
    )

    markup.add(
        InlineKeyboardButton(
            text=(
                f"‚öî –ë–æ–µ–≤–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: "
                f"{'–ì–æ—Ç–æ–≤' if bool(ready) else '–ù–µ –≥–æ—Ç–æ–≤'}"
            ),
            callback_data='toggle_fightmode'
        ),
        InlineKeyboardButton(
            f"üëÅÔ∏è‚Äçüó®Ô∏è Nonick: {nonick}",
            callback_data="toggle_nonick"
        ),
        InlineKeyboardButton(
            text='üë®‚Äçüè´ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è',
            callback_data='profile_settings'
        ),
        InlineKeyboardButton(
            text='üîê –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å',
            callback_data='privacy_settings'
        ),
        InlineKeyboardButton(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
    )
    await call.message.answer('<i><b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b></i>', reply_markup=markup)


async def exchange_center(call: CallbackQuery) -> None:
    crypto = await get_crypto()
    buttons = [
        InlineKeyboardButton(
            f"{ITEMS[c].emoji} {ITEMS[c].ru_name}",
            callback_data=f"exchange_menu_{c}",
        )
        for c in crypto
    ]
    await call.message.answer(
        "üìä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –±–∏—Ä–∂—É! –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, "
        "–∫–æ—Ç–æ—Ä—É—é –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –æ–±–º–µ–Ω—è—Ç—å.",
        reply_markup=InlineKeyboardMarkup(row_width=2).add(*buttons)
    )


async def exchange_menu_(call: CallbackQuery):
    crypto = call.data.replace("exchange_menu_", "")
    crypto_value = cur.select("value", from_="cryptodata").where(
        crypto=crypto).one()
    crypto = ITEMS[crypto]
    buttons = [
        InlineKeyboardButton(
            "üìä –ö—É–ø–∏—Ç—å ",
            callback_data=f"exchange_{crypto.name}:1"
        ),
        InlineKeyboardButton(
            "üîª –ü—Ä–æ–¥–∞—Ç—å ",
            callback_data=f"exchange_{crypto.name}:-1"
        )
    ]

    await call.message.answer(
        f"{crypto.emoji} {crypto.ru_name}\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {crypto_value}",
        reply_markup=InlineKeyboardMarkup(row_width=1).add(*buttons)
    )


async def exchange_(call: CallbackQuery):
    amount = call.data.split("_")[1]
    crypto = amount.split(":")[0]
    amount = int(amount.split(":")[1])
    user_id = call.from_user.id
    balance = cur.select("balance", "userdata").where(user_id=user_id).one()

    cur.update("cryptodata")

    if amount > 0:
        cur.add(bought=amount)
        text = (
            f"üçè –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {ITEMS[crypto].emoji}"
            f" {ITEMS[crypto].ru_name} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {amount}. –í–∞—à –±–∞–ª–∞–Ω—Å: "
            f"{balance}"
        )
    else:
        cur.add(sold=amount)
        text = (
            f"üçé –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ {ITEMS[crypto].emoji} "
            f"{ITEMS[crypto].ru_name} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {amount}."
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}"
        )

    cur.where(crypto=crypto).commit()

    await call.answer(text, show_alert=True)
