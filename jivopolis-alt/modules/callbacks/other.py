from ...database.functions import cur, conn, get_mask, bot, log_chat, get_link
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery

async def chats(user_id: int, message: Message):
    rase = cur.execute(f"SELECT rase FROM userdata WHERE user_id = {user_id}").fetchone()[0]
    markup = InlineKeyboardMarkup()

    match(rase):
        case 'üê±':
            chat = '–†–∞—Å–æ–≤—ã–π —á–∞—Ç –ö–æ—Ç–æ–≤'
            url = 'https://t.me/joinchat/mWs48dy5cAo1ZmEy'
        case 'üê∂':
            chat = '–†–∞—Å–æ–≤—ã–π —á–∞—Ç –°–æ–±–∞–∫'
            url = 'https://t.me/joinchat/yQ8X_uD1MydmNWIy'
        case '&#129437':
            chat = '–†–∞—Å–æ–≤—ã–π —á–∞—Ç –ï–Ω–æ—Ç–æ–≤'
            url = 'https://t.me/joinchat/vuVCKuUIB2gxZTYy'
        case '&#128056;':
            chat = '–†–∞—Å–æ–≤—ã–π —á–∞—Ç –ñ–∞–±'
            url = 'https://t.me/joinchat/ACneINZ0hl43YTUy'
        case '&#129417;':
            chat = '–†–∞—Å–æ–≤—ã–π —á–∞—Ç –°–æ–≤'
            url = 'https://t.me/joinchat/nCt9oB_cX8I3NzMy'
        case _:
            chat = None

    if chat:
        markup.add(InlineKeyboardButton(text=chat, url=url))
    else:
        markup.add(InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å —Ä–∞—Å—É', callback_data='change_rase'))
            
    markup.add(InlineKeyboardButton(text='üéÆ –ò–≥—Ä–æ–≤–æ–π –∫–ª—É–±', url='https://t.me/+2UuPwVyac6lkYjRi'))
    await message.answer('<i><b>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞</b>\n&#128221; –ü—Ä–∏—ë–º–Ω–∞—è –¥–ª—è –∏–¥–µ–π –∏ –≤–æ–ø—Ä–æ—Å–æ–≤: https://t.me/zhivolab\n&#128172; –ß–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è: https://t.me/chatzhivopolisa\n&#128163; –ß–∞—Ç –¥–ª—è —Ñ–ª—É–¥–∞: https://t.me/jivopolis_flood\n&#128176; –†—ã–Ω–æ–∫ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞: t.me/jivopolis_bazar\n&#128572; –ü–æ—Å–æ–ª—å—Å—Ç–≤–æ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞ –≤ –ö–æ—Ç–æ—Å—Ç–∞–Ω–µ: https://t.me/posolstvo_jivopolis_in_kotostan\n{0}</i>'.format('–í—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Å–µ–±–µ —Ä–∞—Å—É. –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å —Ä–∞—Å—É"\n' if chat=='' else ''), parse_mode = 'html', reply_markup = markup)

#todo async def change_rase(user_id: int, message: Message)

async def my_refferals(message: Message, user_id: int):
    user_mask = get_mask(user_id)
    nick = cur.execute(f"SELECT nickname FROM userdata WHERE user_id = {user_id}").fetchone()[0]
    count = cur.execute(f"SELECT count(*) FROM userdata WHERE inviter_id = {user_id}").fetchone()[0]
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text='üñá –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞', callback_data='reflink'))
    
    if count < 1:
        return await message.answer(f'<i><b><a href="tg://user?id={user_id}">{user_mask}{nick}</a></b>, –≤—ã –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å :(</i>', parse_mode = 'html', reply_markup=markup)
        
    cur.execute(f"""
    SELECT * FROM userdata 
    WHERE refid = {user_id}
    ORDER BY -lastseen 
    LIMIT 100""")

    ref_num = 0
    users: str 

    for row in cur:
        ref_num += 1
        mask = get_mask(row[1])
        users+=f'\n{ref_num}. <a href = "{get_link(row[1])}">{mask}{row[7]}</a>'
    await message.answer(f'<i>&#128100; –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø—Ä–∏–≤–ª–µ—á—ë–Ω–Ω—ã–µ <b><a href="tg://user?id={user_id}">{user_mask}{nick}</a></b>: <b>{users}</b></i>', parse_mode = 'html', reply_markup=markup)

async def get_cheque(call: CallbackQuery, user_id: int):
    money = int(call.data[6:])
    mask = get_mask(user_id)
    nick = cur.execute(f"SELECT nickname FROM userdata WHERE user_id={user_id}").fetchone()[0]
    
    cur.execute(f"UPDATE userdata SET balance = balance + {money} WHERE user_id={user_id}"); conn.commit()
    
    if call.message != None:
        await bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = f'<i><b><a href="{get_link(user_id)}">{mask}{nick}</a></b> –∑–∞–±—Ä–∞–ª <b>${money}</b></i>')
    else:
        await bot.edit_message_text(inline_message_id = call.inline_message_id, text = f'<i><b><a href="{get_link(user_id)}">{mask}{nick}</a></b> –∑–∞–±—Ä–∞–ª <b>${money}</b></i>')
    if money > 0:
        await bot.send_message(log_chat, f'<i><b><a href="{get_link}">{mask}{nick}</a></b> –∑–∞–±—Ä–∞–ª <b>${money}</b>\n#user_getcheck</i>')

async def cellphone_menu(call: CallbackQuery):
    a = call.from_user.id
    phone = cur.execute(f"SELECT phone FROM userdata WHERE user_id={call.from_user.id}").fetchone()[0]
    
    if phone<1:
        return await call.answer('–í–∞–º –Ω—É–∂–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω. –ï–≥–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–∞ —É–ª. –ì–µ–Ω–µ—Ä–∞–ª–∞ –®–µ–ª–±–∏ –∏ –æ–¥–Ω–æ–∏–º—ë–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ', show_alert = True)
        
    markup = InlineKeyboardMarkup(row_width = 1)

    markup.add(InlineKeyboardButton(text='üì° GPS', callback_data='gps'),
    InlineKeyboardButton(text='üöö –ú–∏–ì.–î–æ—Å—Ç–∞–≤–∫–∞', callback_data='delivery_app'),
    InlineKeyboardButton(text='üöÇ –ñ–∏–≤–ì–æ—Ä–¢—Ä–∞–Ω—Å: –ë–∏–ª–µ—Ç—ã', callback_data='tickets'),
    InlineKeyboardMarkup(text='‚óÄ –ù–∞–∑–∞–¥', callback_data='cancel_action'))

    await call.message.answer('<i>üì± –¢–µ–ª–µ—Ñ–æ–Ω - —ç—Ç–æ —É–¥–æ–±–Ω–∞—è –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—â—å</i>', parse_mode='html', reply_markup = markup)