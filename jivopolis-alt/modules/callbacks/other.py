import time

from math import floor
from ..callbacks.traveling import state_balance

from ... import bot, logger
from ...database.sqlitedb import cur, conn
from ...config import log_chat, limeteds, ITEMS
from ...misc import get_mask, get_link

from aiogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    Message, CallbackQuery
)

async def chats(user_id: int, message: Message):
    rase = cur.execute(f"SELECT rase FROM userdata WHERE user_id = {user_id}").fetchone()[0]
    markup = InlineKeyboardMarkup()

    match(rase):
        case "üê±":
            chat = "–†–∞—Å–æ–≤—ã–π —á–∞—Ç –ö–æ—Ç–æ–≤"
            url = "https://t.me/joinchat/mWs48dy5cAo1ZmEy"
        case "üê∂":
            chat = "–†–∞—Å–æ–≤—ã–π —á–∞—Ç –°–æ–±–∞–∫"
            url = "https://t.me/joinchat/yQ8X_uD1MydmNWIy"
        case "&#129437":
            chat = "–†–∞—Å–æ–≤—ã–π —á–∞—Ç –ï–Ω–æ—Ç–æ–≤"
            url = "https://t.me/joinchat/vuVCKuUIB2gxZTYy"
        case "&#128056;":
            chat = "–†–∞—Å–æ–≤—ã–π —á–∞—Ç –ñ–∞–±"
            url = "https://t.me/joinchat/ACneINZ0hl43YTUy"
        case "&#129417;":
            chat = "–†–∞—Å–æ–≤—ã–π —á–∞—Ç –°–æ–≤"
            url = "https://t.me/joinchat/nCt9oB_cX8I3NzMy"
        case _:
            chat = None

    if chat:
        markup.add(InlineKeyboardButton(text=chat, url=url))
    else:
        markup.add(InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Ä–∞—Å—É", callback_data="change_rase"))
            
    markup.add(InlineKeyboardButton(text="üéÆ –ò–≥—Ä–æ–≤–æ–π –∫–ª—É–±", url="https://t.me/+2UuPwVyac6lkYjRi"))
    await message.answer("<i><b>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞</b>\n&#128221; –ü—Ä–∏—ë–º–Ω–∞—è –¥–ª—è –∏–¥–µ–π –∏ –≤–æ–ø—Ä–æ—Å–æ–≤: https://t.me/zhivolab\n&#128172; –ß–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è: https://t.me/chatzhivopolisa\n&#128163; –ß–∞—Ç –¥–ª—è —Ñ–ª—É–¥–∞: https://t.me/jivopolis_flood\n&#128176; –†—ã–Ω–æ–∫ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞: t.me/jivopolis_bazar\n&#128572; –ü–æ—Å–æ–ª—å—Å—Ç–≤–æ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞ –≤ –ö–æ—Ç–æ—Å—Ç–∞–Ω–µ: https://t.me/posolstvo_jivopolis_in_kotostan\n{0}</i>".format("–í—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Å–µ–±–µ —Ä–∞—Å—É. –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å —Ä–∞—Å—É\"\n" if chat=="" else ""), parse_mode = "html", reply_markup = markup)

#todo async def change_rase(user_id: int, message: Message)

async def my_refferals(message: Message, user_id: int):
    user_mask = get_mask(user_id)
    nick = cur.execute(f"SELECT nickname FROM userdata WHERE user_id = {user_id}").fetchone()[0]
    count = cur.execute(f"SELECT count(*) FROM userdata WHERE inviter_id = {user_id}").fetchone()[0]
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text="üñá –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="reflink"))

    if count < 1:
        return await message.answer(f"<i><b><a href=\"tg://user?id={user_id}\">{user_mask}{nick}</a></b>, –≤—ã –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å :(</i>", parse_mode = "html", reply_markup=markup)

    cur.execute(f"""
    SELECT * FROM userdata 
    WHERE refid = {user_id}
    ORDER BY -lastseen 
    LIMIT 100""")

    users: str 

    for ref_num, row in enumerate(cur, start=1):
        mask = get_mask(row[1])
        users+=f"\n{ref_num}. <a href = \"{get_link(row[1])}\">{mask}{row[7]}</a>"
    await message.answer(f"<i>&#128100; –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø—Ä–∏–≤–ª–µ—á—ë–Ω–Ω—ã–µ <b><a href=\"tg://user?id={user_id}\">{user_mask}{nick}</a></b>: <b>{users}</b></i>", parse_mode = "html", reply_markup=markup)

async def get_cheque(call: CallbackQuery, user_id: int):
    money = int(call.data[6:])
    mask = get_mask(user_id)
    nick = cur.execute(f"SELECT nickname FROM userdata WHERE user_id={user_id}").fetchone()[0]

    cur.execute(f"UPDATE userdata SET balance = balance + {money} WHERE user_id={user_id}")
    conn.commit()

    if call.message is None:
        await bot.edit_message_text(
            inline_message_id = call.inline_message_id, 
            text = f"<i><b><a href=\"{get_link(user_id)}\">{mask}{nick}</a></b> –∑–∞–±—Ä–∞–ª <b>${money}</b></i>")
    else:
        await bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = f"<i><b><a href=\"{get_link(user_id)}\">{mask}{nick}</a></b> –∑–∞–±—Ä–∞–ª <b>${money}</b></i>")
    if money > 0:
        await bot.send_message(log_chat, f"<i><b><a href=\"{get_link}\">{mask}{nick}</a></b> –∑–∞–±—Ä–∞–ª <b>${money}</b>\n#user_getcheck</i>")

async def cellphone_menu(call: CallbackQuery):
    a = call.from_user.id
    phone = cur.execute(f"SELECT phone FROM userdata WHERE user_id={call.from_user.id}").fetchone()[0]
    
    if phone<1:
        return await call.answer("–í–∞–º –Ω—É–∂–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω. –ï–≥–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–∞ —É–ª. –ì–µ–Ω–µ—Ä–∞–ª–∞ –®–µ–ª–±–∏ –∏ –æ–¥–Ω–æ–∏–º—ë–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ", show_alert = True)
        
    markup = InlineKeyboardMarkup(row_width = 1)

    markup.add(InlineKeyboardButton(text="üì° GPS", callback_data="gps"),
    InlineKeyboardButton(text="üöö –ú–∏–ì.–î–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery_app"),
    InlineKeyboardButton(text="üöÇ –ñ–∏–≤–ì–æ—Ä–¢—Ä–∞–Ω—Å: –ë–∏–ª–µ—Ç—ã", callback_data="tickets"),
    InlineKeyboardMarkup(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="cancel_action"))

    await call.message.answer("<i>üì± –¢–µ–ª–µ—Ñ–æ–Ω - —ç—Ç–æ —É–¥–æ–±–Ω–∞—è –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—â—å</i>", parse_mode="html", reply_markup = markup)

async def give_state(call: CallbackQuery, amount):
    amount = int(call.data[11:])
    user_id = call.from_user.id
    place = cur.execute(f"SELECT current_place FROM userdata WHERE user_id={user_id}").fetchone()[0]
    balance = cur.execute(f"SELECT balance FROM userdata WHERE user_id={user_id}").fetchone()[0]
    treasury = cur.execute("SELECT treasury FROM globaldata").fetchone()[0]

    if place != "–ñ–∏–≤–±–∞–Ω–∫":
        return

    if balance>=amount:
        cur.execute(f"UPDATE globaldata SET treasury=treasury+{amount}"); conn.commit()
        cur.execute(f"UPDATE userdata SET balance=balance-{amount} WHERE user_id={user_id}"); conn.commit()
        await call.answer('success.', show_alert=True) #todo better answer
    else:
        await call.message.answer("&#10060; –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</i>", parse_mode="html")

    await state_balance(call)
    await bot.delete_message(call.message.chat.id, call.message.message_id)

async def economics(call: CallbackQuery):
    treasury = cur.execute("SELECT treasury FROM globaldata").fetchone()[0]
    try:
        balance = cur.execute(
            "SELECT clan_balance FROM clandata WHERE clan_id=-1001395868701"
        ).fetchone()[0]
    except TypeError:
        logger.warning('game club does not exists or bot not added to the chat')
        balance = 0
    lastfill = cur.execute("SELECT lastfill FROM globaldata").fetchone()[0]
    coef = 1.5 #todo cur.execute("SELECT coef FROM globaldata").fetchone()[0]

    diff = time.time() - lastfill
    h = floor(diff/3600)
    m = floor(diff%3600/60)
    s = floor(diff%3600%60)

    limits = ''

    for item in limeteds:
        limits += f'\n{ITEMS[item][0]} {ITEMS[item][2]} - '
        item_left = cur.execute(f"SELECT {item} FROM globaldata").fetchone()[0]

        limits += '–¥–µ—Ñ–∏—Ü–∏—Ç' if item_left <= 0 else str(item_left)
    return await call.message.answer(f'<i><b>&#128202; –≠–ö–û–ù–û–ú–ò–ö–ê –ñ–ò–í–û–ü–û–õ–ò–°–ê</b>\n\
    \n&#128184; <b>–§–∏–Ω–∞–Ω—Å—ã</b>\
    \n&#128176; –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞–∑–Ω–∞ - <b>${treasury}</b>\
    \n&#127918; –ë–∞–ª–∞–Ω—Å –ò–≥—Ä–æ–≤–æ–≥–æ –∫–ª—É–±–∞ - <b>${balance}</b>\n\
    \n&#127978; <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–º</b>{limits}\n\
    \n&#128666; –ó–∞–≤–æ–∑ —Ç–æ–≤–∞—Ä–∞ –≤ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≤–æ–∑ –±—ã–ª {h} —á–∞—Å–æ–≤ {m} –º–∏–Ω—É—Ç {s} —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥\n\n\
    &#128176; <b>–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫</b>\
    \n–†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {round(1//coef, 2)}</i>', parse_mode='html')
            