import contextlib
import random
import asyncio

from ...database import cur

from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
)

from ...resources import RESOURCES


async def farm(call: CallbackQuery):
    '''
    Callback for farm menu

    :param call - callback:
    '''
    user_id = call.from_user.id
    cow = cur.select("cow", "userdata").where(user_id=user_id).one()
    milk = cur.select("milk", "userdata").where(user_id=user_id).one()
    current_place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    if current_place != '–†–æ—â–∞':
        return await call.answer(
                text=(
                    'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                    '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
                ),
                show_alert=True
            )

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton(
            text='ü•õ –ü–æ–¥–æ–∏—Ç—å –∫–æ—Ä–æ–≤—É',
            callback_data='milk_cow'
        ),
        InlineKeyboardButton(
            text='‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥',
            callback_data='city'
        )
    )

    await call.message.answer(
        '<i>üåæ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –§–µ—Ä–º—É!</b>\n\n'
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–æ–∏—Ç—å —Å–≤–æ—é –∫–æ—Ä–æ–≤—É –∏ –ø–æ–ª—É—á–∏—Ç—å –º–æ–ª–æ–∫–æ. '
        '–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–π–∫–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 10 —Å–µ–∫—É–Ω–¥, –ø—Ä–∏ —ç—Ç–æ–º —É –≤–∞—Å '
        '–∑–∞–±–∏—Ä–∞–µ—Ç—Å—è –æ–¥–Ω–∞ –∫–æ—Ä–æ–≤–∞. –ê –≤–∑–∞–º–µ–Ω –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 1 —Å—Ç–∞–∫–∞–Ω –º–æ–ª–æ–∫–∞, '
        '–∫–æ—Ç–æ—Ä–æ–µ –∑–∞—Ç–µ–º –º–æ–∂–µ—Ç–µ –≤—ã–ø–∏—Ç—å.\n\n'
        f'–£ –≤–∞—Å:\n üêÑ <b>{cow}</b> –∫–æ—Ä–æ–≤\n ü•õ <b>{milk}</b> —Å—Ç–∞–∫–∞–Ω–æ–≤ –º–æ–ª–æ–∫–∞</i>',
        reply_markup=markup
    )


async def milk_cow(call: CallbackQuery):
    '''
    Callback for cow milking

    :param call - callback:
    '''
    user_id = call.from_user.id
    cow = cur.select("cow", "userdata").where(user_id=user_id).one()
    current_place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    if current_place != '–†–æ—â–∞':
        return await call.answer(
                text=(
                    'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                    '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
                ),
                show_alert=True
            )

    if cow < 1:
        return await call.answer(
                text=(
                    '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—Ä–æ–≤. –ò—Ö –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –∑–æ–æ–ø–∞—Ä–∫–µ'
                ),
                show_alert=True
            )

    await call.answer(
        text='ü•õ –î–æ–π–∫–∞ –∫–æ—Ä–æ–≤—ã –Ω–∞—á–∞–ª–∞—Å—å... –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥',
        show_alert=True
    )

    cur.update("userdata").add(cow=-1).where(user_id=user_id).commit()
    await asyncio.sleep(10)
    cur.update("userdata").add(milk=1).where(user_id=user_id).commit()

    with contextlib.suppress(Exception):
        await call.message.delete()
    await farm(call)


async def mineshaft(call: CallbackQuery):
    '''
    Callback for mineshaft menu

    :param call - callback:
    '''
    user_id = call.from_user.id
    pickaxe = cur.select("pickaxe", "userdata").where(user_id=user_id).one()
    current_place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    if current_place != '–ü–æ—Å—ë–ª–æ–∫ –ì–æ—Ä–Ω—ã–π':
        return await call.answer(
                text=(
                    'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                    '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
                ),
                show_alert=True
            )

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton(
            text='‚õè –í —à–∞—Ö—Ç—É',
            callback_data='go_mining'
        ),
        InlineKeyboardButton(
            text='‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥',
            callback_data='city'
        )
    )

    await call.message.answer(
        '<i>‚õè <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –®–∞—Ö—Ç—É!</b>\n\n'
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–æ–∏—Ç—å —Å–≤–æ—é –∫–æ—Ä–æ–≤—É –∏ –ø–æ–ª—É—á–∏—Ç—å –º–æ–ª–æ–∫–æ. '
        '–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±—ã—á–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 1 –º–∏–Ω—É—Ç—É, –ø—Ä–∏ —ç—Ç–æ–º —É –≤–∞—Å '
        '–∑–∞–±–∏—Ä–∞–µ—Ç—Å—è –æ–¥–Ω–∞ –∫–∏—Ä–∫–∞. –ê –≤–∑–∞–º–µ–Ω –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ '
        '–∏—Å–∫–æ–ø–∞–µ–º—ã–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∏ –æ–ø—ã—Ç.\n\n'
        f'‚õè –£ –≤–∞—Å <b>{pickaxe}</b> –∫–∏—Ä–æ–∫</i>',
        reply_markup=markup
    )


async def go_mining(call: CallbackQuery):
    '''
    Callback for mining

    :param call - callback:
    '''
    user_id = call.from_user.id
    pickaxe = cur.select("pickaxe", "userdata").where(user_id=user_id).one()
    current_place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    if current_place != '–ü–æ—Å—ë–ª–æ–∫ –ì–æ—Ä–Ω—ã–π':
        return await call.answer(
                text=(
                    'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                    '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
                ),
                show_alert=True
            )

    if pickaxe < 1:
        return await call.answer(
                text=(
                    '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∏—Ä–æ–∫. –ò—Ö –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –ê–≥–∑–∞–º–æ–≥–æ—Ä—Å–∫–µ'
                ),
                show_alert=True
            )

    await call.answer(
        text='‚õè –ü–æ—Ö–æ–¥ –≤ —à–∞—Ö—Ç—É –Ω–∞—á–∞–ª—Å—è... –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30-60 —Å–µ–∫—É–Ω–¥',
        show_alert=True
    )

    cur.update("userdata").add(pickaxe=-1).where(user_id=user_id).commit()
    await asyncio.sleep(random.randint(1, 2))

    text = ''
    luck = 0
    for resource in RESOURCES:
        name = RESOURCES[resource].ru_name
        chance = RESOURCES[resource].chance
        maximum = RESOURCES[resource].maximum
        if random.uniform(0, 1) < chance:
            amount = random.randint(1, maximum)
            text += f'\n{name} - <b>{amount}</b>'
            if resource in ['iron', 'gold']:
                luck = 1
            elif resource in ['gem', 'topaz']:
                luck = 2
            cur.update("userdata").add(**{resource: amount}).where(
                user_id=user_id).commit()

    points = random.randint(2, 4)
    cur.update("userdata").add(xp=points).where(
                user_id=user_id).commit()

    if text == '':
        text = (
            'üòì –í—ã –Ω–µ –¥–æ–±—ã–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö.'
        )
    else:
        match (luck):
            case 0:
                additional_text = '–í–∞–º —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤–µ–∑—ë—Ç. –í–æ—Ç, —á—Ç–æ –≤—ã –¥–æ–±—ã–ª–∏:'
            case 1:
                additional_text = '–í—ã —Å–µ–≥–æ–¥–Ω—è –≤ —É–¥–∞—Ä–µ! –í–æ—Ç, —á—Ç–æ –≤—ã –¥–æ–±—ã–ª–∏:'
            case 2:
                additional_text = '–í–∞–º –∫—Ä—É–ø–Ω–æ –ø–æ–≤–µ–∑–ª–æ! –í–æ—Ç, —á—Ç–æ –≤—ã –¥–æ–±—ã–ª–∏:'
        text = f'<b>{additional_text}</b>\n{text}'

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton(
            text='‚õè –ó–∞–Ω–æ–≤–æ',
            callback_data='go_mining'
        ),
        InlineKeyboardButton(
            text='‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∞—Ö—Ç—É',
            callback_data='mineshaft'
        )
    )
    with contextlib.suppress(Exception):
        await call.message.delete()
    await call.message.answer(
        f'<i>{text}\n\nüí° –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—á–∫–∏ –æ–ø—ã—Ç–∞: <b>{points}</b></i>',
        reply_markup=markup
    )


async def resource_market(call: CallbackQuery) -> None:
    '''
    Callback for mineral collection point

    :param call - callback:
    '''
    user_id = call.from_user.id
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    if place != '–ì–ª–∏–Ω—è–Ω–∫–∞':
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=1)
    resourcelist = []

    for resource in RESOURCES:
        if isinstance(RESOURCES[resource].cost, int):
            cost = RESOURCES[resource].cost
            assert isinstance(cost, int)
            amount = cur.select(resource, "userdata").where(
                user_id=user_id).one()
            if amount >= 1:
                resourcelist.append(
                    InlineKeyboardButton(
                        text=f'{RESOURCES[resource].ru_name}'
                             f' (x{amount}) - ${cost}',
                        callback_data=f'sellresource_{resource}'
                    )
                )

    if not resourcelist:
        desc = 'üö´ –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏'
    else:
        markup.add(*resourcelist)
        desc = (
            '<b>üè¨ –ü—É–Ω–∫—Ç —Å–±–æ—Ä–∞</b> - –º–µ—Å—Ç–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å '
            '–ø–æ–ª–µ–∑–Ω—ã–µ –∏—Å–∫–æ–ø–∞–µ–º—ã–µ, –¥–æ–±—ã—Ç—ã–µ –≤ —à–∞—Ö—Ç–µ. –û—á–µ–Ω—å —É–¥–æ–±–Ω–æ!\n\n‚ùó –ó–¥'
            '–µ—Å—å –≤—ã <b>–ø—Ä–æ–¥–∞—ë—Ç–µ</b> —Ä–µ—Å—É—Ä—Å—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É, –∞ –Ω–µ –ø–æ–∫—É–ø–∞–µ—Ç–µ. –î–µ'
            '–Ω—å–≥–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∞ —Ä–µ—Å—É—Ä—Å—ã –Ω–∏–∫–æ–º—É –Ω–µ –¥–æ—Å—Ç–∞—é—Ç—Å—è'
        )
    markup.add(
        InlineKeyboardMarkup(
            text='‚óÄ –ù–∞–∑–∞–¥ –≤ –≥–æ—Ä–æ–¥',
            callback_data='city'
        )
    )
    await call.message.answer(f'<i>{desc}</i>', reply_markup=markup)
