import contextlib
import asyncio

from ...database import cur

from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
)


async def farm(call: CallbackQuery):
    '''
    Callback for farm menu

    :param call - callback:
    '''
    user_id = call.from_user.id
    cow = cur.select("cow", "userdata").where(user_id=user_id).one()
    milk = cur.select("milk", "userdata").where(user_id=user_id).one()
    current_place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    if current_place != '–†–æ—â–∞':
        return await call.answer(
                text=(
                    'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                    '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
                ),
                show_alert=True
            )

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton(
            text='ü•õ –ü–æ–¥–æ–∏—Ç—å –∫–æ—Ä–æ–≤—É',
            callback_data='milk_cow'
        ),
        InlineKeyboardButton(
            text='‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥',
            callback_data='city'
        )
    )

    await call.message.answer(
        '<i>üåæ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –§–µ—Ä–º—É!</b>\n\n'
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–æ–∏—Ç—å —Å–≤–æ—é –∫–æ—Ä–æ–≤—É –∏ –ø–æ–ª—É—á–∏—Ç—å –º–æ–ª–æ–∫–æ. '
        '–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–π–∫–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 10 —Å–µ–∫—É–Ω–¥, –ø—Ä–∏ —ç—Ç–æ–º —É –≤–∞—Å '
        '–∑–∞–±–∏—Ä–∞–µ—Ç—Å—è –æ–¥–Ω–∞ –∫–æ—Ä–æ–≤–∞. –ê –≤–∑–∞–º–µ–Ω –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 1 —Å—Ç–∞–∫–∞–Ω –º–æ–ª–æ–∫–∞, '
        '–∫–æ—Ç–æ—Ä–æ–µ –∑–∞—Ç–µ–º –º–æ–∂–µ—Ç–µ –≤—ã–ø–∏—Ç—å.\n\n'
        f'–£ –≤–∞—Å:\n üêÑ <b>{cow}</b> –∫–æ—Ä–æ–≤\n ü•õ <b>{milk}</b> —Å—Ç–∞–∫–∞–Ω–æ–≤ –º–æ–ª–æ–∫–∞</i>',
        reply_markup=markup
    )


async def milk_cow(call: CallbackQuery):
    '''
    Callback for farm menu

    :param call - callback:
    '''
    user_id = call.from_user.id
    cow = cur.select("cow", "userdata").where(user_id=user_id).one()
    current_place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    if current_place != '–†–æ—â–∞':
        return await call.answer(
                text=(
                    'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                    '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
                ),
                show_alert=True
            )

    if cow < 1:
        return await call.answer(
                text=(
                    '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—Ä–æ–≤. –ò—Ö –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –∑–æ–æ–ø–∞—Ä–∫–µ'
                ),
                show_alert=True
            )

    await call.answer(
        text='ü•õ –î–æ–π–∫–∞ –∫–æ—Ä–æ–≤—ã –Ω–∞—á–∞–ª–∞—Å—å... –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥',
        show_alert=True
    )

    cur.update("userdata").add(cow=-1).where(user_id=user_id).commit()
    await asyncio.sleep(10)
    cur.update("userdata").add(milk=1).where(user_id=user_id).commit()

    with contextlib.suppress(Exception):
        await call.message.delete()
    await farm(call)
