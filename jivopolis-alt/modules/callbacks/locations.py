import contextlib
import random
import asyncio

from ... import utils

from ...database import cur
from ...database.functions import (
    achieve, cancel_button, get_weather, Weather, weather_damage
)

from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
)

from ...misc import current_time, get_time_units

from ...misc.config import countries, capitals, oscar_levels, tramroute

from ...resources import RESOURCES
from ...items import ITEMS


async def farm(call: CallbackQuery):
    '''
    Callback for farm menu

    :param call - callback:
    '''
    user_id = call.from_user.id
    cow = cur.select("cow", "userdata").where(user_id=user_id).one()
    milk = cur.select("milk", "userdata").where(user_id=user_id).one()

    if not await utils.check_current(user_id, "–†–æ—â–∞", call):
        return

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='ü•õ –ü–æ–¥–æ–∏—Ç—å –∫–æ—Ä–æ–≤—É',
            callback_data='milk_cow'
        ),
        InlineKeyboardButton(
            text='‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥',
            callback_data='city'
        )
    )

    await call.message.answer(
        '<i>üåæ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –§–µ—Ä–º—É!</b>\n\n'
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–æ–∏—Ç—å —Å–≤–æ—é –∫–æ—Ä–æ–≤—É –∏ –ø–æ–ª—É—á–∏—Ç—å –º–æ–ª–æ–∫–æ. '
        '–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–π–∫–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 10 —Å–µ–∫—É–Ω–¥, –ø—Ä–∏ —ç—Ç–æ–º —É –≤–∞—Å '
        '–∑–∞–±–∏—Ä–∞–µ—Ç—Å—è –æ–¥–Ω–∞ –∫–æ—Ä–æ–≤–∞. –ê –≤–∑–∞–º–µ–Ω –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 1 —Å—Ç–∞–∫–∞–Ω –º–æ–ª–æ–∫–∞, '
        '–∫–æ—Ç–æ—Ä–æ–µ –∑–∞—Ç–µ–º –º–æ–∂–µ—Ç–µ –≤—ã–ø–∏—Ç—å.\n\n'
        f'–£ –≤–∞—Å:\n üêÑ <b>{cow}</b> –∫–æ—Ä–æ–≤\n ü•õ <b>{milk}</b> —Å—Ç–∞–∫–∞–Ω–æ–≤ –º–æ–ª–æ–∫–∞</i>',
        reply_markup=markup
    )


async def milk_cow(call: CallbackQuery):
    '''
    Callback for cow milking

    :param call - callback:
    '''
    user_id = call.from_user.id
    cow = cur.select("cow", "userdata").where(user_id=user_id).one()

    if not await utils.check_current(user_id, "–†–æ—â–∞", call):
        return

    if cow < 1:
        return await call.answer(
                text=(
                    '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—Ä–æ–≤. –ò—Ö –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –∑–æ–æ–ø–∞—Ä–∫–µ'
                ),
                show_alert=True
            )

    await call.answer(
        text='ü•õ –î–æ–π–∫–∞ –∫–æ—Ä–æ–≤—ã –Ω–∞—á–∞–ª–∞—Å—å... –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥',
        show_alert=True
    )

    cur.update("userdata").add(cow=-1).where(user_id=user_id).commit()
    await asyncio.sleep(10)
    cur.update("userdata").add(milk=1).where(user_id=user_id).commit()

    with contextlib.suppress(Exception):
        await call.message.delete()
    await farm(call)


async def mineshaft(call: CallbackQuery):
    '''
    Callback for mineshaft menu

    :param call - callback:
    '''
    user_id = call.from_user.id
    pickaxe = cur.select("pickaxe", "userdata").where(user_id=user_id).one()

    if not await utils.check_current(user_id, "–ü–æ—Å—ë–ª–æ–∫ –ì–æ—Ä–Ω—ã–π", call):
        return

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton(
            text='‚õè –í —à–∞—Ö—Ç—É',
            callback_data='go_mining'
        ),
        InlineKeyboardButton(
            text='‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥',
            callback_data='city'
        )
    )

    await call.message.answer(
        '<i>‚õè <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –®–∞—Ö—Ç—É!</b>\n\n'
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫–æ–ø–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. '
        '–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±—ã—á–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 1 –º–∏–Ω—É—Ç—ã, –ø—Ä–∏ —ç—Ç–æ–º —É –≤–∞—Å '
        '–∑–∞–±–∏—Ä–∞–µ—Ç—Å—è –æ–¥–Ω–∞ –∫–∏—Ä–∫–∞. –ê –≤–∑–∞–º–µ–Ω –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ '
        '–∏—Å–∫–æ–ø–∞–µ–º—ã–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∏ –æ–ø—ã—Ç.\n\n'
        f'‚õè –£ –≤–∞—Å <b>{pickaxe}</b> –∫–∏—Ä–æ–∫</i>',
        reply_markup=markup
    )


async def owlpizza(call: CallbackQuery):
    '''
    Callback for Owlpizza pizza shop menu

    :param call - callback:
    '''
    user_id = call.from_user.id

    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    if place != '–ñ–æ–¥–∏–Ω–æ':
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton(
            text='üçï –ó–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É',
            callback_data='owlpizza_order'
        ),
        InlineKeyboardButton(
            text='üõµ –†–∞–±–æ—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –ø–∏—Ü—Ü—ã',
            callback_data='owlpizza_work'
        ),
        InlineKeyboardButton(
            text='‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥',
            callback_data='city'
        )
    )

    await call.message.answer(
        '<i>üçï <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –ø–∏—Ü—Ü–µ—Ä–∏—é!</b>\n\n'
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–∏—Ü—Ü—É –∏–ª–∏ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É –∫—É—Ä—å–µ—Ä–æ–º</i>',
        reply_markup=markup
    )


async def owlpizza_work(call: CallbackQuery):
    '''
    Callback for Owlpizza delivery work menu

    :param call - callback:
    '''
    user_id = call.from_user.id

    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    if place != '–ñ–æ–¥–∏–Ω–æ':
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton(
            text='‚úî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É',
            callback_data='owlpizza_startwork'
        ),
        InlineKeyboardButton(
            text='‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è',
            callback_data='cancel_action'
        )
    )

    await call.message.answer(
        '<i>üõµ <b>–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã</b>\n\n–ù–µ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑'
        ' <b>7 –º–∏–Ω—É—Ç</b> –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã –æ–±—è–∑–∞–Ω—ã –ø—Ä–∏–±—ã—Ç—å –≤ –º–µ—Å—Ç–Ω–æ—Å—Ç—å'
        ', –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–∞. –í–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–µ–∑–¥–∫–∞ –Ω–∞ —Ç—Ä–∞–º–≤–∞–µ'
        ', –ø–æ—ç—Ç–æ–º—É –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ –±–∏–ª–µ—Ç–∞—Ö.\n\n–ü–æ –ø—Ä–∏–±—ã—Ç–∏–∏'
        ' –Ω–∞ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–π–¥–∏—Ç–µ –≤ –ì–æ—Ä–æ–¥. –ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ '
        '–∑–∞–¥–∞–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç <b>$150</b> –¥–æ <b>$300</b>. '
        '–ù–æ –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ–ø–æ–∑–¥–∞–Ω–∏–µ –¥–∞–∂–µ –Ω–∞ —Å–µ–∫—É–Ω–¥—É –∫—Ä–∏—Ç–∏—á–Ω–æ!\n\n'
        '–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É". –£–¥–∞—á–∏!\n\n'
        '<u>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ.</u> –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ '
        '–≥—Ä–∞–Ω–∏—Ü–∞—Ö –ë–æ—Ä–∏—Å–æ–≤—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞.\n\n–†–∞–±–æ—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º –º–æ–∂–Ω–æ —Ä–∞–∑ '
        '–≤ 2 —á–∞—Å–∞</i>',
        reply_markup=markup
    )


async def owlpizza_startwork(call: CallbackQuery):
    '''
    Callback for pizza delivery work start

    :param call - callback:
    '''
    user_id = call.from_user.id

    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    if place != '–ñ–æ–¥–∏–Ω–æ':
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    lastdel = cur.select("last_delivery", "userdata").where(
        user_id=user_id).one()

    if lastdel:
        return await call.answer(
            text=(
                'ü¶• –í—ã –∂–µ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ... –û—Ç–≤–æ–∑–∏—Ç–µ –∑–∞–∫–∞–∑ —Å–∫–æ—Ä–µ–µ!'
            ),
            show_alert=True
        )

    last = cur.select("last_owlpizza", "userdata").where(
        user_id=user_id).one()
    if last + 3600*2 > current_time():
        return await call.answer(
            text=(
                'üôÖ‚Äç‚ôÇÔ∏è –†–∞–±–æ—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 2 —á–∞—Å–∞'
            ),
            show_alert=True
        )

    difference = random.randint(2, 6)*random.choice([1, -1])
    destination = tramroute[tramroute.index('–ñ–æ–¥–∏–Ω–æ')+difference]
    cur.update("userdata").set(delivery_place=destination).where(
        user_id=user_id).commit()
    cur.update("userdata").set(last_delivery=current_time()+7*60).where(
        user_id=user_id).commit()
    cur.update("userdata").set(last_owlpizza=current_time()).where(
        user_id=user_id).commit()

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton(
            text='üõµ –°–∫–æ—Ä–µ–µ –≤ –≥–æ—Ä–æ–¥!',
            callback_data='city'
        )
    )
    await call.message.answer(
        f'<i>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ - <b>{destination}</b> (–ë–æ—Ä–∏—Å–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω).'
        ' –£ –≤–∞—Å 7 –º–∏–Ω—É—Ç, –ø–æ—Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å –Ω–∞ —Ç—Ä–∞–º–≤–∞–π –∏–ª–∏ —ç–ª–µ–∫—Ç—Ä–∏—á–∫—É!</i>',
        reply_markup=markup
    )


async def go_mining(call: CallbackQuery):
    '''
    Callback for mining

    :param call - callback:
    '''
    user_id = call.from_user.id
    pickaxe = cur.select("pickaxe", "userdata").where(user_id=user_id).one()

    if not await utils.check_current(user_id, "–ü–æ—Å—ë–ª–æ–∫ –ì–æ—Ä–Ω—ã–π", call):
        return

    if current_time() - cur.select("last_mine", "userdata").where(
            user_id=user_id).one() < 60:
        return await call.answer(
            "üò† –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —à–∞—Ö—Ç–æ–π –º–æ–∂–Ω–æ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É",
            show_alert=True
        )

    if pickaxe < 1:
        return await call.answer(
                text=(
                    '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∏—Ä–æ–∫. –ò—Ö –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –ê–≥–∑–∞–º–æ–≥–æ—Ä—Å–∫–µ'
                ),
                show_alert=True
            )

    await call.answer(
        text='‚õè –ü–æ—Ö–æ–¥ –≤ —à–∞—Ö—Ç—É –Ω–∞—á–∞–ª—Å—è... –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30-60 —Å–µ–∫—É–Ω–¥',
        show_alert=True
    )

    cur.update("userdata").add(pickaxe=-1).where(user_id=user_id).commit()
    cur.update("userdata").set(last_mine=current_time()).where(
        user_id=user_id).commit()
    await asyncio.sleep(random.randint(30, 60))

    text = ''
    luck = 0
    for key in RESOURCES:
        resource = RESOURCES[key]
        if not resource.chance:
            continue
        if random.uniform(0, 1) < resource.chance:
            amount = random.randint(1, resource.maximum)
            text += f'\n{resource.ru_name} - <b>{amount}</b>'
            if key in ['iron', 'gold']:
                luck = 1
            elif key in ['gem', 'topaz']:
                luck = 2
            cur.update("userdata").add(**{key: amount}).where(
                user_id=user_id).commit()

    points = random.randint(2, 4)
    cur.update("userdata").add(xp=points).where(
                user_id=user_id).commit()

    if text == '':
        text = 'üòì –í—ã –Ω–µ –¥–æ–±—ã–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö.'
    else:
        match (luck):
            case 0:
                additional_text = '–í–∞–º —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤–µ–∑—ë—Ç. –í–æ—Ç, —á—Ç–æ –≤—ã –¥–æ–±—ã–ª–∏:'
            case 1:
                additional_text = '–í—ã —Å–µ–≥–æ–¥–Ω—è –≤ —É–¥–∞—Ä–µ! –í–æ—Ç, —á—Ç–æ –≤—ã –¥–æ–±—ã–ª–∏:'
            case 2:
                additional_text = '–í–∞–º –∫—Ä—É–ø–Ω–æ –ø–æ–≤–µ–∑–ª–æ! –í–æ—Ç, —á—Ç–æ –≤—ã –¥–æ–±—ã–ª–∏:'
        text = f'<b>{additional_text}</b>\n{text}'

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='‚õè –ó–∞–Ω–æ–≤–æ',
            callback_data='go_mining'
        ),
        InlineKeyboardButton(
            text='‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∞—Ö—Ç—É',
            callback_data='mineshaft'
        )
    )
    with contextlib.suppress(Exception):
        await call.message.delete()
    await call.message.answer(
        f'<i>{text}\n\nüí° –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—á–∫–∏ –æ–ø—ã—Ç–∞: <b>{points}</b></i>',
        reply_markup=markup
    )


async def resource_market(call: CallbackQuery) -> None:
    '''
    Callback for mineral collection point

    :param call - callback:
    '''
    user_id = call.from_user.id
    place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()

    if place != '–ì–ª–∏–Ω—è–Ω–∫–∞':
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=1)
    resourcelist = []

    for resource in RESOURCES:
        if isinstance(RESOURCES[resource].cost, int):
            cost = RESOURCES[resource].cost
            assert isinstance(cost, int)
            amount = cur.select(resource, "userdata").where(
                user_id=user_id).one()
            if amount >= 1:
                resourcelist.append(
                    InlineKeyboardButton(
                        text=f'{RESOURCES[resource].ru_name}'
                             f' (x{amount}) - ${cost}',
                        callback_data=f'sellresource_{resource}'
                    )
                )

    if not resourcelist:
        desc = 'üö´ –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏'
    else:
        markup.add(*resourcelist)
        desc = (
            '<b>üè¨ –ü—É–Ω–∫—Ç —Å–±–æ—Ä–∞</b> - –º–µ—Å—Ç–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å '
            '–ø–æ–ª–µ–∑–Ω—ã–µ –∏—Å–∫–æ–ø–∞–µ–º—ã–µ, –¥–æ–±—ã—Ç—ã–µ –≤ —à–∞—Ö—Ç–µ. –û—á–µ–Ω—å —É–¥–æ–±–Ω–æ!\n\n‚ùó –ó–¥'
            '–µ—Å—å –≤—ã <b>–ø—Ä–æ–¥–∞—ë—Ç–µ</b> —Ä–µ—Å—É—Ä—Å—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É, –∞ –Ω–µ –ø–æ–∫—É–ø–∞–µ—Ç–µ. –î–µ'
            '–Ω—å–≥–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∞ —Ä–µ—Å—É—Ä—Å—ã –Ω–∏–∫–æ–º—É –Ω–µ –¥–æ—Å—Ç–∞—é—Ç—Å—è'
        )
    markup.add(
        InlineKeyboardMarkup(
            text='‚óÄ –ù–∞–∑–∞–¥ –≤ –≥–æ—Ä–æ–¥',
            callback_data='city'
        )
    )
    await call.message.answer(f'<i>{desc}</i>', reply_markup=markup)


async def factory(call: CallbackQuery):
    '''
    Callback for factory menu

    :param call - callback:
    '''
    user_id = call.from_user.id
    times = cur.select("gears_today", "userdata").where(user_id=user_id).one()

    await utils.check_places(user_id, call, '–ë–æ—Ä–∏—Å–æ–≤—Å–∫–∏–π –∑–∞–≤–æ–¥',
                             '–ö–æ—Ç–∞–π—Å–∫–∏–π —ç–ª–µ–∫—Ç—Ä–æ–∑–∞–≤–æ–¥')

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='‚öô –®–µ—Å—Ç–µ—Ä—ë–Ω–∫–∏',
            callback_data='play_gears'
        ),
        InlineKeyboardButton(
            text='‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥',
            callback_data='city'
        )
    )

    await call.message.answer(
        '<i>üè≠ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ó–∞–≤–æ–¥</b>\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å'
        ' –Ω–µ–º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏-–∏–≥—Ä—É. –£—á—Ç–∏—Ç–µ, —á—Ç–æ —É –≤–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å'
        ' –Ω–µ –º–µ–Ω–µ–µ $10 –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å.\n\n–ò–≥—Ä–∞—Ç—å –º–æ–∂–Ω–æ –Ω–µ –±–æ–ª–µ–µ '
        f'10 —Ä–∞–∑ –≤ –¥–µ–Ω—å. –°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –∏–≥—Ä–∞–ª–∏ <b>{times}</b> —Ä–∞–∑</i>',
        reply_markup=markup
    )


async def play_gears(call: CallbackQuery):
    '''
    Callback for a gears game

    :param call - callback:
    '''
    user_id = call.from_user.id
    times = cur.select("gears_today", "userdata").where(user_id=user_id).one()
    balance = cur.select("balance", "userdata").where(user_id=user_id).one()

    await utils.check_places(user_id, call, '–ë–æ—Ä–∏—Å–æ–≤—Å–∫–∏–π –∑–∞–≤–æ–¥',
                             '–ö–æ—Ç–∞–π—Å–∫–∏–π —ç–ª–µ–∫—Ç—Ä–æ–∑–∞–≤–æ–¥')

    if balance < 10:
        return await call.answer(
            text='‚ùå –í–∞–º –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã $10, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É',
            show_alert=True
        )

    if times >= 10:
        return await call.answer(
            text=(
                '‚ùå –í –®–µ—Å—Ç–µ—Ä—ë–Ω–∫–∏ –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 —Ä–∞–∑ –≤ –¥–µ–Ω—å'
            ),
            show_alert=True
        )
    cur.update("userdata").add(gears_today=1).where(user_id=user_id).commit()

    direction = random.choice(['left', 'right'])
    arrow = '‚Ü©' if direction == 'left' else '‚Ü™'
    amount = random.randint(2, 7)

    markup = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton(
            text='‚Ü©',
            callback_data=f'answer_gears left {direction} {amount}'
        ),
        InlineKeyboardButton(
            text='‚Ü™',
            callback_data=f'answer_gears right {direction} {amount}'
        )
    )

    question = (
        '<b>–í –∫–∞–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É –±—É–¥–µ—Ç –≤—Ä–∞—â–∞—Ç—å—Å—è –±–µ–ª—ã–π –∫—Ä—É–≥?</b>\n\n'
        f'{arrow}{"‚öô"*amount}‚ö™'
    )
    task_message = await call.message.answer(
        f'<i>{question}</i>',
        reply_markup=markup
    )

    for seconds in range(10):
        if cur.select("task_message", "userdata").where(
                user_id=user_id).one() == task_message['message_id']:
            return
        await task_message.edit_text(
            f'<i>{question}\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –ø–æ–∫–∞ –≤—Å–µ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∏ –Ω–µ '
            f'–∑–∞–ø–æ–ª–Ω—è—Ç—Å—è:\n{"üî≥"*seconds}{"‚¨ú"*(9-seconds)}\n\n'
            'üí≤ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>$15</b></i>',
            reply_markup=markup
        )
        await asyncio.sleep(1)

    if cur.select("task_message", "userdata").where(
            user_id=user_id).one() != task_message['message_id']:
        no_answer_markup = InlineKeyboardMarkup(row_width=2)
        if (
            (amount % 2 == 1 and direction == 'left')
            or (amount % 2 == 0 and direction == 'right')
        ):
            correct_answer = '‚Ü©'
            no_answer_markup.add(
                InlineKeyboardButton(
                    text='‚Ü©‚úÖ',
                    callback_data='late_answer'
                ),
                InlineKeyboardButton(
                    text='‚Ü™‚ùå',
                    callback_data='late_answer'
                )
            )
        else:
            correct_answer = '‚Ü™'
            no_answer_markup.add(
                InlineKeyboardButton(
                    text='‚Ü©‚ùå',
                    callback_data='late_answer'
                ),
                InlineKeyboardButton(
                    text='‚Ü™‚úÖ',
                    callback_data='late_answer'
                )
            )
        no_answer_markup.add(
            InlineKeyboardButton(
                text='üîÑ –ó–∞–Ω–æ–≤–æ',
                callback_data='play_gears'
            )
        )

        cur.update("userdata").add(balance=-10).where(user_id=user_id).commit()

        await task_message.edit_text(
            f'<i>{question}\n\n<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}</b>'
            '\n\n<code>–í—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å.\nüí≤ –®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ '
            '–æ—Ç–≤–µ—Ç–∞: $10</code></i>',
            reply_markup=no_answer_markup
        )
        await call.answer('–†–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–µ–Ω')


async def answer_gears(call: CallbackQuery,
                       answer: str, direction: str, amount: int):
    '''
    Callback for a gears game answer

    :param call - callback:
    :param answer - user's answer:
    :param direction - direction of the first arrow in the question:
    :param amount - amount of gears in the question:
    '''
    user_id = call.from_user.id
    times = cur.select("gears_today", "userdata").where(user_id=user_id).one()
    balance = cur.select("balance", "userdata").where(user_id=user_id).one()

    await utils.check_places(user_id, call, '–ë–æ—Ä–∏—Å–æ–≤—Å–∫–∏–π –∑–∞–≤–æ–¥',
                             '–ö–æ—Ç–∞–π—Å–∫–∏–π —ç–ª–µ–∫—Ç—Ä–æ–∑–∞–≤–æ–¥')

    if balance < 10:
        return await call.answer(
            text=(
                '‚ùå –í–∞–º –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã $10, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É'
            ),
            show_alert=True
        )

    if times >= 10:
        return await call.answer(
            text=(
                '‚ùå –í –®–µ—Å—Ç–µ—Ä—ë–Ω–∫–∏ –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 —Ä–∞–∑ –≤ –¥–µ–Ω—å'
            ),
            show_alert=True
        )

    cur.update("userdata").set(task_message=call.message.message_id).where(
        user_id=user_id).commit()

    if amount % 2 == 1:
        correct_answer = direction
    else:
        correct_answer = 'left' if direction == 'right' else 'right'
    correct_arrow = '‚Ü©' if correct_answer == 'left' else '‚Ü™'
    direction_arrow = '‚Ü©' if direction == 'left' else '‚Ü™'

    left_text = '‚Ü©'
    right_text = '‚Ü™'

    if correct_answer == answer:
        if answer == 'left':
            left_text = '‚Ü©‚úÖ'
        else:
            right_text = '‚Ü™‚úÖ'
        reward = 15
        reward_text = '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤–µ—Ä–Ω–æ.\nüí≤ –ù–∞–≥—Ä–∞–¥–∞: $15'
    else:
        if answer == 'left':
            left_text = '‚Ü©‚ùå'
        else:
            right_text = '‚Ü™‚ùå'
        reward = -10
        reward_text = '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ.\nüí≤ –®—Ç—Ä–∞—Ñ: $10'

    markup = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton(
            text=left_text,
            callback_data='late_answer'
        ),
        InlineKeyboardButton(
            text=right_text,
            callback_data='late_answer'
        ),
        InlineKeyboardButton(
            text='üîÑ –ó–∞–Ω–æ–≤–æ',
            callback_data='play_gears'
        )
    )

    cur.update("userdata").add(balance=reward).where(user_id=user_id).commit()

    await call.message.edit_text(
        '<i><b>–í –∫–∞–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É –±—É–¥–µ—Ç –≤—Ä–∞—â–∞—Ç—å—Å—è –±–µ–ª—ã–π –∫—Ä—É–≥?</b>\n\n'
        f'{direction_arrow}{"‚öô"*amount}‚ö™\n\n<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: </b>'
        f'{correct_arrow}\n\n<code>{reward_text}</code></i>',
        reply_markup=markup
    )
    await call.answer('–†–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–µ–Ω')


async def university(call: CallbackQuery):
    '''
    Callback for university menu

    :param call - callback:
    '''
    user_id = call.from_user.id
    current_place = cur.select("current_place", "userdata").where(
        user_id=user_id).one()
    await utils.check_places(user_id, call, '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç',
                             '–ë–æ—Ä–∏—Å–æ–≤—Å–∫–∞—è –≥–∏–º–Ω–∞–∑–∏—è',
                             '–°—Ä–µ–¥–Ω—è—è —à–∫–æ–ª–∞ –°–º–∏–ª–æ–≤–∏—á–µ–π')

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='üó∫ –ì–µ–æ–≥—Ä–∞—Ñ–∏—è',
            callback_data='play_geo'
        ) if current_place == '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç' else
        InlineKeyboardButton(
            text='‚ûï –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
            callback_data='play_math'
        ),
        InlineKeyboardButton(
            text='‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥',
            callback_data='city'
        )
    )

    match(current_place):
        case '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç':
            school_name = '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç'
        case '–ë–æ—Ä–∏—Å–æ–≤—Å–∫–∞—è –≥–∏–º–Ω–∞–∑–∏—è':
            school_name = '–ì–∏–º–Ω–∞–∑–∏—é'
        case '–°—Ä–µ–¥–Ω—è—è —à–∫–æ–ª–∞ –°–º–∏–ª–æ–≤–∏—á–µ–π':
            school_name = '–®–∫–æ–ª—É'

    await call.message.answer(
        f'<i><b>üè´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {school_name}</b>\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ'
        ' –ø–æ–ª—É—á–∏—Ç—å –æ–ø—ã—Ç.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏-–∏–≥—Ä—É. –£—á—Ç–∏—Ç–µ, —á—Ç–æ —É –≤–∞—Å –¥–æ–ª–∂–Ω–æ'
        ' –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ $10 –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å</i>',
        reply_markup=markup
    )


async def play_math(call: CallbackQuery):
    '''
    Callback for a math game

    :param call - callback:
    '''
    user_id = call.from_user.id
    last_math = cur.select("last_math", "userdata").where(
        user_id=user_id).one()
    balance = cur.select("balance", "userdata").where(user_id=user_id).one()

    await utils.check_places(user_id, call, '–ë–æ—Ä–∏—Å–æ–≤—Å–∫–∞—è –≥–∏–º–Ω–∞–∑–∏—è',
                             '–°—Ä–µ–¥–Ω—è—è —à–∫–æ–ª–∞ –°–º–∏–ª–æ–≤–∏—á–µ–π')

    if balance < 10:
        return await call.answer(
            text=(
                '‚ùå –í–∞–º –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã $10, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É'
            ),
            show_alert=True
        )

    if current_time() - last_math < 3600 * 4:
        hours, minutes, seconds = get_time_units(
            20 * 3600 + current_time() - last_math)
        return await call.answer(
                text=(
                    '‚ùå –í—ã –±—ã–ª–∏ –Ω–∞–∫–∞–∑–∞–Ω—ã –∑–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –í—ã —Å–º–æ–∂–µ—Ç–µ'
                    f' –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç'
                    f' {seconds} —Å–µ–∫—É–Ω–¥'
                ),
                show_alert=True
            )

    number_1 = random.randint(25, 300)
    number_2 = random.randint(25, 300)
    operator = random.choice(['+', '-'])
    correct_answer = eval(f'{number_1}{operator}{number_2}')
    if random.uniform(0, 1) < 0.35:
        suggestion = correct_answer
    else:
        suggestion = correct_answer + random.randint(-30, 30)

    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton(
            text='–î–∞',
            callback_data=f'answer_math yes {number_1} {operator} '
                          f'{number_2} {suggestion}'
        ),
        InlineKeyboardButton(
            text='–ù–µ—Ç',
            callback_data=f'answer_math no {number_1} {operator} '
                          f'{number_2} {suggestion}'
        )
    )

    question = (
        '<b>–í–µ—Ä–Ω–æ –ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ?</b>\n\n'
        f'{number_1}{operator}{number_2}={suggestion}'
    )
    task_message = await call.message.answer(
        f'<i>{question}</i>',
        reply_markup=markup
    )

    for seconds in range(10):
        if (
            cur.select("task_message", "userdata").where(
                user_id=user_id).one() == task_message['message_id']
        ):
            return
        await task_message.edit_text(
            f'<i>{question}\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –ø–æ–∫–∞ –≤—Å–µ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∏ –Ω–µ '
            f'–∑–∞–ø–æ–ª–Ω—è—Ç—Å—è:\n{"üî≥"*seconds}{"‚¨ú"*(9-seconds)}\n\n'
            'üí° –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>4 –æ—á–∫–∞</b></i>',
            reply_markup=markup
        )
        await asyncio.sleep(1)

    if (
        cur.select("task_message", "userdata").where(
            user_id=user_id).one() != task_message['message_id']
    ):
        no_answer_markup = InlineKeyboardMarkup(row_width=2)
        if (suggestion == correct_answer):
            answer = '–î–∞'
            no_answer_markup.add(
                InlineKeyboardButton(
                    text='–î–∞‚úÖ',
                    callback_data='late_answer'
                ),
                InlineKeyboardButton(
                    text='–ù–µ—Ç‚ùå',
                    callback_data='late_answer'
                )
            )
        else:
            question = (
                f'<b>–í–µ—Ä–Ω–æ –ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ?</b>\n\n{number_1}{operator}'
                f'{number_2}=<s>{suggestion}</s> <b>{correct_answer}</b>'
            )
            answer = '–ù–µ—Ç'
            no_answer_markup.add(
                InlineKeyboardButton(
                    text='–î–∞‚ùå',
                    callback_data='late_answer'
                ),
                InlineKeyboardButton(
                    text='–ù–µ—Ç‚úÖ',
                    callback_data='late_answer'
                )
            )
        no_answer_markup.add(
            InlineKeyboardButton(
                text='üîÑ –ó–∞–Ω–æ–≤–æ',
                callback_data='play_math'
            )
        )

        cur.update("userdata").add(balance=-10).where(user_id=user_id).commit()
        cur.update("userdata").set(last_math=current_time()).where(
            user_id=user_id).commit()

        await task_message.edit_text(
            f'<i>{question}\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{answer}</b>\n\n'
            '<code>–í—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å.\n'
            'üí≤ –®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç–≤–µ—Ç–∞: $10</code></i>',
            reply_markup=no_answer_markup
        )
        await call.answer('–†–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–µ–Ω')


async def answer_math(call: CallbackQuery,
                      answer: str, number_1: int, operator: str,
                      number_2: str, suggestion: int):
    '''
    Callback for a math game answer

    :param call - callback:
    :param answer - user's answer:
    :param number_1 - the 1st number:
    :param operator - the operation performed:
    :param number_2 - the 2nd number:
    :param suggestion - the right side of the suggested equation:
    '''
    user_id = call.from_user.id
    balance = cur.select("balance", "userdata").where(user_id=user_id).one()

    await utils.check_places(user_id, call, '–ë–æ—Ä–∏—Å–æ–≤—Å–∫–∞—è –≥–∏–º–Ω–∞–∑–∏—è',
                             '–°—Ä–µ–¥–Ω—è—è —à–∫–æ–ª–∞ –°–º–∏–ª–æ–≤–∏—á–µ–π')

    if balance < 10:
        return await call.answer(
                text=(
                    '‚ùå –í–∞–º –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã $10, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É'
                ),
                show_alert=True
            )

    cur.update("userdata").set(task_message=call.message.message_id).where(
        user_id=user_id).commit()

    correct_number = eval(f'{number_1}{operator}{number_2}')
    correct_answer = 'yes' if correct_number == suggestion else 'no'
    ru_answer = '–î–∞' if correct_answer == 'yes' else '–ù–µ—Ç'

    left_text = '–î–∞'
    right_text = '–ù–µ—Ç'

    if correct_answer == answer:
        emoji = "‚úÖ"
        reward_text = '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤–µ—Ä–Ω–æ.\nüí° –ù–∞–≥—Ä–∞–¥–∞: 4 –æ—á–∫–∞'

        cur.update("userdata").add(xp=4).where(user_id=user_id).commit()
    else:
        emoji = "‚ùå"
        reward_text = '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ.\nüí≤ –®—Ç—Ä–∞—Ñ: $10'

        cur.update("userdata").add(balance=-10).where(
            user_id=user_id).commit()
        cur.update("userdata").set(last_math=current_time()).where(
            user_id=user_id).commit()

    left_text += f' {emoji}' if answer == 'yes' else ""
    right_text += f" {emoji}" if answer == "no" else ""

    if correct_answer == 'yes':
        question = (
            f'<b>–í–µ—Ä–Ω–æ –ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ?</b>\n\n{number_1}{operator}'
            f'{number_2}={suggestion}'
        )
    else:
        question = (
            f'<b>–í–µ—Ä–Ω–æ –ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ?</b>\n\n{number_1}{operator}'
            f'{number_2}=<s>{suggestion}</s> <b>{correct_number}</b>'
        )

    markup = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton(
            text=left_text,
            callback_data='late_answer'
        ),
        InlineKeyboardButton(
            text=right_text,
            callback_data='late_answer'
        ),
        InlineKeyboardButton(
            text='üîÑ –ó–∞–Ω–æ–≤–æ',
            callback_data='play_math'
        )
    )

    await call.message.edit_text(
        f'<i>{question}\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{ru_answer}</b>'
        f'\n\n<code>{reward_text}</code></i>',
        reply_markup=markup
    )
    await call.answer('–†–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–µ–Ω')


async def play_geo(call: CallbackQuery):
    '''
    Callback for a geography game

    :param call - callback:
    '''
    user_id = call.from_user.id
    last_geography = cur.select("last_geography", "userdata").where(
        user_id=user_id).one()
    balance = cur.select("balance", "userdata").where(user_id=user_id).one()

    if not await utils.check_current(user_id, "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", call):
        return

    if balance < 10:
        return await call.answer(
            text=(
                '‚ùå –í–∞–º –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã $10, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É'
            ),
            show_alert=True
        )

    if current_time() - last_geography < 3600 * 4:
        hours, minutes, seconds = get_time_units(
            20 * 3600 + current_time() - last_geography)
        return await call.answer(
            text=(
                '‚ùå –í—ã –±—ã–ª–∏ –Ω–∞–∫–∞–∑–∞–Ω—ã –∑–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –í—ã —Å–º–æ–∂–µ—Ç–µ'
                f' –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç'
                f' {seconds} —Å–µ–∫—É–Ω–¥'
            ),
            show_alert=True
        )

    country = random.randint(0, len(countries) - 1)
    if random.uniform(0, 1) < 0.4:
        capital = country
    else:
        lower_border = country - 6 if country >= 6 else 0
        if country <= len(countries) - 7:
            upper_border = country + 6
        else:
            upper_border = len(countries) - 1
        capital = random.randint(lower_border, upper_border)

    markup = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton(
            text='–î–∞',
            callback_data=f'answer_geo yes {country} {capital}'
        ),
        InlineKeyboardButton(
            text='–ù–µ—Ç',
            callback_data=f'answer_geo no {country} {capital}'
        )
    )

    question = (
        '<b>–í–µ—Ä–Ω–æ –ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ?</b>\n\n'
        f'–°—Ç–æ–ª–∏—Ü–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ {countries[country]} - '
        f'<b>{capitals[capital]}</b>'
    )
    task_message = await call.message.answer(
        f'<i>{question}</i>',
        reply_markup=markup
    )

    for seconds in range(7):
        if (
            cur.select("task_message", "userdata").where(
                user_id=user_id).one() == task_message['message_id']
        ):
            return
        await task_message.edit_text(
            f'<i>{question}\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –ø–æ–∫–∞ –≤—Å–µ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∏ –Ω–µ '
            f'–∑–∞–ø–æ–ª–Ω—è—Ç—Å—è:\n{"üî≥"*seconds}{"‚¨ú"*(6-seconds)}\n\n'
            'üí° –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>4 –æ—á–∫–∞</b></i>',
            reply_markup=markup
        )
        await asyncio.sleep(1)

    if cur.select("task_message", "userdata").where(
            user_id=user_id).one() != task_message['message_id']:
        no_answer_markup = InlineKeyboardMarkup(row_width=2)
        if (capital == country):
            answer = '–î–∞'
            no_answer_markup.add(
                InlineKeyboardButton(
                    text='–î–∞‚úÖ',
                    callback_data='late_answer'
                ),
                InlineKeyboardButton(
                    text='–ù–µ—Ç‚ùå',
                    callback_data='late_answer'
                )
            )
        else:
            question = (
                '<b>–í–µ—Ä–Ω–æ –ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ?</b>\n\n–°—Ç–æ–ª–∏—Ü–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ '
                f'{countries[country]} - <s>{capitals[capital]}</s> '
                f'<b>{capitals[country]}</b>.\n\n<b>{capitals[capital]}</b> - '
                f'—Å—Ç–æ–ª–∏—Ü–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ <b>{countries[capital]}</b>'
            )
            answer = '–ù–µ—Ç'
            no_answer_markup.add(
                InlineKeyboardButton(
                    text='–î–∞‚ùå',
                    callback_data='late_answer'
                ),
                InlineKeyboardButton(
                    text='–ù–µ—Ç‚úÖ',
                    callback_data='late_answer'
                )
            )
        no_answer_markup.add(
            InlineKeyboardButton(
                text='üîÑ –ó–∞–Ω–æ–≤–æ',
                callback_data='play_geo'
            )
        )

        cur.update("userdata").add(balance=-10).where(user_id=user_id).commit()
        cur.update("userdata").set(last_geography=current_time()).where(
            user_id=user_id).commit()

        await task_message.edit_text(
            f'<i>{question}\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{answer}</b>\n\n'
            '<code>–í—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å.\n'
            'üí≤ –®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç–≤–µ—Ç–∞: $10</code></i>',
            reply_markup=no_answer_markup
        )
        await call.answer('–†–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–µ–Ω')


async def answer_geo(call: CallbackQuery,
                     answer: str, country: int, capital: int):
    '''
    Callback for a math game answer

    :param call - callback:
    :param answer - user's answer:
    :param country - index of the country:
    :param capital - index of the capital:
    '''
    user_id = call.from_user.id
    balance = cur.select("balance", "userdata").where(user_id=user_id).one()

    if not await utils.check_current(user_id, "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", call):
        return

    if balance < 10:
        return await call.answer(
            text=(
                '‚ùå –í–∞–º –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã $10, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É'
            ),
            show_alert=True
        )

    cur.update("userdata").set(task_message=call.message.message_id).where(
        user_id=user_id).commit()

    correct_answer = 'yes' if country == capital else 'no'
    ru_answer = '–î–∞' if correct_answer == 'yes' else '–ù–µ—Ç'

    left_text = '–î–∞'
    right_text = '–ù–µ—Ç'

    if correct_answer == answer:
        if answer == 'yes':
            left_text = '–î–∞‚úÖ'
        else:
            right_text = '–ù–µ—Ç‚úÖ'
        reward_text = '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤–µ—Ä–Ω–æ.\nüí° –ù–∞–≥—Ä–∞–¥–∞: 4 –æ—á–∫–∞'
        cur.update("userdata").add(xp=4).where(user_id=user_id).commit()
    else:
        if answer == 'yes':
            left_text = '–î–∞‚ùå'
        else:
            right_text = '–ù–µ—Ç‚ùå'
        reward_text = '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ.\nüí≤ –®—Ç—Ä–∞—Ñ: $10'
        cur.update("userdata").add(balance=-10).where(
            user_id=user_id).commit()
        cur.update("userdata").set(last_math=current_time()).where(
            user_id=user_id).commit()

    if correct_answer == 'yes':
        question = (
            '<b>–í–µ—Ä–Ω–æ –ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ?</b>\n\n'
            f'–°—Ç–æ–ª–∏—Ü–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ {countries[country]} - '
            f'<b>{capitals[capital]}</b>'
        )
    else:
        question = (
            '<b>–í–µ—Ä–Ω–æ –ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ?</b>\n\n–°—Ç–æ–ª–∏—Ü–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ '
            f'{countries[country]} - <s>{capitals[capital]}</s> '
            f'<b>{capitals[country]}</b>.\n\n<b>{capitals[capital]}</b> - '
            f'—Å—Ç–æ–ª–∏—Ü–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ <b>{countries[capital]}</b>'
        )

    markup = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton(
            text=left_text,
            callback_data='late_answer'
        ),
        InlineKeyboardButton(
            text=right_text,
            callback_data='late_answer'
        ),
        InlineKeyboardButton(
            text='üîÑ –ó–∞–Ω–æ–≤–æ',
            callback_data='play_geo'
        )
    )

    await call.message.edit_text(
        f'<i>{question}\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{ru_answer}</b>'
        f'\n\n<code>{reward_text}</code></i>',
        reply_markup=markup
    )
    await call.answer('–†–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–µ–Ω')


async def fishing(call: CallbackQuery):
    '''
    Callback for fishing menu

    :param call - callback:
    '''
    user_id = call.from_user.id
    rods = cur.select("fishing_rod", "userdata").where(
        user_id=user_id).one()

    if not await utils.check_current(user_id, "–ú–æ—Ä—Å–∫–æ–π", call):
        return

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='üõç –ö—É–ø–∏—Ç—å —Å–Ω–∞—Å—Ç–∏',
            callback_data='rod_shop'
        ),
        InlineKeyboardButton(
            text='üé£ –†—ã–±–∞—á–∏—Ç—å',
            callback_data='go_fishing'
        ),
        InlineKeyboardButton(
            text='‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥',
            callback_data='city'
        )
    )

    await call.message.answer(
        '<i>üêü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä—ã–±–∞–ª–∫—É!</b>\n\n'
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–π–º–∞—Ç—å –µ–¥—É –∏–ª–∏ —Å–æ–∫—Ä–æ–≤–∏—â–∞, –µ—Å–ª–∏ –ø–æ–≤–µ–∑—ë—Ç. '
        '–ü—Ä–æ—Ü–µ—Å—Å —Ä—ã–±–∞–ª–∫–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥, –ø—Ä–∏ —ç—Ç–æ–º —É –≤–∞—Å '
        '–∑–∞–±–∏—Ä–∞–µ—Ç—Å—è –æ–¥–Ω–∞ —É–¥–æ—á–∫–∞. –ê –≤–∑–∞–º–µ–Ω –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ '
        '–ø—Ä–µ–¥–º–µ—Ç—ã –∏ –æ–ø—ã—Ç.\n\n'
        f'üé£ –£ –≤–∞—Å <b>{rods}</b> —É–¥–æ—á–µ–∫</i>',
        reply_markup=markup
    )
    await weather_damage(user_id, call.message.chat.id)


async def go_fishing(call: CallbackQuery):
    '''
    Callback for fishing

    :param call - callback:
    '''
    user_id = call.from_user.id
    rod = cur.select("fishing_rod", "userdata").where(
        user_id=user_id).one()

    if not await utils.check_current(user_id, "–ú–æ—Ä—Å–∫–æ–π", call):
        return

    if current_time() - cur.select("last_fish", "userdata").where(
            user_id=user_id).one() < 60:
        return await call.answer(
            "üò† –†—ã–±–∞—á–∏—Ç—å –º–æ–∂–Ω–æ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É",
            show_alert=True
        )

    if rod < 1:
        return await call.answer(
            text=(
                '‚ùå –£ –≤–∞—Å –Ω–µ—Ç —É–¥–æ—á–µ–∫. –ò—Ö –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ —Ä—è–¥–æ–º'
            ),
            show_alert=True
        )

    await call.answer(
        text='üé£ –†—ã–±–∞–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... –ü–æ–¥–æ–∂–¥–∏—Ç–µ 15-30 —Å–µ–∫—É–Ω–¥',
        show_alert=True
    )

    cur.update("userdata").add(fishing_rod=-1).where(user_id=user_id).commit()
    cur.update("userdata").set(last_fish=current_time()).where(
        user_id=user_id).commit()
    await asyncio.sleep(random.randint(7, 14))
    if await weather_damage(user_id, call.message.chat.id):
        return
    await asyncio.sleep(random.randint(7, 14))

    msg = await call.message.answer(
        "üêü <i><b>–ö–ª—é—ë—Ç!</b> –£ –≤–∞—Å –µ—Å—Ç—å 2 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É</i>",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                text="üé£ –ü–æ—Ç—è–Ω—É—Ç—å –∑–∞ —É–¥–æ—á–∫—É",
                callback_data="fish_result"
            )
        )
    )
    await asyncio.sleep(2)
    if cur.select("fish_message", "userdata").where(
            user_id=user_id).one() != msg['message_id']:
        await msg.edit_text("üò• <i>–î–æ–±—ã—á–∞ —É–ø–ª—ã–ª–∞, –≤—ã –Ω–µ —É—Å–ø–µ–ª–∏ –µ—ë –ø–æ–π–º–∞—Ç—å</i>")


async def fish_result(call: CallbackQuery):
    '''
    Callback for fishing result.

    :param call - callback:
    '''
    user_id = call.from_user.id

    cur.update("userdata").set(fish_message=call.message.message_id).where(
        user_id=user_id).commit()

    text = ''
    luck = 0
    for key in ITEMS:
        item = ITEMS[key]
        if "FISHING" not in item.tags:
            continue
        chance = float(item.tags[1].replace("CHANCE_", "")) / 100
        match (get_weather()):
            case Weather.SUNNY:
                upper_bound = 0.9
            case Weather.RAINING:
                upper_bound = 0.75
            case Weather.THUNDERSTORM:
                upper_bound = 0.6
            case Weather.HURRICANE:
                upper_bound = 0.5
            case _:
                upper_bound = 1
        if random.uniform(0, upper_bound) < chance:
            if random.randint(0, 1) == 0:
                continue
            name = item.ru_name
            emoji = item.emoji
            text += f'\n{emoji} {name}'
            if chance < 5:
                luck = 2
            elif chance < 50:
                luck = 1
            cur.update("userdata").add(**{key: 1}).where(
                user_id=user_id).commit()
            if key == "seashell":
                await achieve(
                    user_id, call.message.chat.id, "fish_achieve"
                )

    points = random.randint(1, 2)
    cur.update("userdata").add(xp=points).where(
                user_id=user_id).commit()

    if text == '':
        text = 'üòì –í—ã –Ω–µ –ø–æ–π–º–∞–ª–∏ –Ω–∏—á–µ–≥–æ.'
    else:
        match (luck):
            case 0:
                additional_text = '–í–∞–º —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤–µ–∑—ë—Ç. –í–æ—Ç, —á—Ç–æ –≤—ã –ø–æ–π–º–∞–ª–∏:'
            case 1:
                additional_text = '–í—ã —Å–µ–≥–æ–¥–Ω—è –≤ —É–¥–∞—Ä–µ! –í–æ—Ç, —á—Ç–æ –≤—ã –ø–æ–π–º–∞–ª–∏:'
            case 2:
                additional_text = '–í–∞–º —Å–∏–ª—å–Ω–æ –ø–æ–≤–µ–∑–ª–æ! –í–æ—Ç, —á—Ç–æ –≤—ã –ø–æ–π–º–∞–ª–∏:'
        text = f'<b>{additional_text}</b>\n{text}'

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='üé£ –ó–∞–Ω–æ–≤–æ',
            callback_data='go_fishing'
        ),
        InlineKeyboardButton(
            text='‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è',
            callback_data='fishing'
        )
    )
    with contextlib.suppress(Exception):
        await call.message.delete()
    await call.message.answer(
        f'<i>{text}\n\nüí° –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—á–∫–∏ –æ–ø—ã—Ç–∞: <b>{points}</b></i>',
        reply_markup=markup
    )


async def resource_factory(call: CallbackQuery):
    '''
    Callback for resource factory menu

    :param call - callback:
    '''
    user_id = call.from_user.id

    if not await utils.check_current(user_id, "–£–≥–æ–ª—å", call):
        return

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='üîÅ –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É',
            callback_data='process_resources'
        ),
        InlineKeyboardButton(
            text='‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥',
            callback_data='city'
        )
    )

    cobble = cur.select("cobble", "userdata").where(user_id=user_id).one()
    balance = cur.select("balance", "userdata").where(user_id=user_id).one()
    await call.message.answer(
        '<i>üè≠ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∑–∞–≤–æ–¥!</b>\n\n'
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å –±—É–ª—ã–∂–Ω–∏–∫, –¥–æ–±—ã—Ç—ã–π –≤ —à–∞—Ö—Ç–µ, –≤ '
        '–±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä –∂–µ–ª–µ–∑–æ, –∑–æ–ª–æ—Ç–æ –∏ —É–≥–æ–ª—å.'
        '\n–ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–æ–≤–Ω–æ 100 –µ–¥–∏–Ω–∏—Ü –±—É–ª—ã–∂–Ω–∏–∫–∞ –∑–∞ —Ä–∞–∑, —ç—Ç–æ —Å—Ç–æ–∏—Ç'
        ' <b>$200</b> –∏ –¥–ª–∏—Ç—Å—è 100 —Å–µ–∫—É–Ω–¥\n\n'
        f'–£ –≤–∞—Å <b>{cobble}</b> –µ–¥–∏–Ω–∏—Ü –±—É–ª—ã–∂–Ω–∏–∫–∞ –∏ <b>${balance}</b></i>',
        reply_markup=markup
    )


async def process_resources(call: CallbackQuery):
    '''
    Callback for fishing

    :param call - callback:
    '''
    user_id = call.from_user.id

    if not await utils.check_current(user_id, "–£–≥–æ–ª—å", call):
        return

    if current_time() - cur.select("last_proc", "userdata").where(
            user_id=user_id).one() < 120:
        return await call.answer(
            "üò† –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–≤–æ–¥–æ–º –º–æ–∂–Ω–æ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 2 –º–∏–Ω—É—Ç—ã",
            show_alert=True
        )

    balance = cur.select("balance", "userdata").where(
        user_id=user_id).one()
    cobble = cur.select("cobble", "userdata").where(
        user_id=user_id).one()
    if cobble < 100:
        return await call.answer(
                text=(
                    '‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—É–ª—ã–∂–Ω–∏–∫–∞'
                ),
                show_alert=True
            )
    elif balance < 200:
        return await call.answer(
                text=(
                    '‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ'
                ),
                show_alert=True
            )

    await call.answer(
        text='üè≠ –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... –ü–æ–¥–æ–∂–¥–∏—Ç–µ 100 —Å–µ–∫—É–Ω–¥',
        show_alert=True
    )

    cur.update("userdata").set(last_proc=current_time()).where(
        user_id=user_id).commit()
    await asyncio.sleep(100)

    coal = random.randint(1, 10)
    text = f'üòâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–ª—É—á–µ–Ω–æ:\n\n–£–≥–æ–ª—å - <b>{coal}</b>'
    cur.update("userdata").add(coal=coal).where(user_id=user_id).commit()

    points = random.randint(1, 2)
    cur.update("userdata").add(xp=points).where(
        user_id=user_id).commit()
    cur.update("userdata").add(balance=-200).where(
        user_id=user_id).commit()
    cur.update("userdata").add(cobble=-100).where(
        user_id=user_id).commit()

    if iron := random.randint(0, 5):
        text += f'\n–ñ–µ–ª–µ–∑–æ - <b>{iron}</b>'
        cur.update("userdata").add(iron=iron).where(user_id=user_id).commit()
    if random.randint(1, 15) == 1:
        text += '\n–ó–æ–ª–æ—Ç–æ - <b>1</b>'
        cur.update("userdata").add(gold=1).where(user_id=user_id).commit()
        await achieve(
            user_id, call.message.chat.id, "proc_achieve"
        )

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton(
            text='üè≠ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â—ë',
            callback_data='process_resources'
        ),
        InlineKeyboardButton(
            text='‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è',
            callback_data='resource_factory'
        )
    )
    with contextlib.suppress(Exception):
        await call.message.delete()
    await call.message.answer(
        f'<i>{text}\n\nüí° –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—á–∫–∏ –æ–ø—ã—Ç–∞: <b>{points}</b></i>',
        reply_markup=markup
    )


async def oscar_shop(call: CallbackQuery):
    '''
    Callback for Oscar's shop

    :param call - callback:
    '''
    user_id = call.from_user.id

    if not await utils.check_current(user_id, "–î–µ—Ä–µ–≤–Ω—è –û—Å—Ç–∏–Ω—Ç", call):
        return

    markup = InlineKeyboardMarkup(row_width=1)
    purchases = cur.select("oscar_purchases", "userdata").where(
        user_id=user_id).one()
    for lvl in oscar_levels:
        if purchases < oscar_levels[lvl]:
            break
        level = RESOURCES[lvl].ru_name
        markup.add(
            InlineKeyboardButton(
                text=f"üõç –û—Ç–¥–µ–ª {level}",
                callback_data=f"oscar_dept_{lvl}"
            )
        )

    markup.add(
        InlineKeyboardButton(
            text='‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥',
            callback_data='city'
        )
    )

    await call.message.answer(
        '<i>üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∞–≤–∫—É –¥—è–¥–∏ –û—Å–∫–∞—Ä–∞!</b>\n\n'
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∑–∞ —Ä–µ—Å—É—Ä—Å—ã,'
        ' –¥–æ–±—ã—Ç—ã–µ –≤ —à–∞—Ö—Ç–µ.\n\n–£—Ä–æ–≤–µ–Ω—å –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –¥—è–¥–µ–π –û—Å–∫–∞—Ä–æ–º: '
        f'<b>{level}</b> (—Å–æ–≤–µ—Ä—à–µ–Ω–æ <b>{purchases}</b> –ø–æ–∫—É–ø–æ–∫)</i>',
        reply_markup=markup
    )


async def oscar_dept(call: CallbackQuery, dept: str):
    '''
    Callback for Oscar's shop department

    :param call - callback:
    :param dept - level name:
    '''
    user_id = call.from_user.id

    if not await utils.check_current(user_id, "–î–µ—Ä–µ–≤–Ω—è –û—Å—Ç–∏–Ω—Ç", call):
        return

    if cur.select("oscar_purchases", "userdata").where(
            user_id=user_id).one() < oscar_levels[dept]:
        return await call.answer(
            "üòë –í—ã –µ—â—ë –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ç–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤ –ª–∞—Ä—å–∫–µ. "
            "–ü–æ–∫—É–ø–∞–π—Ç–µ –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ —É –¥—è–¥–∏ –û—Å–∫–∞—Ä–∞!"
        )

    level_name = RESOURCES[dept].ru_name
    markup = InlineKeyboardMarkup(row_width=1)
    oscar_items = filter(
        lambda x: f"OSCAR_SHOP_{dept.upper()}" in ITEMS[x].tags,
        ITEMS
    )
    for item in oscar_items:
        cost = ITEMS[item].cost // RESOURCES[dept].cost
        name = ITEMS[item].ru_name
        emoji = ITEMS[item].emoji
        markup.add(
            InlineKeyboardButton(
                f"{emoji} {name} - {level_name} x{cost}",
                callback_data=f"oscar_buy_{item}"
            )
        )

    markup.add(cancel_button())
    count = cur.select(dept, "userdata").where(user_id=user_id).one()

    await call.message.answer(
        '<i>üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∞–≤–∫—É –¥—è–¥–∏ –û—Å–∫–∞—Ä–∞!</b>\n'
        f'–û—Ç–¥–µ–ª <b>{level_name}</b>.\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å? –£ –≤–∞—Å '
        f'<b>{count}</b> –µ–¥–∏–Ω–∏—Ü —Ä–µ—Å—É—Ä—Å–∞ {level_name}</i>',
        reply_markup=markup
    )
