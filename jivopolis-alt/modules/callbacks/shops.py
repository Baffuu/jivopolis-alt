from ...database.sqlitedb import cur, conn
from ...database.functions import buybutton

from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

async def shop(
    call: CallbackQuery,
    place: str | list = None,
    items: list = None,
    text: str = '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å?'
) -> None:
    '''
    Represents callback for any of existing shops 
    
    :param call - callback:
    :param place:
    :param items - items that will be selling in shop
    :param text - text that will be sent
    '''
    cur.execute(f"SELECT current_place FROM userdata WHERE user_id={call.from_user.id}")

    if cur.fetchone()[0] not in place and cur.fetchone()[0] != place:
        await call.answer(
            text='ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏', 
            show_alert=True
        )
        return

    buttons = [buybutton(item) for item in items]
    
    markup = InlineKeyboardMarkup(row_width=1).\
        add(*list(filter(lambda item: item is not None, buttons)))

    await call.message.answer(
        text=f'<i>{text}</i>', 
        reply_markup=markup,
    )


async def moda_menu(call: CallbackQuery) -> None:
    '''
    Callback for modashop menu
    
    :param call - callback:
    '''
    place = cur.execute(f"SELECT current_place FROM userdata WHERE user_id={call.from_user.id}").fetchone()[0]

    if place != '–¢–¶ –ú–∏–ì':
        return

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton(text='‚ùÑÔ∏è –ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –æ—Ç–¥–µ–ª', callback_data='xmas_shop'),
                InlineKeyboardButton(text='üë∫ –ú–∞—Å–∫–∞—Ä–∞–¥–Ω—ã–π –æ—Ç–¥–µ–ª', callback_data='mask_clothes'))

    return await call.message.answer(
        '<i>&#128090; –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>ModaShop</b>! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ª—é–±—É—é –æ–¥–µ–∂–¥—É!</i>', 
        reply_markup = markup, 
    )


async def mall(call: CallbackQuery) -> None:
    '''
    Callback for mall menu
    
    :param call - callback:
    :param user_id:
    '''
    place = cur.execute(f"SELECT current_place FROM userdata WHERE user_id={call.from_user.id}").fetchone()[0]
    
    if place != '–¢–¶ –ú–∏–ì':
        return

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton(text='üëö ModaShop', callback_data='moda_menu'), 
               InlineKeyboardButton(text='üçî –ï–Ω–æ—Ç –ö–µ–±–∞–±', callback_data='enot_kebab'),
               InlineKeyboardButton(text='üçö –†–µ—Å—Ç–æ—Ä–∞–Ω –Ø–ø–æ–Ω –ï–Ω–æ—Ç', callback_data='japan_shop'))

    return await call.message.answer('<i>&#127978; –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä!</i>', reply_markup = markup)


async def shop_24(call: CallbackQuery) -> None:
    '''
    Callback for 24-hour shop
    
    :param call - callback:
    '''
    buttons = [buybutton('bread', 'limited'), 
               buybutton('pelmeni', 'limited'),
               buybutton('soup', 'limited'), 
               buybutton('meat', 'limited'), 
               buybutton('meatcake', 'limited'), 
               buybutton('tea', 'limited')]

    markup = InlineKeyboardMarkup(row_width=1).\
        add(*list(filter(lambda item: item is not None, buttons)))

    await call.message.answer('<i>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?</i>', reply_markup = markup)
