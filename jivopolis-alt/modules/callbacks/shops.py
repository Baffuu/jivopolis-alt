from ...database import cur
from ...database.functions import buybutton
from typing import Optional
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)


async def shop(
    call: CallbackQuery,
    place: Optional[str | list] = None,
    items: Optional[list] = None,
    text: str = '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å?'
) -> None:
    '''
    Represents callback for any of existing shops

    :param call - callback:
    :param place:
    :param items - items that will be sold in shop
    :param text - text that will be sent
    '''
    place_ = cur.select("current_place", "userdata").where(
        user_id=call.from_user.id).one()

    if place is not None and place_ not in place and place_ != place:
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    if items is not None:
        buttons = [buybutton(item) for item in items]

        markup = InlineKeyboardMarkup(row_width=1).\
            add(*list(filter(lambda item: item is not None, buttons))).\
            add(
                InlineKeyboardButton(
                    text='‚óÄ –ù–∞–∑–∞–¥',
                    callback_data='cancel_action'
                )
               )
    else:
        markup = None

    await call.message.answer(
        text=f'<i>{text}</i>',
        reply_markup=markup,
    )


async def moda_menu(call: CallbackQuery) -> None:
    '''
    Callback for modashop menu

    :param call - callback:
    '''

    place = cur.select("current_place", "userdata").where(
        user_id=call.from_user.id).one()

    if place != '–¢–¶ –ú–∏–ì':
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton(
            text='‚ùÑÔ∏è –ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –æ—Ç–¥–µ–ª',
            callback_data='xmas_shop'
        ),
        InlineKeyboardButton(
            text='üë∫ –ú–∞—Å–∫–∞—Ä–∞–¥–Ω—ã–π –æ—Ç–¥–µ–ª',
            callback_data='mask_clothes'
        )
    )

    await call.message.answer(
        '<i>&#128090; –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>ModaShop</b>! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ '
        '–∫—É–ø–∏—Ç—å –ª—é–±—É—é –æ–¥–µ–∂–¥—É!</i>',
        reply_markup=markup,
    )


async def mall(call: CallbackQuery) -> None:
    '''
    Callback for mall menu

    :param call - callback:
    :param user_id:
    '''
    place = cur.select("current_place", "userdata").where(
        user_id=call.from_user.id).one()

    if place != '–¢–¶ –ú–∏–ì':
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton(
            text='üëö ModaShop',
            callback_data='moda_menu'
        ),
        InlineKeyboardButton(
            text='üçî –ï–Ω–æ—Ç –ö–µ–±–∞–±',
            callback_data='enot_kebab'
        ),
        InlineKeyboardButton(
            text='üçö –†–µ—Å—Ç–æ—Ä–∞–Ω –Ø–ø–æ–Ω –ï–Ω–æ—Ç',
            callback_data='japan_shop'
        )
    )

    await call.message.answer(
        '<i>&#127978; –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä!</i>',
        reply_markup=markup
    )


async def ticket_shop(call: CallbackQuery) -> None:
    '''
    Callback for ticket shop menu

    :param call - callback:
    '''
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton(
            text='üöá –ú–µ—Ç—Ä–æ',
            callback_data='metro_tickets'
        ),
        InlineKeyboardButton(
            text='üöé –ì–æ—Ä–æ–¥—Å–∫–æ–π —Ç—Ä–æ–ª–ª–µ–π–±—É—Å',
            callback_data='trolleybus_tickets'
        ),
        InlineKeyboardButton(
            text='üöÜ –≠–ª–µ–∫—Ç—Ä–æ–ø–æ–µ–∑–¥ —ç–∫–æ–Ω–æ–º–∫–ª–∞—Å—Å–∞',
            callback_data='regtrain_tickets'
        ),
        InlineKeyboardButton(
            text='üöÖ –°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –ø–æ–µ–∑–¥',
            callback_data='train_tickets'
        ),
        InlineKeyboardButton(
            text='üöã –†–∏–¥–∏–ø–æ–ª—å—Å–∫–∏–π —Ç—Ä–∞–º–≤–∞–π',
            callback_data='tram_tickets'
        ),
        InlineKeyboardButton(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
        )

    await call.message.answer(
        '<i>üé´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Å—Å—É! –ë–∏–ª–µ—Ç—ã –Ω–∞ –∫–∞–∫–æ–π –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞'
        ' —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?</i>',
        reply_markup=markup
    )


async def shop_24(call: CallbackQuery) -> None:
    '''
    Callback for 24-hour shop

    :param call - callback:
    '''
    buttons = [buybutton('bread', 'limited'),
               buybutton('pelmeni', 'limited'),
               buybutton('soup', 'limited'),
               buybutton('meat', 'limited'),
               buybutton('meatcake', 'limited'),
               buybutton('tea', 'limited')]

    markup = InlineKeyboardMarkup(row_width=1).\
        add(*list(filter(lambda item: item is not None, buttons)))

    await call.message.answer('<i>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?</i>', reply_markup=markup)


async def maximdom(call: CallbackQuery, floor: int) -> None:
    '''
    Callback for Maximdom mall

    :param call - callback:
    :param floor - floor of the mall:
    '''
    place = cur.select("current_place", "userdata").where(
        user_id=call.from_user.id).one()

    if place != '–ü–ª–æ—â–∞–¥—å –ú–∞–∫—Å–∏–º–∞':
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=1)
    match (floor):
        case 1:
            markup.add(
                InlineKeyboardButton(
                    text='üß± –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω',
                    callback_data='building_shop'
                ),
                InlineKeyboardButton(
                    text='üì± –ú–∞–≥–∞–∑–∏–Ω —Ç–µ—Ö–Ω–∏–∫–∏ –∏–º. –®–µ–ª–±–∏',
                    callback_data='phone_shop'
                )
            )
        case 3:
            markup.add(
                InlineKeyboardButton(
                    text='üçî –ï–Ω–æ—Ç –ö–µ–±–∞–±',
                    callback_data='enot_kebab_shop'
                ),
                InlineKeyboardButton(
                    text='üçö –†–µ—Å—Ç–æ—Ä–∞–Ω –Ø–ø–æ–Ω –ï–Ω–æ—Ç',
                    callback_data='japan_shop'
                )
            )
    markup.add(
        InlineKeyboardButton(
            text='üõó –õ–∏—Ñ—Ç',
            callback_data='maximdom_elevator'
        )
    )

    await call.message.answer(
        '<i>üè¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä –ú–∞–∫—Å–∏–º–¥–æ–º!'
        f'\n<b>{floor} —ç—Ç–∞–∂</b></i>',
        reply_markup=markup
    )


async def maximdom_elevator(call: CallbackQuery) -> None:
    '''
    Callback for Maximdom elevator menu

    :param call - callback:
    '''
    place = cur.select("current_place", "userdata").where(
        user_id=call.from_user.id).one()

    if place != '–ü–ª–æ—â–∞–¥—å –ú–∞–∫—Å–∏–º–∞':
        return await call.answer(
            text=(
                'ü¶• –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –≤—ã —É–∂–µ —É–µ—Ö–∞–ª–∏ –∏–∑ —ç—Ç–æ–π '
                '–º–µ—Å—Ç–Ω–æ—Å—Ç–∏'
            ),
            show_alert=True
        )

    markup = InlineKeyboardMarkup(row_width=1)
    for floor in range(1, 4):
        markup.add(
            InlineKeyboardButton(
                text=f'üõó {floor} —ç—Ç–∞–∂',
                callback_data=f'maximdom_floor_{floor}'
            )
        )
    markup.add(
        InlineKeyboardButton(
            text='‚óÄ –ù–∞–∑–∞–¥',
            callback_data='cancel_action'
        )
    )

    await call.message.answer(
        '<i>üè¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä –ú–∞–∫—Å–∏–º–¥–æ–º!</i>',
        reply_markup=markup
    )
