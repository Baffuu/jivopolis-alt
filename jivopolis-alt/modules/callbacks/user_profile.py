from ... import bot
from ...misc import ITEMS
import sqlite3
from ...database import cur
from ...database.functions import tglog, get_embedded_link

from aiogram.utils.deep_linking import get_start_link
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery
)


async def set_user_bio(call: CallbackQuery) -> None:
    cur.update("userdata").set(process="setbio").where(
        user_id=call.from_user.id).commit()

    await bot.send_message(
        call.message.chat.id,
        "<i>üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:</i>",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                text="üö´ –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_process"
            )
        )
    )


async def put_mask_off(
    call: CallbackQuery,
    user_id: int,
    anon: bool = False
) -> None:
    if mask := cur.execute(
        f"SELECT mask FROM userdata WHERE user_id={user_id}"
    ).fetchone()[0]:
        if mask is None:
            return

        for item in ITEMS:
            if ITEMS[item].emoji == mask and ITEMS[item].type == "mask":
                mask = item

        cur.update("userdata").set(mask="NULL").where(user_id=user_id).commit()
        try:
            cur.update("userdata").add(**{mask: 1}).where(
                user_id=user_id).commit()
        except sqlite3.OperationalError:
            await call.message.answer("‚ÄºÔ∏è Your mask does not exist")
        if not anon:
            return await call.answer("ü¶πüèº –í–∞—à–∞ –º–∞—Å–∫–∞ —Å–Ω—è—Ç–∞.", show_alert=True)


async def put_mask_on(call: CallbackQuery, item: str) -> None:
    user_id = call.from_user.id

    await put_mask_off(call, user_id, True)
    itemcount = cur.select(item, "userdata").where(user_id=user_id).one()

    if itemcount > 0:
        cur.update("userdata").add(**{item: -1}).where(
            user_id=user_id).commit()

        cur.update("userdata").set(mask=ITEMS[item].emoji).where(
            user_id=user_id).commit()

        return await call.answer(
            f"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –í–∞—à–∞ –º–∞—Å–∫–∞: {ITEMS[item].emoji}",
            show_alert=True
        )
        # await achieve(a, message.chat.id, "msqrd")
    else:
        await call.answer(
            "üö´ –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞",
            show_alert=True
        )


async def my_reflink(call: CallbackQuery) -> None:
    color = '0-0-0'
    bgcolor = '255-255-255'

    reflink = await get_start_link(
        payload=str(call.from_user.id),
        encode=True
    )

    await bot.send_photo(
        call.message.chat.id,
        photo=(
            f"https://api.qrserver.com/v1/create-qr-code/?data={reflink}&"
            "size=512x512&charset-source=UTF-8&charset-target=UTF-8"
            f"&ecc=L&color={color}&bgcolor={bgcolor}&margin=1&qzone=1&format="
            "png"
        ),
        caption=(
            f"<i>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <b>{reflink}</b>\n\n"
            "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 1 "
            "<b>üì¶ –õ—É—Ç–±–æ–∫—Å</b></i>"
        ),
    )


async def privacy_settings(call: CallbackQuery):
    markup = InlineKeyboardMarkup(row_width=1)
    user_id = call.from_user.id
    profile_type = cur.select("profile_type", "userdata").where(
        user_id=user_id).one()
    markup.add(
        InlineKeyboardButton(
            f"üîê –¢–∏–ø –ø—Ä–æ—Ñ–∏–ª—è: {'–û—Ç–∫—Ä—ã—Ç—ã–π' if profile_type == 'public' else '–ó–∞–∫—Ä—ã—Ç—ã–π'}",  # noqa
            callback_data="toggle_profile_type"
        ),
        InlineKeyboardButton(
            "üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞",
            callback_data="access-key"
        ),
        InlineKeyboardButton(
            "üîô –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞",
            callback_data="log-out"
        ),
        InlineKeyboardButton(
            "üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
            callback_data="delete-account",
        ),
        InlineKeyboardButton(
            "‚óÄ –ù–∞–∑–∞–¥",
            callback_data="cancel_action",
        )
    )
    await call.message.answer(
        'üîè<i><b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b></i>',
        reply_markup=markup
    )


async def delete_account(call: CallbackQuery):
    """
    Callback for account deleting menu

    :param call - callback:
    """

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
            callback_data='delete_account_confirm'
        ),
        InlineKeyboardButton(
            text='‚ùå –û—Ç–º–µ–Ω–∞',
            callback_data='cancel_action'
        )
    )

    await call.message.answer(
        '<i>üò® –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ –µ–≥–æ '
        '–¥–µ–Ω—å–≥–∞–º–∏, —Ä–µ—Å—É—Ä—Å–∞–º–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ '
        '–æ—Ç–º–µ–Ω–∏—Ç—å</i>',
        reply_markup=markup
    )


async def delete_account_confirm(call: CallbackQuery):
    """
    Callback for account removal

    :param call - callback:
    """
    user_id = call.from_user.id

    embedded_link = await get_embedded_link(user_id)
    cur.execute(
        f"DELETE FROM userdata WHERE user_id={user_id}"
    ).commit()

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='üò™ –•–æ—Ä–æ—à–æ',
            callback_data='cancel_action'
        ),
        InlineKeyboardButton(
            text='‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π',
            callback_data='sign_up'
        )
    )
    await call.message.answer(
        '<i>üò• –í–æ—Ç –∏ –≤—Å—ë... –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω. –í–µ—Ä–Ω—É—Ç—å –µ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ</i>',
        reply_markup=markup
    )

    await tglog(
            message=(
                f"üò™ <b>{embedded_link}</b> —É–¥–∞–ª–∏–ª —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç"
            ),
            tag='#delete_account'
    )


async def log_out(call: CallbackQuery):
    """
    Callback for logging out

    :param call - callback:
    """
    user_id = call.from_user.id

    embedded_link = await get_embedded_link(user_id)
    id = cur.select("id", "userdata").where(user_id=user_id).one()
    cur.update("userdata").set(user_id=0).where(id=id).commit()

    markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text='üò™ –•–æ—Ä–æ—à–æ',
            callback_data='cancel_action'
        )
    )
    await call.message.answer(
        '<i>ü•± –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤—ã –≤—Å–ø–æ–º–Ω–∏—Ç–µ —Å–≤–æ–π –∫–ª—é—á'
        ' –¥–æ—Å—Ç—É–ø–∞, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤–∞–º –∑–∞—Ö–æ—á–µ—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç</i>',
        reply_markup=markup
    )

    await tglog(
            message=(
                f"‚û° <b>{embedded_link}</b> –≤—ã—à–µ–ª –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"
            ),
            tag='#log_out'
    )
