import random
import contextlib
from time import time
from collections import namedtuple
from ..marketplace import group_support
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove,
    User,
    ChatType,
    Chat,
    CallbackQuery
)
from aiogram.dispatcher.filters import Text
from aiogram.utils.exceptions import (
    ChatNotFound,
    BotBlocked,
    CantInitiateConversation
)
from aiogram.utils.deep_linking import decode_payload

from .. import bot, Dispatcher, logger, tglog
from ..filters import RequireBetaFilter
from ..misc import get_mask, get_link, current_time, OfficialChats, constants
from ..database import cur, insert_user
from ..database.functions import check, profile, get_embedded_link
from ..misc.config import levelrange, hellos, randomtext, SUPPORT_LINK

Rase = namedtuple('Rase', ['emoji', 'ru_name', 'name', 'image_url'])

RASES = {
    "üê±": Rase(
        emoji="üê±",
        name="cat",
        ru_name="–ö–æ—Ç",
        image_url="https://telegra.ph/file/e088cc301adede07db382.jpg"
    ),
    "üê∂": Rase(
        emoji="üê∂",
        name="dog",
        ru_name="–°–æ–±–∞–∫–∞",
        image_url="https://telegra.ph/file/ae98cd7c2cad60f6fdcd1.jpg"
    ),
    "ü¶ù": Rase(
        emoji="ü¶ù",
        name="raccoon",
        ru_name="–ï–Ω–æ—Ç",
        image_url="https://telegra.ph/file/3f3cbfb04a7d1c39bb849.jpg"
    ),
    "üê∏": Rase(
        emoji="üê∏",
        name="frog",
        ru_name="–ñ–∞–±–∞",
        image_url="https://telegra.ph/file/debe702d527967f9afd9a.jpg"
    ),
    "ü¶â": Rase(
        emoji="ü¶â",
        name="owl",
        ru_name="–°–æ–≤–∞",
        image_url="https://telegra.ph/file/5a07905d42444f2294418.jpg"
    )
}


class StartCommand():

    async def start_cmd(self, message: Message):
        '''
        handler for start command

        :param message:
        '''
        user_id = message.from_user.id
        chat_id = message.chat.id
        try:
            usercount = cur.select("count(*)", "userdata").where(
                user_id=user_id).one()
            if usercount < 1:
                return await self._user_register_message(message, user_id)

            await check(user_id, chat_id)

            if args := message.get_args():
                usercount = cur.select("count(*)", "userdata").where(
                    user_id=args).one()
                if usercount == 1:
                    return await profile(int(args), message)

            is_banned = bool(cur.select("is_banned", "userdata").where(
                user_id=message.from_user.id).one())
            if is_banned:
                return await message.answer(
                    'üßõüèª‚Äç‚ôÇÔ∏è<i> –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –±–æ—Ç–µ. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ'
                    f' —ç—Ç–æ - –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ <a href="{SUPPORT_LINK}'
                    '">–ø–æ–¥–¥–µ—Ä–∂–∫—É</a></i>'
                )

            health = cur.select("health", "userdata").where(
                user_id=user_id).one()
            if health < constants.MINIMUM_HEALTH:
                return await message.reply(
                    "<i> –í—ã —É–º–µ—Ä–ª–∏. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –≤–∞—Å –≤–æ—Å–∫—Ä–µ—Å–∏—Ç—å</i>"
                )

            in_prison = cur.select("prison_started", "userdata").where(
                user_id=user_id).one() - current_time()
            is_in_prison = in_prison > 0
            if is_in_prison:
                minutes = int(in_prison / 60)
                seconds = int(in_prison % 60)
                return await message.reply(
                    'üëÆ‚Äç‚ôÇÔ∏è<i> –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ç—é—Ä—å–º–µ. –î–æ –≤—ã—Ö–æ–¥–∞ –≤–∞–º –æ—Å—Ç–∞–ª–æ—Å—å '
                    f'{minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥</i>'
                )

            if await group_support.IsInMarket().check(message):
                await group_support.on_start_pressed(message)
            elif message.chat.type == ChatType.PRIVATE:
                await self._private_start(user_id, message=message)
            elif message.chat.id == OfficialChats.CASINOCHAT:
                await self._casino_start(message)
            elif message.chat.type in [ChatType.SUPERGROUP, ChatType.GROUP]:
                await self._clan_start(message.chat)

        except Exception as e:
            logger.exception(e)
            return await bot.send_message(
                chat_id,
                constants.ERROR_MESSAGE.format(e)
            )

    async def _private_start(
        self,
        user_id: str | int,
        give_text: bool = False,
        message: Message | None = None
    ) -> str | None:
        nick = cur.select("nickname", "userdata").where(user_id=user_id).one()
        if message:
            id = message.get_args()
            count = cur.select("count(*)", "userdata").where(user_id=id).one()
            if int(count) >= 1:
                return await profile(id, message)

        leaderboard = cur.execute("""
            SELECT user_id FROM userdata
            WHERE profile_type=\"public\" AND rank=0
            ORDER BY balance
            DESC LIMIT 10
        """).fetch()

        leaders = "&#127942; –õ–∏–¥–µ—Ä—ã –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:"
        if leaderboard:
            for id in leaderboard:
                balance = cur.select("balance", "userdata").where(
                    user_id=id[0]).one()
                leaders += (
                    f"\n<b>{await get_embedded_link(id[0])} - ${balance}</b>"
                )

        buttons = self._start_buttons(user_id)
        mask = get_mask(user_id)

        balance = cur.select("balance", "userdata").where(
            user_id=user_id).one()
        xp = cur.select("xp", "userdata").where(user_id=user_id).one()
        health = cur.select("health", "userdata").where(user_id=user_id).one()
        level = cur.select("level", "userdata").where(user_id=user_id).one()

        if level < len(levelrange)-1:
            xp_left = f"{xp} XP –∏–∑ {levelrange[level+1]}"
        else:
            xp_left = "–º–∞–∫—Å. —É—Ä–æ–≤–µ–Ω—å"

        hello = random.choice(hellos)
        text = (
            f"<i>{hello}, <b><a href=\"tg://user?id={user_id}\">{mask}{nick}<"
            f"/a></b>\nüí≤ –ë–∞–ª–∞–Ω—Å: <b>${balance}</b>"
            f"\n üí° –£—Ä–æ–≤–µ–Ω—å: <b>{level}</b> ({xp_left})"
            f"\n‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: <b>{health}</b>"
            f"\n{leaders}</i>"
        )
        if give_text:
            return text
        await bot.send_message(user_id, f"<i>{random.choice(randomtext)}</i>")
        await bot.send_message(
            user_id,
            text,
            reply_markup=InlineKeyboardMarkup(row_width=2).add(*buttons)
        )

    def _start_buttons(self, user_id) -> list[InlineKeyboardButton]:
        rank = cur.select("rank", "userdata").where(user_id=user_id).one()
        mailbox = cur.select("last_box", from_="userdata").where(
            user_id=user_id).one()
        box = cur.select("lootbox", from_="userdata").where(
            user_id=user_id).one()

        mailbox = mailbox - time() > 60 * 60 * 24
        box = mailbox or box > 0
        box = random.choice(["üì¨", "üì´"]) if box else random.choice(["üì™", "üì≠"])

        buttons = [
                InlineKeyboardButton(
                    text="üíº –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
                    callback_data="inventory"
                ),
                InlineKeyboardButton(
                    text="üèõ –ì–æ—Ä–æ–¥",
                    callback_data="city_wo_deleting"
                ),
                InlineKeyboardButton(
                    text=f"{box} –ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫",
                    callback_data="mailbox"
                ),
                InlineKeyboardButton(
                    text="ü§µ –†–∞–±–æ—Ç–∞—Ç—å",
                    callback_data="nogps_category_–ó–∞—Ä–∞–±–æ—Ç–æ–∫"
                ),
                InlineKeyboardButton(
                    text="üÉè –ü—Ä–æ—Ñ–∏–ª—å",
                    callback_data="profile"
                ),
                InlineKeyboardButton(
                    text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    callback_data="user_settings"
                ),
                InlineKeyboardButton(
                    text="‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    callback_data="information_menu"
                )
            ]

        phone = cur.select("phone", "userdata").where(user_id=user_id).one()
        radio = cur.select("radio", "userdata").where(user_id=user_id).one()
        if phone and radio:
            buttons.append(
                InlineKeyboardButton(
                    text="üì± –ì–∞–¥–∂–µ—Ç—ã",
                    callback_data="gadget_menu"
                )
            )
        elif phone:
            buttons.append(
                InlineKeyboardButton(
                    text="üì± –¢–µ–ª–µ—Ñ–æ–Ω",
                    callback_data="cellphone_menu"
                )
            )
        elif radio:
            buttons.append(
                InlineKeyboardButton(
                    text="üìª –†–∞–¥–∏–æ",
                    callback_data="radio_menu"
                )
            )

        if rank >= constants.ADMINPANEL_MINIMUM_RANK:
            buttons.append(
                InlineKeyboardButton(
                    text="üëë Admin panel",
                    callback_data="adminpanel"
                )
            )

        return buttons

    async def sign_up_refferal(
        self,
        message: Message,
        user: User,
        refferal_id: int | str
    ):
        '''
        Creates account for a user that sign up using refferal code

        :param message:
        :param user:
        :param refferal_id:
        '''
        if cur.execute(
            f"SELECT count(*) FROM userdata WHERE user_id = {user.id}"
        ).fetchone():
            insert_user(user)
        else:
            return message.answer(
                "<i>üò® –í—ã —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç</i>",
                reply_markup=ReplyKeyboardRemove()
            )
        refferal_nick = cur.select("nickname", "userdata").where(
            user_id=refferal_id).one()
        refferal_mask = get_mask(refferal_id)

        await message.edit_text(
            f"{message.text}\n\n>>> <i>ü§µ‚Äç‚ôÇÔ∏è–í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º "
            f"<a href='{await get_link(refferal_id)}'>{refferal_mask}"
            f"{refferal_nick}</a></i>",
        )

        cur.update("userdata").set(inviter_id=refferal_id).where(
            user_id=user.id).commit()

        cur.update("userdata").add(lootbox=1).where(
            user_id=refferal_id).commit()

        cur.update("userdata").add(balance=100).where(
            user_id=user.id).commit()

        with contextlib.suppress(
            ChatNotFound,
            BotBlocked,
            CantInitiateConversation
        ):
            await bot.send_message(
                refferal_id,
                (
                    "üëº <i>–Æ–∑–µ—Ä <a href = "
                    f"'{await get_link(user.id)}'>{user.full_name}</a> "
                    "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, "
                    "—Å–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∏–≥—Ä—É!\n\n"
                    ">>> ü§µ‚Äç‚ôÇÔ∏è–ü–æ–ª—É—á–µ–Ω <b>üì¶ –õ—É—Ç–±–æ–∫—Å</b></i>"
                ),
            )

        await self._continue_registration(user.id)

    async def _register_refferal(self, message: Message, ref_id: int | str):
        '''
        Send message for refferal registration

        :param message:
        :param red_id - refferal user ID:
        '''

        await message.answer(
            (
                f"ü¶é <i>–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"
                " –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –ª—É—á—à–∏–π –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç –≤–æ –≤—Å—ë–º —Ç–µ–ª–µ–≥—Ä–∞–º–µ! \n\n‚öôÔ∏è –ù–∞"
                "–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏ –Ω–∞—á–∞—Ç—å"
                " –∏–≥—Ä–∞—Ç—å‚Ä¶</i>"
            ),
            reply_markup=InlineKeyboardMarkup(row_width=1).add(
                    InlineKeyboardButton(
                        "üëº –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
                        callback_data=f'sign_up_{ref_id}'
                    )
                )
        )

    async def _user_register_message(
        self,
        message: Message,
        user_id: int | str
    ):
        '''
        Preparing user for signing up

        :param message:
        :param user_id:
        '''
        markup = InlineKeyboardMarkup(row_width=1).\
            add(
                InlineKeyboardButton(
                    text="üëº –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
                    callback_data="sign_up"
                ),
                InlineKeyboardButton(
                    text="üîÆ –í–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π",
                    callback_data="log_in"
                )
            )

        refferal_link = message.get_args()

        if not refferal_link:
            await bot.send_message(
                user_id,
                text=(
                    f"<i>ü¶é –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –î–æ–±—Ä–æ –ø"
                    "–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –ª—É—á—à–∏–π –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç –≤–æ –≤—Å—ë–º "
                    "—Ç–µ–ª–µ–≥—Ä–∞–º–µ! \n\n‚öôÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Ç–æ–≥–æ,"
                    " —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å‚Ä¶</i>"
                ),
                reply_markup=markup
            )
            return

        try:
            inviter = cur.select("COUNT(*)", "userdata").where(
                login_id=refferal_link).one()
        except TypeError:
            inviter = 0

        if inviter < 1:
            await bot.send_message(
                user_id,
                text=(
                    f"ü¶é<i> –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ"
                    "–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å, –ª—É—á—à–∏–π –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç –≤–æ –≤—Å—ë–º —Ç–µ"
                    "–ª–µ–≥—Ä–∞–º–µ! \n\n‚öôÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ"
                    "–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å‚Ä¶</i>"
                ),
                reply_markup=markup
            )
        elif inviter > 1:
            raise ValueError("more than one inviter with this referal ID")
        elif inviter == 1:
            await self._register_refferal(
                message,
                int(decode_payload(refferal_link))
            )

    async def _clan_start(self, chat: Chat):
        '''
        start command in clan

        :param chat:
        '''
        count = cur.select("count(*)", "clandata").where(clan_id=chat.id).one()

        if count == 0:
            return await bot.send_message(
                chat.id,
                f"<i>–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω <b>{chat.title}</b></i>",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(
                        text="‚ûï –°–æ–∑–¥–∞—Ç—å",
                        callback_data="create_clan"
                    )
                )
            )

        description = cur.select("description", "clandata").where(
            clan_id=chat.id).one()
        if description:
            description = '\n\n' + description

        markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                'ü§µ‚Äç‚ôÇÔ∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è', callback_data="join_clan"),
            InlineKeyboardButton("ü•æ –ü–æ–∫–∏–Ω—É—Ç—å", callback_data="leave_clan")
        ).add(
            InlineKeyboardButton(
                "üèó –ü–æ—Å—Ç—Ä–æ–π–∫–∏", callback_data="clan_buildings"),
            InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="clan_members")
        ).add(
            InlineKeyboardButton("üîù", callback_data="clan_top"),
            InlineKeyboardButton("‚öôÔ∏è", callback_data="clan_settings"),
            InlineKeyboardButton("üì£", callback_data="call_clan")
        )

        clan_name = cur.select("clan_name", "clandata").where(
            clan_id=chat.id).one()
        clan_balance = cur.select("clan_balance", "clandata").where(
            clan_id=chat.id).one()
        top = cur.execute(
            "SELECT clan_id FROM clandata ORDER BY clan_balance"
        ).fetchall()

        top_num = 0
        for i in top:
            top_num += 1
            if i == chat.id:
                break

        HQplace = cur.select("HQ_place", "clandata").where(
            clan_id=chat.id).one()
        address = cur.select("address", "clandata").where(
            clan_id=chat.id).one()
        clanphoto = cur.select("photo_id", "clandata").where(
            clan_id=chat.id).one()

        members_count = cur.select("count(*)", "userdata").where(
            clan_id=chat.id).one()

        text = f"""
            üèØ <i>–ö–ª–∞–Ω <b>{clan_name}</b>{description or ''}\n
            \nüè¨ –®—Ç–∞–±-–∫–≤–∞—Ä—Ç–∏—Ä–∞: <b>{HQplace}{f', {address}' if address else ''}
            </b>\n\n<b>{members_count} üë• {clan_balance} üí≤{top_num} üîù</b></i>
        """

        return (
            await bot.send_photo(
                chat.id, clanphoto, caption=text, reply_markup=markup
            )
            if clanphoto
            else await bot.send_message(chat.id, text, reply_markup=markup)
        )

    async def _casino_start(self, message: Message):
        balance = cur.select("clan_balance", "clandata").where(
            clan_id=OfficialChats.CASINOCHAT).one()
        treasury = cur.select("treasury", "globaldata").one()

        await message.answer(
            (
                "üéÆ <i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–≥—Ä–æ–≤–æ–π –∫–ª—É–±! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Å–µ"
                "–ª–∏—Ç—å—Å—è –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥. –ù–æ –±—É–¥—å—Ç–µ –æ"
                "—Å—Ç–æ—Ä–æ–∂–Ω—ã, –∏–Ω–∞—á–µ –∫–∞–∑–∏–Ω–æ –∑–∞–±–µ—Ä—ë—Ç —É –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥—Ä–æ—à–∏‚Ä¶\n\n‚ÄºÔ∏è"
                "–ú—ã –∫—Ä–∞–π–Ω–µ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏,"
                " –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ –±–æ–ª—å—à–∏–µ –¥–µ–Ω—å–≥–∏.\n\nüí≤ –ë–∞–ª–∞–Ω—Å –ö–∞–∑–∏–Ω–æ: <b>"
                f"{balance}</b>\n\nüè¶ –ö–∞–∑–Ω–∞ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞: <b>{treasury}</b></i>"
            ),
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton(
                    text="‚ùì –ü–æ–º–æ—â—å –ø–æ –º–∏–Ω–∏-–∏–≥—Ä–∞–º",
                    callback_data="casino_help"
                )
            )
        )

    async def on_sign_up(self, call: CallbackQuery):
        if call.data == 'sign_up':
            await self.sign_up(call.from_user)
        else:
            await self.sign_up_refferal(
                call.message,
                call.from_user,
                call.data[8:]
            )

    async def _rase_selection_menu(self, user_id: int):
        markup = InlineKeyboardMarkup(row_width=2)
        values = list(RASES.values()) # noqa

        markup.add(
            InlineKeyboardButton(text='üê± –ö–æ—Ç', callback_data='set_rase_üê±'),
            InlineKeyboardButton(text='üê∂ –°–æ–±–∞–∫–∞', callback_data='set_rase_üê∂'),
            InlineKeyboardButton(text='ü¶ù –ï–Ω–æ—Ç', callback_data='set_rase_ü¶ù'),
            InlineKeyboardButton(text='üê∏ –ñ–∞–±–∞', callback_data='set_rase_üê∏'),
            InlineKeyboardButton(text='ü¶â –°–æ–≤–∞', callback_data='set_rase_ü¶â')
        )
        await bot.send_message(
            user_id,
            '<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É</i>',
            reply_markup=markup
        )

    async def set_rase(self, call: CallbackQuery):
        user_id = call.from_user.id

        rase = call.data.replace("set_rase_", "")
        rase = RASES[rase]
        await call.answer('–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!')

        cur.execute(f"UPDATE userdata SET rase=\"{rase.emoji}\" "
                    f"WHERE user_id={user_id};").commit()

        await bot.send_photo(
            user_id,
            rase.image_url,
            f"<i>–¢—ã: {rase.emoji} <b>{rase.ru_name}</b></i>"
        )
        await call.message.delete()
        await self._continue_registration(user_id)

    async def _continue_registration(self, user_id: int):
        rase = cur.select("rase", "userdata").where(user_id=user_id).one()
        if not rase or rase == "ü§î":
            return await self._rase_selection_menu(user_id)
        await bot.send_message(
            user_id,
            "<i>üëæ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –∂–∏–≤–æ–ø–æ–ª–∏—Å–µ! –î–æ–±—Ä–æ"
            " –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å :3</i>",
            reply_markup=ReplyKeyboardRemove()
        )
        await self._private_start(user_id)

    async def sign_up(self, user: User):
        '''
        Shell for inserting user into database

        :param user (aiogram.types.User) - user that will be inserted
        :param chat_id (int) - chat id in which messages will be sent
        '''
        count = cur.select("COUNT(*)", "userdata").where(
            user_id=user.id).one()

        if count > 0:
            return await bot.send_message(
                user.id,
                "<i>üò® –í—ã —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç</i>",
                reply_markup=ReplyKeyboardRemove()
            )

        insert_user(user)
        await tglog(
            f"<b><a href=\"{await get_link(user.id)}\">{user.full_name}</a></b"
            "> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è(-–∞—Å—å) –∫ –ñ–∏–≤–æ–ø–æ–ª–∏—Å—É",
            "#user_signup"
        )

        cur.execute(f"UPDATE userdata SET register_date={current_time()} "
                    f"WHERE user_id={user.id};").commit()
        cur.execute(f"UPDATE userdata SET lastseen={current_time()} "
                    f"WHERE user_id={user.id};").commit()

        await self._continue_registration(user.id)


def register(dp: Dispatcher):
    dp.register_message_handler(
        StartCommand().start_cmd,
        RequireBetaFilter(),
        commands=['start']
    )
    dp.register_callback_query_handler(
        StartCommand().on_sign_up,
        RequireBetaFilter(),
        Text(startswith="sign_up")
    )
    dp.register_callback_query_handler(
        StartCommand().set_rase,
        RequireBetaFilter(),
        Text(startswith="set_rase_")
    )
