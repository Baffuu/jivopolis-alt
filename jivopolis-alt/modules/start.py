from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from ..database.sqlitedb import check, cur

async def start_cmd(message: Message):
    try:
        user_id = message.from_user.id
        
        await check(user_id, message.chat.id)
        cur.execute('select health from userdata where user_id=?', (message.from_user.id,)).fetchone()
        health = cur.fetchone()[0]
        if health <= 0:
            await message.reply('<i>&#9760; –í—ã —É–º–µ—Ä–ª–∏. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –≤–∞—Å –≤–æ—Å–∫—Ä–µ—Å–∏—Ç—å</i>', parse_mode = 'html')
            return
    except Exception as e:
        print(e)
    try:
        chat_id = message.chat.id
        if message.chat.type == "private":
            err = ''
            unerrored = True
            leader = '&#127942; –õ–∏–¥–µ—Ä—ã –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:'
            try:
                rasa = cur.execute(f'SELECT rasa FROM userdata WHERE user_id = {user_id}').fetchone()
                nick = cur.execute(f'SELECT nick FROM userdata WHERE user_id = {user_id}').fetchone()
            except:
                markup = InlineKeyboardMarkup()
                button = InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data='{0}'.format(createacc2))
                markup.add(button)
                button = InlineKeyboardButton(text='–í–æ–π—Ç–∏', callback_data='log_in')
                markup.add(button)
                text = f"<i>&#128075; <b>{message.from_user.full_name}, –ø—Ä–∏–≤–µ—Ç!</b>\n–¢—ã –ø–æ–ø–∞–ª –≤ <code>–ñ–∏–≤–æ–ø–æ–ª–∏—Å</code>.\
                –≠—Ç–æ –ª—É—á—à–∏–π –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç –≤ Telegram\n\n–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!</i>"
            else:
                cur.execute('''SELECT * FROM userdata WHERE type="public" AND rang=0 ORDER BY balance DESC LIMIT 10''')
                for row in cur:
                    leader+=f'\n<b><a href="tg://user?id={row[1]}">{row[9]}{row[7]}</a> - ${3}</b>'.format(row[1], row[9], row[7], row[5])
                rank = cur.execute(f'SELECT rank FROM userdata WHERE user_id = {user_id}').fetchone()
                phone = cur.execute(f'SELECT phone FROM userdata WHERE user_id = {user_id}').fetchone()

                markup = InlineKeyboardMarkup(row_width=2)
                buttons = [InlineKeyboardButton(text='üíº –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data='inventory'),
                    InlineKeyboardButton(text='üèõ –ì–æ—Ä–æ–¥', callback_data='city'),
                    InlineKeyboardButton(text='üì¨ –ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫', callback_data='mailbox'), 
                    InlineKeyboardButton(text='üí¨ –ß–∞—Ç—ã', callback_data='chats'),
                    InlineKeyboardButton(text='ü§µ –†–∞–±–æ—Ç–∞—Ç—å', callback_data='work'),
                    InlineKeyboardButton(text='üÉè –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile'),
                    InlineKeyboardButton(text='‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='user_settings'),
                    InlineKeyboardButton(text='üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞', callback_data='economics'),
                    InlineKeyboardButton(text='‚ùì –ü–æ–º–æ—â—å', callback_data='help')]

                if phone >= 1:
                    buttons.append(InlineKeyboardButton(text='üì± –¢–µ–ª–µ—Ñ–æ–Ω', callback_data='smartphone'))

                buttons.append(**[])

                if rank >= 2:
                    buttons.append(InlineKeyboardButton(text='üëë –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å', callback_data='adminpanel'))

                markup.add(**buttons)
                balance = cur.execute(f'SELECT balance FROM userdata WHERE user_id = {user_id}')
                points = cur.execute(f'SELECT points FROM userdata WHERE user_id = {user_id}')
                health = cur.execute(f'SELECT health FROM userdata WHERE user_id = {user_id}')
                health = cursor.fetchone()[0]
                cursor.execute('SELECT lvl FROM userdata WHERE user_id=?', (a,))
                lvl = cursor.fetchone()[0]
                if lvl<len(levelrange)-1:
                    rem = '–∏–∑ {0}'.format(levelrange[lvl+1])
                else:
                    rem = '- –º–∞–∫—Å. —É—Ä–æ–≤–µ–Ω—å'
                rand = random.choice(hellos)
                text = '<i>{6}, <b><a href="tg://user?id={2}">{0}{1}</a></b>\n&#128178; –ë–∞–ª–∞–Ω—Å: <b>${4}</b>\n&#128305; –£—Ä–æ–≤–µ–Ω—å: {5}\n&#128138; –ó–¥–æ—Ä–æ–≤—å–µ: <b>{7}</b>\n{3}</i>'.format(ras,nick, a, leader, balance, '<b>{0}</b> ({1} {2})'.format(lvl, points, rem), rand, health)
                await message.answer('<i>{0}</i>'.format(random.choice(randomtext)), parse_mode='html')
                await message.answer(text, parse_mode='html', reply_markup=markup)
                if " " in message.text:
                    reflink = message.text.split()[1]
                else:
                    return
            cursor.execute('SELECT count(user_id) FROM userdata WHERE ref=?', (reflink,))
            count = cursor.fetchone()[0]
            if count!=1:
                unerrored = False
                err += '\n‚Ä¢–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞'
                referrer_candidate = 0
            else:
                cursor.execute('SELECT user_id FROM userdata WHERE ref=?', (reflink,))
                referrer_candidate = cursor.fetchone()[0]
            try:
                cursor.execute('SELECT balance FROM userdata WHERE user_id = ?', (referrer_candidate,))
                temp = cursor.fetchone()[0]
                cursor.execute('UPDATE userdata SET balance = ? WHERE user_id = ?', (temp, referrer_candidate,))
                conn.commit()
            except Exception as e:
                unerrored = False
                err += '\n‚Ä¢–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ —á—å–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –≤—ã –ø–µ—Ä–µ—à–ª–∏, –Ω–µ—Ç –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ\n‚Ä¢<b>–ò—Å–∫–ª—é—á–µ–Ω–∏–µ:</b> {0}'.format(e)
            if a==referrer_candidate:
                unerrored = False
                err += '\n‚Ä¢–í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ'
            try:
                cursor.execute('SELECT count(id) FROM userdata WHERE user_id=?', (a,))
                count = cursor.fetchone()[0]
                if count>0:
                    unerrored = False
                    err += '\n‚Ä¢–£ –≤–∞—Å —É–∂–µ –±—ã–ª –∞–∫–∫–∞—É–Ω—Ç –¥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ'
            except:
                pass
            if unerrored:
                try:
                    await create_acc(message.from_user, message.chat.id)
                    cursor.execute('SELECT place FROM userdata WHERE user_id = ?', (referrer_candidate,))
                    st = cursor.fetchone()[0]
                    cursor.execute('UPDATE userdata SET balance=balance+100 WHERE user_id=?', (message.from_user.id,))
                    conn.commit()
                    cursor.execute('UPDATE userdata SET place=? WHERE user_id=?', (st, message.from_user.id,))
                    conn.commit()
                    cursor.execute('UPDATE userdata SET refid=? WHERE user_id=?', (referrer_candidate, message.from_user.id,))
                    conn.commit()
                    await message.answer('<i>&#9989; –í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ $100 –Ω–∞ –±–∞–ª–∞–Ω—Å</i>', parse_mode = 'html');
                except Exception as e:
                    unerrored = False
                    err += '\n‚Ä¢–£ –≤–∞—Å —É–∂–µ –±—ã–ª –∞–∫–∫–∞—É–Ω—Ç –¥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ\n‚Ä¢<b>–ò—Å–∫–ª—é—á–µ–Ω–∏–µ:</b> {0}'.format(e)
            if unerrored:
                cursor.execute('SELECT nick FROM userdata WHERE user_id = ?', (referrer_candidate,))
                onick = cursor.fetchone()[0]
                cursor.execute('SELECT rasa FROM userdata WHERE user_id = ?', (referrer_candidate,))
                orasa = cursor.fetchone()[0]
                cursor.execute('SELECT nick FROM userdata WHERE user_id = ?', (a,))
                nick = cursor.fetchone()[0]
                cursor.execute('SELECT rasa FROM userdata WHERE user_id = ?', (a,))
                rasa = cursor.fetchone()[0]
                await main.send_message(fid, '<i><b><a href="tg://user?id={2}">{1}{0}</a></b> –ø–µ—Ä–µ—à—ë–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ <b><a href="tg://user?id={5}">{4}{3}</a></b>\n#user_ref</i>'.format(nick, rasa, a, onick, orasa, referrer_candidate), parse_mode = 'html')
                await main.send_message(a, '<i>–í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ <b><a href="tg://user?id={2}">{1}{0}</a></b></i>'.format(onick, orasa, referrer_candidate), parse_mode = 'html')
                await main.send_message(referrer_candidate, '<i>–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à—ë–ª <b><a href="tg://user?id={2}">{1}{0}</a></b></i>'.format(nick, rasa, a), parse_mode = 'html')
                try:
                    cursor.execute('UPDATE userdata SET lootbox = lootbox+1 WHERE user_id = ?', (referrer_candidate,))
                    conn.commit()
                    await main.send_message(referrer_candidate, '<i>üì¶ –í–∞–º –≤—ã–¥–∞–Ω 1 –ª—É—Ç–±–æ–∫—Å</i>', parse_mode = 'html');
                except Exception as e:
                    await main.send_message(referrer_candidate, '<i><b>&#10060; –û—à–∏–±–∫–∞: </b>{0}</i>'.format(e), parse_mode = 'html');
            else:
                await main.send_message(a, '<i><b>&#10060; –ü—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: </b>\n{0}</i>'.format(err), parse_mode = 'html')
        else:
            a = message.from_user.id
            chid = message.chat.id
            cursor.execute('SELECT count(*) FROM clandata WHERE group_id = ?', (chid,))
            count = cursor.fetchone()[0]
            if count == 0:
                chn = message.chat.title
                markup = types.InlineKeyboardMarkup()
                buttons = types.InlineKeyboardButton(text='‚ûï –°–æ–∑–¥–∞—Ç—å', callback_data='create_clan')
                markup.add(buttons)
                await main.send_message(chid, '<i>–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω <b>{0}</b></i>'.format(chn), parse_mode = 'html', reply_markup = markup)
            else:
                cursor.execute('SELECT name FROM clandata WHERE group_id=?', (chid,))
                chn = cursor.fetchone()[0]
                cursor.execute('SELECT bio FROM clandata WHERE group_id=?', (chid,))
                bio = cursor.fetchone()[0]
                markup = types.InlineKeyboardMarkup()
                buttons = types.InlineKeyboardButton(text='‚ûï –í—Å—Ç—É–ø–∏—Ç—å/–í—ã–π—Ç–∏', callback_data='join_clan')
                markup.add(buttons)
                buttons = types.InlineKeyboardButton(text='üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞', callback_data='clan_members')
                markup.add(buttons)
                buttons = types.InlineKeyboardButton(text='‚úè –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='clan_settings')
                markup.add(buttons)
                buttons = types.InlineKeyboardButton(text='üì£ –°–æ–∑–≤–∞—Ç—å –∫–ª–∞–Ω', callback_data='call_clan')
                markup.add(buttons)
                markup.add(types.InlineKeyboardButton(text='üèó –ö–æ–º–Ω–∞—Ç—ã (–ø–æ—Å—Ç—Ä–æ–π–∫–∏)', callback_data='clan_buildings'))
                cursor.execute('SELECT balance FROM clandata WHERE group_id = ?', (chid,))
                balance = cursor.fetchone()[0]
                cursor.execute('SELECT hqplace FROM clandata WHERE group_id = ?', (chid,))
                hqplace = cursor.fetchone()[0]
                cursor.execute('SELECT address FROM clandata WHERE group_id = ?', (chid,))
                address = cursor.fetchone()[0]
                cursor.execute('SELECT photo FROM clandata WHERE group_id = ?', (chid,))
                photo = cursor.fetchone()[0]
                leader = '&#127942; –¢–æ–ø –∫–ª–∞–Ω–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:'
                cursor.execute('SELECT COUNT(*) FROM clandata WHERE (type=? AND balance < 1000000) OR group_id=-1001395868701', ('public',))
                count = cursor.fetchone()[0]
                cursor.execute('''SELECT * FROM clandata
                WHERE (type=? AND balance < 1000000) OR group_id=-1001395868701
                ORDER BY balance DESC
                LIMIT 10''', ('public',))
                for row in cursor:
                    leader+='\n<b><a href="{0}">{1}</a> - ${2}</b>'.format(row[8], row[1], row[4])
                prof = '<i>–ö–ª–∞–Ω <b>{0}</b>\n{4}&#128176; –ë–∞–ª–∞–Ω—Å: <b>${1}</b>\n&#127970; –®—Ç–∞–±-–∫–≤–∞—Ä—Ç–∏—Ä–∞: <b>{2}</b>\n{3}</i>'.format(chn, balance, '{0}, {1}'.format(hqplace, address) if hqplace != '' else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', leader if count!=0 else '', '\n{0}\n\n'.format(bio) if bio!='' else '')
                if photo=='':
                    await main.send_message(chid, prof, parse_mode = 'html', reply_markup = markup)
                else:
                    try:
                        await main.send_photo(chid, photo, caption=prof, parse_mode = 'html', reply_markup = markup)
                    except:
                        await main.send_message(chid, prof, parse_mode = 'html', reply_markup = markup)
    except Exception as e:
        await main.send_message(chid, '<i><b>&#10060; –û—à–∏–±–∫–∞: </b>{0}</i>'.format(e), parse_mode = 'html')