import contextlib

from .start import StartCommand, create_acc
from .callbacks import *
from .. import bot, logger, Dispatcher
from ..misc import ITEMS
from ..misc.config import SUPPORT_LINK, villages, trains
from ..database.functions import check, cur, profile, eat
from ..filters import RequireBetaFilter

from aiogram.types import CallbackQuery

async def callback_handler(call: CallbackQuery):
    '''
    handler for all callbacks 
    
    :param call - callback:
    '''
    try:
        with contextlib.suppress(AttributeError):
            await check(call.from_user.id, call.message.chat.id)
        health = cur.execute(f"SELECT health FROM userdata WHERE user_id={call.from_user.id}").fetchone()[0]
        is_banned = bool(cur.execute(f"SELECT is_banned FROM userdata WHERE user_id={call.from_user.id}").fetchone()[0])

        if is_banned:
            await call.answer(
                'üßõüèª‚Äç‚ôÇÔ∏è –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã –≤ –±–æ—Ç–µ. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ - –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                show_alert=True,
            )
            return await bot.send_message(
                call.from_user.id, 
                ("üßõüèª‚Äç‚ôÇÔ∏è –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã –≤ –±–æ—Ç–µ. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ - –æ—à–∏–±–∫–∞, "
                f"–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ <a href='{SUPPORT_LINK}'>–ø–æ–¥–¥–µ—Ä–∂–∫—É</a>."),
            )

        if health < 0:
            await call.answer(text='‚ò†Ô∏è –í—ã —É–º–µ—Ä–ª–∏')
            if call.message.chat.type == 'private':
                return await call.message.answer('<i>‚ò†Ô∏è –í—ã —É–º–µ—Ä–ª–∏. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –≤–∞—Å –≤–æ—Å–∫—Ä–µ—Å–∏—Ç—å</i>' )

        match (call.data):
            case sign if sign.startswith('sign_up'):
                if call.data == 'sign_up':
                    await create_acc(call.from_user, call.from_user.id)
                else:
                    await StartCommand().sign_up_refferal(call.message, call.from_user, call.data[8:])
            case 'chats':
                await chats(call.from_user.id, call.message)
            case 'adminpanel':
                await adminpanel(call, call.from_user.id)
            case 'itemsinfo_table':
                await itemsinfo_table(call, call.from_user.id)
            case 'inventory':
                await inventory(call)
            case item if item.startswith('iteminfo_'):
                await itemsinfo_item(call, call.from_user.id)
            case item if item in ITEMS:
                await itemdesc(call, call.from_user.id)
            case 'cancel_action':
                await bot.delete_message(call.message.chat.id, call.message.message_id)
            case 'no_items_in_inventory':
                await call.answer('üôâ  –£ –≤–∞—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ù–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏—Ö –∫—É–ø–∏—Ç—å.', show_alert=True)
            case 'put_mask_off':
                await put_mask_off(call, call.from_user.id)
            case mask if mask.startswith('put_mask_on_'):
                await put_mask_on(call, call.data[12:])
            case 'my_refferals':
                await my_refferals(call.message, call.from_user.id)
            case 'profile':
                await profile(call.from_user.id, call.message, True)
            case 'mailbox' | 'open_lootbox':
                await lootbox_button(call.from_user.id, call.message)
            case 'adminhelp':
                await adminhelp(call, call.from_user.id)
            case sql_request if sql_request.startswith('sqlrun:'):
                if call.data.startswith('sqlrun:approve:'):
                    await sqlapprove(call)
                elif call.data.startswith('sqlrun:decline:'):
                    await sqldecline(call)
            case 'restart_bot':
                await restart(call)
            case 'set_user_bio':
                await set_user_bio(call)
            case food if food.startswith('eat_'):
                await eat(call, call.data[4:])
            case buy if buy.startswith('buy_'):
                await buycall(call)
            case 'adminchats':
                await adminchats(call)
            case 'city':
                await city(call.message, call.from_user.id) #todo refactoring
            case 'car_menu':
                await car_menu(call)
            case car if car.startswith('goto_on_car'):
                await goto_on_car(call)
            case 'local_people':
                await local_people(call)
            case cheque if cheque.startswith('check_'):
                await get_cheque(call, call.from_user.id)
            
            case 'phone_shop':
                await shop(
                    call,
                    place='–ì–µ–Ω–µ—Ä–∞–ª–∞ –®–µ–ª–±–∏',
                    items=['phone'],
                    text='üì± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ç–µ—Ö–Ω–∏–∫–∏ –∏–º–µ–Ω–∏ –®–µ–ª–±–∏'
                )
            case 'candy_shop':
                await shop(
                    call,
                    place='–ì–µ–æ—Ä–≥–∏–µ–≤—Å–∫–∞—è',
                    items=[
                        'donut', 'cookie', 'chocolate', 'cake',
                        'yogurt', 'ice_cream', 'shaved_ice',
                    ],
                    text='üç∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫—É—é!'
                )
            case 'japan_shop':
                await shop(
                    call,
                    place='–¢–¶ –ú–∏–ì',
                    items=[
                        'bento', 'rice', 'pasta'
                    ],
                    text='üç± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –≤–æ—Å—Ç–æ—á–Ω–æ–π –∫—É—Ö–Ω–∏ "–Ø–ø–æ–Ω –ï–Ω–æ—Ç"!'
                )
            case 'xmas_shop':
                await shop(
                    call,
                    place='',
                    items=[
                        'snowman',  'snowflake', 'xmastree',  'fairy', 
                        'santa_claus',  'mrs_claus', 'firework',
                        'fireworks', 'confetti'
                    ],
                    text='üéÑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π —Ä–∞–∑–¥–µ–ª –º–∞–≥–∞–∑–∏–Ω–∞ ModaShop!',
                )
            case 'fruit_shop':
                await shop(
                    call, 
                    place='',
                    items=[
                        'apple', 'cucumber', 'tomato', 'kiwi', 'coconut'
                    ],
                    text='üçè –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–º–∞–≥–∞–∑–∏–Ω "–ù–∞—Ç—É—Ä–∞–ª"!'
                )
            case 'zoo_shop':
                await shop(
                    call,
                    place='–ó–æ–æ–ø–∞—Ä–∫',
                    items=[
                        'seal', 'cow', 'hedgehog', 
                        'wolf', 'fox', 'hamster'
                    ],
                    text=(
                        "üêò –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–æ–æ–ø–∞—Ä–∫! –ó–¥–µ—Å—å –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ"
                        " –∫—É–ø–∏—Ç—å –ø–∞—Ä—É –∂–∏–≤–æ—Ç–Ω—ã—Ö, —É –∑–æ–æ–ø–∞—Ä–∫–æ–≤ –Ω—ã–Ω—á–µ —Å–æ–≤—Å–µ–º –¥–µ–Ω–µ–≥ –Ω–µ—Ç‚Ä¶"
                        "\n\n*–≤—ã –Ω–∞—Å—Ç–æ—Ä–∞–∂–∏–≤–∞–µ—Ç–µ—Å—å* ü§î - –ê —ç—Ç–æ –≤–æ–æ–±—â–µ –ª–µ–≥–∞–ª—å–Ω–æ?"
                    ),
                )
            case 'enot_kebab_shop':
                await shop(
                    call,
                    place=villages + trains[0],
                    items=[
                        'burger', 'fries', 'shaurma', 'cheburek', 'beer'
                    ],
                    text=(
                        "üçî –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞–∫—É—Å–æ—á–Ω—É—é –ï–Ω–æ—Ç-–ö–µ–±–∞–±! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –ª—É—á—à—É—é –µ–¥—É "
                        "–ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º –∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ —Ç–æ—á–Ω–æ –Ω–µ –æ—Ç—Ä–∞–≤–∏—Ç–µ—Å—å! (–Ω–∞–¥–µ–µ–º—Å—è)"
                        "\n\n*–≤—ã –∑–∞–º–µ—á–∞–µ—Ç–µ –Ω–∞–¥–ø–∏—Å—å* ‚ÄºÔ∏è –ï–Ω–æ—Ç–æ–≤ –º—ã –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–¥–∞—ë–º, "
                        "–Ω–∞–º –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏!"
                    ),
                )
            case 'botan_garden_shop':
                await shop(
                    call, 
                    place='–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è',
                    items=[
                        'clover', 'palm', 'rose', 'tulip',
                        'houseplant', 'cactus'
                    ],
                    text=(
                        "üå≤–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–π –°–∞–¥! –°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞ –ø–∞—Ä–æ—á–∫–∏ "
                        "–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤, –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–∑–≥–ª—è–Ω—É—Ç—å?"
                    )
                )
            case 'car_shop':
                await shop(
                    call, 
                    place='–ê–≤—Ç–æ–ø–∞—Ä–∫ –∏–º. –ö–æ—Ç–∞',
                    items=[
                        'red_car', 'blue_car'
                    ],
                    text=(
                        "üèé *–≤—ã —Å–ª—ã—à–∏—Ç–µ —Ä—ë–≤ –º–æ—Ç–æ—Ä–∞* –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–º—ã–π –∫—Ä—É—Ç–æ–π –∞–≤—Ç–æ–ø–∞—Ä–∫ –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ!"
                        "\n\nü§î *–≥–æ–≤–æ—Ä—è—Ç, –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–ø–∞—Ä–∫–∞ - —Å–∞–º—ã–π —É—Å–ø–µ—à–Ω—ã–π –∫–æ—Ç –≤ –∂–∏–≤–æ–ø–æ–ª–∏—Å–µ*"
                    ),
                )
            case 'hospital_shop':
                await shop(
                    call,
                    place=['–†–∞–π–±–æ–ª—å–Ω–∏—Ü–∞', '–°—Ç–∞—Ä–æ–∫–æ—Ç–∞–π—Å–∫–∏–π –§–ê–ü'],
                    items= ['pill x1', 'pill x2', 'pill x3'],
                    text="üè• –î–æ–±—Ä–æ –Ω–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—É—é –±–æ–ª—å–Ω–∏—Ü—É! –†–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç–µ—Å—å –Ω–∞ –∫–æ–π–∫–µ –∏ –Ω–µ —É–º—Ä–∏—Ç–µ –¥–æ –ø—Ä–∏—Ö–æ–¥–∞ –¥–æ–∫—Ç–æ—Ä–∞."
                )
            case 'building_shop':
                await shop(
                    call, 
                    place='–ú–∞–∫—Å–∏–º–µ–Ω–∫–∞',
                    items=['window', 'brick', 'door'],
                    text='üß± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω - –¥–æ–º –ª—é–±–æ–≥–æ –º—É–∂—á–∏–Ω—ã!'
                )

            case 'moda_menu':
                await moda_menu(call)
            case 'mall':
                await mall(call)

            case 'my_reflink':
                await my_reflink(call)
            case 'cellphone_menu':
                await cellphone_menu(call)
            case 'delivery_app':
                await delivery_menu(call)
            case 'central_market_menu':
                await central_market_menu(call)
            case 'central_market_food':
                await central_market_food(call)
            case 'central_market_mask':
                await central_market_mask(call)
            case sell if sell.startswith('sellitem_'):
                await sellitem(call, call.data[9:])
            case 'bank':
                await bank(call)
            case 'state_balance':
                await state_balance(call)
            case state if state.startswith('give_state'):
                await give_state(call, call.data[9:])
            case 'taxi_menu':
                await taxi_menu(call.message, call.from_user.id)
            case taxi if taxi.startswith('taxicost_'):
                await taxicost(call, call.data[9:])
            case taxi if taxi.startswith('taxi_goto_'):
                await taxi_goto_(call, call.data[10:])
            case 'gps':
                await gps_menu(call)
            case buy24 if buy24.startswith('buy24_'):
                await buy24_(call, call.data[6:])
            case 'economics':
                await economics(call)
            case 'shop_24':
                await shop_24(call)
            case 'join_clan':
                await joinclan(call, call.from_user.id)
            case 'leave_clan':
                await leaveclan(call)
            case "create_clan":
                await create_clan(call)
            case buyclan if buyclan.startswith('buyclan_'):
                await buyclan_(call, call.data.replace('buyclan_', ''))
                
            case taxi if taxi.startswith("taxi_next:"):
                await taxi_next(call, int(call.data.replace("taxi_next:", "")))
            case taxi if taxi.startswith("taxi_previous:"):
                await taxi_previous(call, int(call.data.replace("taxi_previous:", "")))
            case _:
                return await call.answer('‚ôøÔ∏è 404: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', show_alert=True)
    except TypeError as e:
        logger.exception(e)
        if call.data.startswith('sign_up'):
            if call.data == 'sign_up':
                await create_acc(call.from_user, call.from_user.id)
            else:
                await StartCommand().sign_up_refferal(call.message, call.from_user, call.data[8:])
            return await call.answer('‚òÅÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ‚Ä¶')
        return await call.answer("üßë‚Äçüé® –°—ç—Ä, —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∂–∏–≤–æ–ø–æ–ª–∏—Å–µ. –ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –∫–æ–º–º–∞–Ω–¥—ã –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.", show_alert=True)
    except Exception as e:
        logger.exception(e)
    return await call.answer('...')
 
        
def register(dp: Dispatcher):
    dp.register_callback_query_handler(callback_handler, RequireBetaFilter())