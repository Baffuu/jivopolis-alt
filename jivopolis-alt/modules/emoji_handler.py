import contextlib
import random
import asyncio
from ..filters import RequireBetaFilter
from ..database.functions import check, earn
from ..database import cur
from ..misc import OfficialChats, get_embedded_link
from ..misc.constants import SLOTMACHINE_TOKEN_COST, ERROR_MESSAGE
from .. import bot, Dispatcher, logger
from aiogram.types import Message, ChatType


async def dice_handler(message: Message):
    try:
        with contextlib.suppress(AttributeError):
            await check(message.from_user.id, message.chat.id)
        health = cur.select("health", "userdata").where(
            user_id=message.from_user.id).one()

        is_banned = bool(
            cur.select("is_banned", "userdata").where(
                user_id=message.from_user.id).one()
        )

        if is_banned:
            await message.answer(
                'üßõüèª‚Äç‚ôÇÔ∏è <i>–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –±–æ—Ç–µ. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ '
                '–æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ '
                '<a href="{OfficialChats.SUPPORTCHATLINK}">–ø–æ–¥–¥–µ—Ä–∂–∫—É</a></i>'
            )
            return await bot.send_message(
                message.from_user.id,
                (
                    "üßõüèª‚Äç‚ôÇÔ∏è <i>–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –±–æ—Ç–µ. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ "
                    "—ç—Ç–æ –æ—à–∏–±–∫–∞, "
                    f"–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ <a href='{OfficialChats.SUPPORTCHATLINK}'>"
                    "–ø–æ–¥–¥–µ—Ä–∂–∫—É</a></i>"
                ),
            )

        if health < 0:
            await message.answer(text='<i>‚ò†Ô∏è –í—ã —É–º–µ—Ä–ª–∏</i>')

            if message.chat.type == ChatType.PRIVATE:
                return await message.answer(
                    '<i>‚ò†Ô∏è –í—ã —É–º–µ—Ä–ª–∏. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –≤–∞—Å –≤–æ—Å–∫—Ä–µ—Å–∏—Ç—å</i>'
                )

        count = cur.select("count(*)", "clandata").where(
            clan_id=message.chat.id).one()
        count = 0

        if count != 0:  # todo
            dice = cur.select("dice", "clandata").where(
                group_id=message.chat.id).one()
            if dice == 0:
                return await message.delete()

        '''
        cur.execute("SELECT count(*) FROM clandata WHERE clan_id = ?", (message.chat.id,))  # noqa
        count = cur.fetchone()[0]
        if count == 0:
            return
        cur.execute("SELECT gameclub FROM clandata WHERE clan_id = ?", (message.chat.id,))  # noqa
        gameclub = cur.fetchone()[0]
        if gameclub == 1:
            return
        '''

        if message.dice.emoji == 'üé∞':
            return await slot_machine(message)
    except Exception as e:
        logger.exception(e)
        await message.answer(ERROR_MESSAGE.format(e))


async def slot_machine(message: Message, user_id: int | None = None):
    if message.forward_date:  # to avoid dupe with forward
        return
    user_id = user_id or message.from_user.id
    chat_id = message.chat.id

    balance = cur.select("balance", "userdata").where(
        user_id=user_id).one()

    if balance < SLOTMACHINE_TOKEN_COST:
        return await message.answer(
            "<i>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: <b>$10</b>"
            "</i>"
        )

    _message = await message.answer(
        f"<i><b>{await get_embedded_link(user_id)}</b> –±—Ä–æ—Å–∞–µ—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç –∂–µ—Ç–æ–Ω"
        f" —Å—Ç–æ–∏–º–æ—Å—Ç—å—é <b>${SLOTMACHINE_TOKEN_COST}</b></i>"
    )
    await earn(-SLOTMACHINE_TOKEN_COST, message)

    cur.update("clandata").add(clan_balance=SLOTMACHINE_TOKEN_COST//2).where(
        clan_id=chat_id).commit()
    cur.update("clandata").add(clan_balance=SLOTMACHINE_TOKEN_COST//2).where(
        clan_id=OfficialChats.CASINOCHAT).commit()

    value = message.dice.value

    match (value):
        case 1:  # bar bar bar
            rand = random.randint(50, 75)
            is_win = await _slots_win(user_id, chat_id, 1, rand)
        case x if x in [22, 43]:  # üçáüçáüçá, üçãüçãüçã
            rand = random.randint(100, 125)
            is_win = await _slots_win(user_id, chat_id, 2, rand)
        case 64:  # 777
            rand = random.randint(225, 275)
            is_win = await _slots_win(user_id, chat_id, 3, rand)
        case _:
            is_win = False
    await asyncio.sleep(60)
    await _message.delete()

    if not is_win:
        await message.delete()

WIN_MESSAGE = [
    "<i>üòû –í –∏–≥—Ä–æ–≤–æ–º –∫–ª—É–±–µ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–µ–Ω–µ–≥, –º—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–¥–∞—Ç—å –≤–∞–º"
    " –≤–∞—à–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ</i>",
    "<i>üéè –ù–µ–ø–ª–æ—Ö–æ! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>${}</b></i>",
    "<i>üéâ –ê –≤–∞–º —Å–µ–≥–æ–¥–Ω—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –≤–µ–∑—ë—Ç! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>${}</b></i>",
    "<i>üéä –î–ñ–ï–ö–ü–û–¢! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>${}</b></i>"
]


async def _slots_win(
    user_id,
    chat_id: int | str = 0,
    winner: int = 0,
    price: int = 0
):
    message = WIN_MESSAGE[winner]
    await earn(price, user_id=user_id)
    treasury = cur.execute("SELECT treasury FROM globaldata").fetchone()[0]

    if treasury < price:
        await bot.send_message(chat_id, WIN_MESSAGE[0])
        return False

    cur.update("clandata").add(clan_balance=price//4).where(
        clan_id=OfficialChats.CASINOCHAT).commit()
    cur.update("globaldata").add(treasury=-price//4*3).commit()
    await bot.send_message(chat_id, message.format(price))
    return True


def register(dp: Dispatcher):
    dp.register_message_handler(
        dice_handler,
        RequireBetaFilter(),
        content_types=['dice']
    )
