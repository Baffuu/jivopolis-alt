import contextlib
from ..database.functions import cur, conn, check, SUPPORT_LINK, get_mask, get_link, log_chat
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, InlineKeyboardButton, InlineKeyboardMarkup, ChosenInlineResult
from aiogram import Dispatcher
from .. import logger, bot


async def inline_mode(query: InlineQuery):
    try:
        user_id = query.from_user.id
        await check(user_id, user_id)
        results = []
        try:
            health: int = cur.execute(f"SELECT health FROM userdata WHERE user_id={query.from_user.id}").fetchone()[0]
            is_banned = bool(cur.execute(f"SELECT is_banned FROM userdata WHERE user_id={query.from_user.id}").fetchone()[0])
        except TypeError:
            return 

        if is_banned:
            return await bot.answer_inline_query(
                query.id, 
                [
                    InlineQueryResultArticle(
                        id = 'banned',
                        title = 'üßõüèª‚Äç‚ôÇÔ∏è –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã –≤ –±–æ—Ç–µ.',
                        description = '–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ - –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                        input_message_content = 
                        InputTextMessageContent(
                            f'üßõüèª‚Äç‚ôÇÔ∏è –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã –≤ –±–æ—Ç–µ. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ - –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ <a href="{SUPPORT_LINK}">–ø–æ–¥–¥–µ—Ä–∂–∫—É</a>.'
                        )
                    )
                ]
            )

        if health < 0:
            return await bot.answer_inline_query(query.id, [InlineQueryResultArticle(
                id = 'dead',
                title = '‚ò†Ô∏è –í—ã —É–º–µ—Ä–ª–∏',
                description = '–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –≤–∞—Å –≤–æ—Å–∫—Ä–µ—Å–∏—Ç—å',
                input_message_content = InputTextMessageContent('<i>‚ò†Ô∏è –í—ã —É–º–µ—Ä–ª–∏. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –≤–∞—Å –≤–æ—Å–∫—Ä–µ—Å–∏—Ç—å</i>')
            )])

        data = query.query 

        try:
            nick = cur.execute(f"SELECT nickname FROM userdata WHERE user_id={user_id}").fetchone()[0]
            mask = get_mask(user_id)
            balance = cur.execute(f"SELECT balance FROM userdata WHERE user_id={user_id}").fetchone()[0] 
        except TypeError:
            results.append(InlineQueryResultArticle(
                id = 'account_not_found',
                title = 'üë§ –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
                description = '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –≤ –±–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π!',
                input_message_content = InputTextMessageContent('üê∏ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å.'),
                reply_markup = InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="sign_up")
            ))
            data = None
        
        match(data):
            case None:
                pass
            case give if give.startswith('$'):
                try:
                    money = int(data[1:])
                except:
                    money = None
                    
                markup = InlineKeyboardMarkup()
                try:
                    if money > 0:
                        if balance >= money:
                            markup.add(InlineKeyboardButton(text='üí≤ –ó–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏', callback_data=f'check_{money}'))
                            results.append(InlineQueryResultArticle(
                                id = f'check_{money}',
                                title = f'üí≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –Ω–∞ —Å—É–º–º—É ${money}',
                                description = f'–ë–∞–ª–∞–Ω—Å: ${balance}',
                                input_message_content=InputTextMessageContent(f'<i>&#128178; <b><a href="tg://user?id={user_id}">{mask}{nick}</a></b> –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º <b>${money}</b></i>'),
                                reply_markup = markup,
                            ))
                        else:
                            markup.add(InlineKeyboardButton(text='üí≤ –ó–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏', callback_data=f'check_{balance}'))
                            results.append(InlineQueryResultArticle(
                                id = f'check_{balance}',
                                title = f'üí≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –Ω–∞ —Å—É–º–º—É ${balance}',
                                description = f'–ë–∞–ª–∞–Ω—Å: ${balance}',
                                input_message_content=InputTextMessageContent(f'<i>&#128178; <b><a href="{get_link(user_id)}">{mask}{nick}</a></b> –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º <b>${balance}</b></i>'),
                                reply_markup = markup,
                            ))
                except TypeError:
                    results.append(InlineQueryResultArticle(
                        id = 'check_error',
                        title = 'üö´ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ',
                        description = '—ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–µ —Ç–µ–∫—Å—Ç –∏ –Ω–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ.',
                        input_message_content = InputTextMessageContent('üö´ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ'),
                    ))
        return await bot.answer_inline_query(query.id, results, 1)
    except Exception as e:
        logger.exception(e)


async def on_pressed_inline_query(inline: ChosenInlineResult):
    with contextlib.suppress(Exception):
        user_id = inline.from_user.id
        nick = cur.execute(f"SELECT nickname FROM userdata WHERE user_id={user_id}").fetchone()[0]
        mask = get_mask(user_id)
        data = inline.query

        if data.startswith('$'):
            money = int(data[1:])
            if money > 0:
                cur.execute(f"UPDATE userdata SET balance = balance - {money} WHERE user_id={user_id}"); conn.commit()
                await bot.send_message(log_chat, f'<i>&#128178; <b><a href="{get_link(user_id)}">{mask}{nick}</a></b> –≤—ã–ø–∏—Å–∞–ª —á–µ–∫ –Ω–∞ <b>${money}</b>\n#user_check</i>')
            if money < 0:
                await bot.send_message(log_chat, f'<i>&#128178; <b><a href="{get_link(user_id)}">{mask}{nick}</a></b> –≤—ã—Å—Ç–∞–≤–∏–ª —Å—á—ë—Ç –Ω–∞ <b>${money}</b>\n#user_bill</i>')
    

def register(dp: Dispatcher):
    dp.register_inline_handler(inline_mode)
    dp.register_chosen_inline_handler(on_pressed_inline_query)