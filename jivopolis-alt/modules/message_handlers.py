import random
import time
from datetime import timedelta
from .emoji_handler import slot_machine
from .. import dp, init_ts, cur, bot, get_embedded_link, constants
from ..utils import is_allowed_nonick
from ..database.functions import profile
from ..misc.config import hellos
from .callbacks.inventory import lootbox_button
from aiogram.types import Message
from aiogram.dispatcher.filters import Text
from aiogram.utils.text_decorations import HtmlDecoration

def contains(text: str | tuple, content: str) -> bool:
    if type(text) in [tuple, list]:
        items = [content.__contains__(t) for t in text]
    else:
        items = [content.__contains__(text)]
    return True in items
    
@dp.message_handler(Text(startswith="–∂–∏–≤–æ–ø–æ–ª–∏—Å", ignore_case=True))
async def chatbot_functions(message: Message):
    text = message.text[9:].lower()
    if text.startswith(', '): text = text[1:]

    match (text):
        case t if '–ø—Ä–∏–≤–µ—Ç' in t:
            await message.reply(f'<i>{random.choice(hellos)}</i>')
        case t if contains('–∫–∞–∑–∏–Ω–æ', t):
            _message = await message.answer_dice("üé∞")
            await slot_machine(_message, message.from_user.id)
            del _message
        case t if t.startswith(' –≤—ã–π–¥–∏'):
            await message.reply("üò≠ –ú–Ω–µ —Å–ª–µ–¥—É–µ—Ç —É–π—Ç–∏? –û—á–µ–Ω—å –∂–∞–ª—å, –ø—Ä–æ—â–∞–π—Ç–µ, –¥—Ä—É–∑—å—è‚Ä¶")
            await bot.leave_chat(message.chat.id)
    if text.__contains__('–∫–∞–∫ –¥–µ–ª–∞'):
        await message.reply(f"<i>{random.choice(['–ù–æ—Ä–º–∞–ª—å–Ω–æ', '–ù–æ—Ä–º–∞–ª—å–Ω–æ. –ê —É —Ç–µ–±—è?', '–¢–∏–ø–∞ —Ç–æ–≥–æ', '–ù–æ—Ä–º', '–ù—É, –Ω–æ—Ä–º–∞—Å —Ç–∏–ø–∞'])}</i>")
    elif text.__contains__('–∏–ª–∏'):
        await message.reply(f'<i>{random.choice(text.split(" –∏–ª–∏ "))}</i>')
    elif text.__contains__('–ø—Ä–æ—Ñ–∏–ª—å'):
        await profile_alias_text(message, False)
    elif text.__contains__("–±–∞–ª–∞–Ω—Å"):
        await my_balance_text(message, False)
    elif contains(["–∏–¥", "id"], text):
        await user_id_text(message, False)
    elif contains(["ping", "–ø–∏–Ω–≥"], text):
        await ping_text(message)
    elif text.__contains__("—è—â–∏–∫"):
        await lootbox_text(message, False)
    else:
        await message.reply(f"<i>{random.choice(['–ê?', '–ß—Ç–æ –Ω–∞–¥–æ?', '–ß—ë –∑–≤–∞–ª?', '–ï—â—ë —Ä–∞–∑ –ø–æ–∑–æ–≤—ë—à—å - –ø–æ–ª—É—á–∏—à—å –±–∞–Ω!', '–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç', '–î–∞?'])}</i>")
        
@dp.message_handler(Text(startswith="–ø—Ä–æ—Ñ–∏–ª—å", ignore_case=True))
async def profile_alias_text(message: Message, nonick = True):
    if not await is_allowed_nonick(message.from_user.id) and nonick:
        return
    if message.reply_to_message:
        await profile(message.reply_to_message.from_user.id, message)
    else:
        await profile(message.from_user.id, message)

@dp.message_handler(Text(equals='–º–æ–π –±–∞–ª–∞–Ω—Å', ignore_case=True))
async def my_balance_text(message: Message, nonick = True):
    if not await is_allowed_nonick(message.from_user.id) and nonick:
        return
    user_id = message.from_user.id
    money = cur.execute(f'SELECT balance FROM userdata WHERE user_id={user_id}').fetchone()[0]
    await message.answer(f'<i><b>{await get_embedded_link(user_id)}</b> —Ä–∞–∑–º–∞—Ö–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Å–≤–æ–∏–º–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º–∏ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ <b>${money}</b></i>')
    
@dp.message_handler(Text(equals=['–∏–¥', 'id'], ignore_case=True))
async def user_id_text(message: Message, nonick = True):
    if not await is_allowed_nonick(message.from_user.id) and nonick:
        return
    await message.reply(
        f"<code>{message.reply_to_message.from_user.id}</code>"
        if message.reply_to_message
        else f"<code>{message.from_user.id}</code>"
    )

@dp.message_handler(Text(startswith=["ping", "–ø–∏–Ω–≥"], ignore_case=True))
async def ping_text(message: Message):
    start = time.perf_counter_ns()
    message = await message.reply("üåò")

    await message.edit_text(
        (
            f"<b>PONG ‚ö°Ô∏è </b><code>{round((time.perf_counter_ns() - start) / 10**6, 3)}</code><b> ms.</b>"
            f"<b>\nüöÄ UPTIME: </b><code>{str(timedelta(seconds=round(time.perf_counter() - init_ts)))}</code>"
        )
    )

@dp.message_handler(Text(startswith=["—è—â–∏–∫"], ignore_case=True))
async def lootbox_text(message: Message, nonick = True):
    if not await is_allowed_nonick(message.from_user.id) and nonick:
        return
    await lootbox_button(message.from_user.id, message)
