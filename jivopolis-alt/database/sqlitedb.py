import sqlite3
import random
from typing import Union

from loguru import logger

from ..bot import bot
from ..misc import current_time, log_error
from ..config import limiteds, CREATOR, levelrange, leveldesc, ITEMS, log_chat, ach

from aiogram.types import InlineKeyboardButton, CallbackQuery, ReplyKeyboardRemove, ReplyKeyboardMarkup, User

def connect_database() -> None:
    global conn, cur
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    if conn:
        return logger.success('database connected')
    return logger.critical('database is not connected')

async def check(user_id, chat_id) -> None:
        try:
            lastfill = current_time() - cur.execute('SELECT lastfill FROM globaldata').fetchone()

            if lastfill >= 86400:
                for item in limiteds:
                    cur.execute(f'UPDATE globaldata SET {item}={random.randint(5, 15)}')
                cur.execute(f"UPDATE globaldata SET lastfill={current_time()}")

            cur.execute(f'UPDATE userdata SET lastseen={current_time()} WHERE user_id={user_id}')
            conn.commit()

            points = cur.execute(f'SELECT points FROM userdata WHERE user_id={user_id}').fetchone()

            if user_id == CREATOR:
                cur.execute(f'UPDATE userdata SET rang=3 WHERE user_id={user_id}')
                conn.commit()

            lastelec = current_time() - cur.execute(f'SELECT lastelec FROM userdata WHERE user_id={user_id}').fetchone()

            if lastelec > 86400:
                cur.execute(f'UPDATE userdata set electimes=0 WHERE user_id={user_id}')
                conn.commit()

                cur.execute(f'UPDATE userdata set lastelec={current_time()} WHERE user_id={user_id}')
                conn.commit()

            lvl = cur.execute(f'SELECT level FROM userdata WHERE user_id={user_id}').fetchone()

            if lvl > len(levelrange): 
                return
            elif points >= levelrange[lvl] and points < levelrange[lvl+1]:
                return

            for i in levelrange: #todo recreate
                if points >= i and levelrange.index(i) >= len(levelrange) - 1 and lvl != levelrange.index(i):
                    cur.execute('UPDATE userdata SET lvl=? WHERE user_id=?', (levelrange.index(i), user_id,))
                    conn.commit()

                    try:
                        return await bot.send_message(user_id, f'<i>&#128305; –¢–µ–ø–µ—Ä—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ: <b>{levelrange.index(i)}</b>\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n{leveldesc[levelrange.index(i)]}</i>', parse_mode='html')
                    except Exception as e:
                        return await bot.send_message(chat_id, f'<i>&#128305; –¢–µ–ø–µ—Ä—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ: <b>{levelrange.index(i)}</b>\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n{leveldesc[levelrange.index(i)]}</i>'.format(levelrange.index(i), leveldesc[levelrange.index(i)]), parse_mode='html')
                        
                if points>=i and points<levelrange[levelrange.index(i)+1] and lvl!=levelrange.index(i):
                    cur.execute('UPDATE userdata SET lvl=? WHERE user_id=?', (levelrange.index(i), user_id,))
                    conn.commit()
                    try:
                        return await bot.send_message(user_id, '<i>&#128305; –¢–µ–ø–µ—Ä—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ: <b>{0}</b>\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n{1}</i>'.format(levelrange.index(i), leveldesc[levelrange.index(i)]), parse_mode='html')
                    except Exception as e:
                        return await bot.send_message(chat_id, '<i>&#128305; –¢–µ–ø–µ—Ä—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ: <b>{0}</b>\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n{1}</i>'.format(levelrange.index(i), leveldesc[levelrange.index(i)]), parse_mode='html')

        except Exception as e:
            if 'NoneType' in str(e):
                pass
            else:
                return logger.exception(e)

async def db_table_val(user_id, user_name, user_surname, username, balance, cansteal, nick, bio, rasa, temp, morj, mask, ready, battles, chn):
        cur.execute('INSERT INTO userdata (user_id, user_fullname, username, balance, cansteal, nick, desc, rasa, temp, morj, mask, ready, battles, clanname) VALUES ({user_id}, , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', (user_id, user_name, user_surname, username, balance, cansteal, nick, bio, rasa, temp, morj, mask, ready, battles, chn,))
        conn.commit()

def itemdata(user_id, item) -> Union[str, None, InlineKeyboardButton]:      #migrate to new ITEMS list          
    try: 
        items = cur.execute(f"SELECT {item} FROM userdata WHERE user_id={user_id}").fetchone()

        if items > 0:      
            item_index = ITEMS[1].index(items)             
            return InlineKeyboardButton(text=f'{ITEMS[0][item_index]} {items}', callback_data=ITEMS[1][item_index])
                
        else:      
            return 'emptyslot'           
    except Exception as e:         
        return logger.exception(e)

async def eat(call: CallbackQuery, food: str, heal) -> None:
    user_id = call.from_user.id
    chat = call.message.chat.id

    try:
        health = cur.execute(f'SELECT health FROM userdata WHERE user_id={user_id}').fetchone()
        food_amount = cur.execute(f'SELECT {food} FROM userdata WHERE user_id={user_id}').fetchone()

        if food_amount < 1:
            return await call.answer(text='‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –µ–¥—ã', show_alert = True)

        cur.execute(f'UPDATE userdata SET {food}={food}-1 WHERE user_id={user_id}')
        conn.commit()

        cur.execute(f'UPDATE userdata SET health=health+{heal} WHERE user_id={user_id}')
        conn.commit()

        if heal > 0:
            await call.answer(text=f'‚ù§ +{heal} HP –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ!', show_alert = True)
        else:
            await call.answer(text='ü§¢ –ó–∞—á–µ–º —è —ç—Ç–æ —Å—ä–µ–ª? –¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω–µ—Ö–æ—Ä–æ—à–æ', show_alert = True)
            health = cur.execute(f'SELECT health FROM userdata WHERE user_id={user_id}').fetchone()

            if health < 1:
                await bot.send_message(chat, '<i>&#9760; –í—ã —É–º–µ—Ä–ª–∏</i>', parse_mode='html')

    except Exception as e:
        await bot.send_message(chat, '&#10060; <i>–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–∫–∫–∞—É–Ω—Ç –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ. –ï—Å–ª–∏ –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫–∫–∞—É–Ω—Ç –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ –±–æ—Ç–æ–º –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –¥–∞–∂–µ –∫–æ–≥–¥–∞ —É –≤–∞—Å –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–¥–µ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞. –°–æ–æ–±—â–∏—Ç–µ –æ –Ω–µ–π –≤ –ü—Ä–∏—ë–º–Ω—É—é (t.me/zhivolab), –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É.\n–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞</i>', parse_mode='html')
        await bot.send_message(chat, '<i><b>–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: </b>{0}</i>'.format(e), parse_mode = 'html')

async def create_acc(user:  User, chat_id: str):
    try:
        count = cur.execute('SELECT COUNT(*) FROM userdata WHERE user_id=?', (user.id,)).fetchone()

        if count > 0:
            return await bot.send_message(chat_id, '<i>–í—ã —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç</i>', parse_mode = 'html', reply_markup = ReplyKeyboardRemove())
            
        await db_table_val(user_id=user.id, user_name=user.first_name, user_surname=user.last_name,
        username=user.username, balance=0, cansteal=1, nick = user.first_name, bio = '–ø—É—Å—Ç–æ',
        rasa = '&#128529;', temp = '&#128529;', morj = 0, mask = '', ready = 0, battles = 0, chn = '')
        conn.commit()

        await bot.send_message(log_chat, f'<i><b><a href="tg://user?id={user.id}">{user.full_name}</a></b> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è(-–∞—Å—å) –∫ –ñ–∏–≤–æ–ø–æ–ª–∏—Å—É\n#user_signup</i>', parse_mode='html', disable_web_page_preview=True)
        
        cur.execute(f'UPDATE userdata SET register_date = {current_time()} WHERE user_id={user.id}')
        conn.commit()

    except Exception as e:
        if str(e).startswith('UNIQUE constraint failed: '):
            await bot.send_message(chat_id, '<i>–í—ã —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç</i>', parse_mode = 'html', reply_markup = ReplyKeyboardRemove())
        elif str(e) == 'database is locked':
            await bot.send_message(chat_id, '<i><b>&#10060; –û—à–∏–±–∫–∞: </b>–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞</i>', parse_mode = 'html', reply_markup = ReplyKeyboardRemove())
        else:
            log_error(e)
    else:
        await bot.send_message(chat_id, '<i>&#9989; –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</i>', parse_mode = 'html', reply_markup = ReplyKeyboardRemove())

async def poison(user_id: str, target_id: str, chat_id: str) -> None:
    try:
        my_health = cur.execute(f'SELECT health FROM userdata WHERE user_id={user_id}').fetchone()

        if my_health < 0:
            return await bot.send_message(chat_id, '<i>&#9760; –í—ã —É–º–µ—Ä–ª–∏. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –≤–∞—Å –≤–æ—Å–∫—Ä–µ—Å–∏—Ç—å</i>', parse_mode = 'html')

        poison = cur.execute(f'SELECT poison FROM userdata WHERE user_id={user_id}').fetchone()

        if poison < 1:
            return await bot.send_message(chat_id, '<i>&#10060; –£ –≤–∞—Å –Ω–µ—Ç —è–¥–∞. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –∫ –ª—É—á—à–µ–º—É</i>', parse_mode='html')

        cur.execute(f'UPDATE userdata SET poison=poison-1 WHERE user_id={user_id}')
        conn.commit()

        nick = cur.execute(f'SELECT nick FROM userdata WHERE user_id={user_id}').fetchone()
        rasa = cur.execute(f'SELECT rasa FROM userdata WHERE user_id={user_id}').fetchone()

        target_nick = cur.execute(f'SELECT nick FROM userdata WHERE user_id={target_id}').fetchone()
        target_rasa = cur.execute(f'SELECT rasa FROM userdata WHERE user_id={target_id}').fetchone()
        target_health = cur.execute(f'SELECT health FROM userdata WHERE user_id={target_id}').fetchone()

        random_damage = random.randint(50, 200)
        done = random.choice([True, False])

        if done:
            cur.execute(f'UPDATE userdata SET health=health-{random_damage} WHERE user_id={target_id}')
            conn.commit()

            await bot.send_message(log_chat, f'<i><b><a href="tg://user?id={user_id}">{rasa}{nick}</a></b> –æ—Ç—Ä–∞–≤–∏–ª <b><a href="tg://user?id={target_id}">{target_rasa}{target_nick}</a></b>.\n#user_poison</i>', parse_mode='html')
            await bot.send_message(chat_id, f'<i>&#129514; –í—ã –æ—Ç—Ä–∞–≤–∏–ª–∏ <b><a href="tg://user?id={target_id}">{target_rasa}{target_nick}</a></b></i>', parse_mode='html')
            await bot.send_message(target_id, f'<i>&#129514; –í–∞—Å –æ—Ç—Ä–∞–≤–∏–ª <b><a href="tg://user?id={user_id}">{rasa}{nick}</a></b></i>', parse_mode='html')
        else:
            return await bot.send_message(chat_id, '<i>&#10060; –ù–µ—É–¥–∞—á–∞. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –∫ –ª—É—á—à–µ–º—É.\n–Ø–¥ –ø–æ—Ç—Ä–∞—á–µ–Ω –∑—Ä—è</i>', parse_mode='html')

    except Exception as e:
        await bot.send_message(chat_id, '&#10060; <i>–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–∫–∫–∞—É–Ω—Ç –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ. –ï—Å–ª–∏ –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫–∫–∞—É–Ω—Ç –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ –±–æ—Ç–æ–º –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –¥–∞–∂–µ –∫–æ–≥–¥–∞ —É –≤–∞—Å –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–¥–µ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞. –°–æ–æ–±—â–∏—Ç–µ –æ –Ω–µ–π –≤ –ü—Ä–∏—ë–º–Ω—É—é (t.me/zhivolab), –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É.\n–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞</i>', parse_mode='html')
        await bot.send_message(chat_id, f'<i><b>–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: </b>{e}</i>', parse_mode = 'html')
        return logger.exception(e)

async def shoot(user_id: str, target_id: str, chat_id: str) -> None: #todo NO OTH
        try:
            my_health = cur.execute(f'SELECT health FROM userdata WHERE user_id={user_id}')

            if my_health < 0:
                return await bot.send_message(chat_id, '<i>&#9760; –í—ã —É–º–µ—Ä–ª–∏. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –≤–∞—Å –≤–æ—Å–∫—Ä–µ—Å–∏—Ç—å</i>', parse_mode = 'html')

            gun = cur.execute(f'SELECT gun FROM userdata WHERE user_id={user_id}').fetchone()

            if gun < 1:
                return await bot.send_message(chat_id, '<i>&#10060; –£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Å—Ç–æ–ª–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –∫ –ª—É—á—à–µ–º—É</i>', parse_mode='html')

            health = cur.execute(f'SELECT health FROM userdata WHERE user_id={target_id}').fetchone()

            cur.execute(f'UPDATE userdata SET gun=gun-1 WHERE user_id={user_id}')
            conn.commit()

            nick = cur.execute(f'SELECT nick FROM userdata WHERE user_id={user_id}').fetchone()
            rasa = cur.execute(f'SELECT rasa FROM userdata WHERE user_id={user_id}').fetchone()
            
            target_nick = cur.execute(f'SELECT nick FROM userdata WHERE user_id={target_id}').fetchone()
            target_rasa = cur.execute(f'SELECT rasa FROM userdata WHERE user_id={target_id}').fetchone()

            rand = random.randint(100,200)
            done = random.choice([True, False])

            if done:
                cur.execute(f'UPDATE userdata SET health=health-{rand} WHERE user_id={target_id}')
                conn.commit()

                await bot.send_message(log_chat, f'<i><b><a href="tg://user?id={user_id}">{rasa}{nick}</a></b> –∑–∞—Å—Ç—Ä–µ–ª–∏–ª <b><a href="tg://user?id={target_id}">{target_rasa}{target_nick}</a></b>\n#user_gunshoot</i>', parse_mode='html')
                await bot.send_message(chat_id, f'<i>&#128299; –í—ã –∑–∞—Å—Ç—Ä–µ–ª–∏–ª–∏ <b><a href="tg://user?id={target_id}">{target_rasa}{target_nick}</a></b></i>', parse_mode='html')
                await bot.send_message(target_id, f'<i>&#128299; –í–∞—Å –∑–∞—Å—Ç—Ä–µ–ª–∏–ª <b><a href="tg://user?id={user_id}">{rasa}{nick}</a></b></i>', parse_mode='html')
                
                prison = random.choice([True, False])

                if prison:
                    cur.execute(f'UPDATE userdata SET prison={current_time() + 1200} WHERE user_id={user_id}')
                    conn.commit()

                    await bot.send_message(chat_id, f'<i>&#128110; –ì–æ—Å–ø–æ–¥–∏–Ω <b><a href="tg://user?id={user_id}">{rasa}{nick}</a></b>, –≤—ã –∑–∞–¥–µ—Ä–∂–∞–Ω—ã –∑–∞ —É–±–∏–π—Å—Ç–≤–æ –æ–≥–Ω–µ—Å—Ç—Ä–µ–ª—å–Ω—ã–º –æ—Ä—É–∂–∏–µ–º. –ü—Ä–æ–π–¥—ë–º—Ç–µ –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ.\n\n–í—ã –±—ã–ª–∏ –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω—ã –Ω–∞ <b>20 –º–∏–Ω—É—Ç</b></i>', parse_mode='html')
            else:
                await bot.send_message(chat_id, f'<i>&#10060; –í—ã –≤—ã—Å—Ç—Ä–µ–ª–∏–ª–∏ –º–∏–º–æ. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –∫ –ª—É—á—à–µ–º—É.\n–ü–∏—Å—Ç–æ–ª–µ—Ç –ø–æ—Ç—Ä–∞—á–µ–Ω –∑—Ä—è</i>', parse_mode='html')
        
        except Exception as e:
            await bot.send_message(chat_id, '&#10060; <i>–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–∫–∫–∞—É–Ω—Ç –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ. –ï—Å–ª–∏ –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫–∫–∞—É–Ω—Ç –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ –±–æ—Ç–æ–º –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –¥–∞–∂–µ –∫–æ–≥–¥–∞ —É –≤–∞—Å –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–¥–µ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞. –°–æ–æ–±—â–∏—Ç–µ –æ –Ω–µ–π –≤ –ü—Ä–∏—ë–º–Ω—É—é (t.me/zhivolab), –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É.\n–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞</i>', parse_mode='html')
            await bot.send_message(chat_id, f'<i><b>–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: </b>{e}</i>', parse_mode = 'html')

async def achieve(user_id: str, chat_id : str, achievement: str) -> None: #todo new ACHIEVEMENTS
    try:
        achieve = cur.execute(f'SELECT {achievement} FROM userdata WHERE user_id={user_id}').fetchone()
        
        if achieve != 0:
            return

        index = ach[0].index(achievement)
        name = ach[1][index]
        desc = ach[2][index]
        money = ach[3][index]
        points = ach[4][index] #todo WHY POINTS. ITS XP

        cur.execute(f'UPDATE userdata SET {achievement} = 1 WHERE user_id = {user_id}')
        conn.commit()

        rasa = cur.execute(f'SELECT rasa FROM userdata WHERE user_id = {user_id}').fetchone()
        nick = cur.execute(f'SELECT nick FROM userdata WHERE user_id = {user_id}').fetchone()

        cur.execute(f'UPDATE userdata SET balance = balance + {money} WHERE user_id = {user_id}')
        conn.commit()
        cur.execute(f'UPDATE userdata SET points = points+{points} WHERE user_id = {user_id}')
        conn.commit()

        chat_type = await bot.get_chat(chat_id)
        chat_type = chat_type.type

        if chat_type == 'private':
            await bot.send_message(chat_id, f'<i>–£ –≤–∞—Å –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: <b>{name}</b>\n{desc}. \n–í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: <b>${money}</b> –∏ &#128161; <b>{points}</b> –æ—á–∫–æ–≤</i>', parse_mode = 'html')
        else:
            await bot.send_message(chat_id, f'<i><b><a href="tg://user?id={user_id}">{rasa}{nick}</a></b>, —É –≤–∞—Å –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: <b>{name}</b>\n{desc}. \n–í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: <b>${money}</b> –∏ &#128161; <b>{points}</b> –æ—á–∫–æ–≤</i>', parse_mode = 'html')
    except Exception as e:
        await bot.send_message(chat_id, '&#10060; <i>–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–∫–∫–∞—É–Ω—Ç –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ. –ï—Å–ª–∏ –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫–∫–∞—É–Ω—Ç –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ –±–æ—Ç–æ–º –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –¥–∞–∂–µ –∫–æ–≥–¥–∞ —É –≤–∞—Å –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–¥–µ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞. –°–æ–æ–±—â–∏—Ç–µ –æ –Ω–µ–π –≤ –ü—Ä–∏—ë–º–Ω—É—é (t.me/zhivolab), –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É.\n–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞</i>', parse_mode='html')
        await bot.send_message(chat_id, '<i><b>–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: </b>{0}</i>'.format(e), parse_mode = 'html')

async def cure(user_id: str, target_id: str, chat_id: str) -> None:
    try:
        nerr = 0
        medicine = cur.execute(f'SELECT medicine FROM userdata WHERE user_id={user_id}').fetchone()

        if medicine < 1:
            return await bot.send_message(chat_id, '<i>&#10060; –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–±–ª–µ—Ç–æ–∫(</i>', parse_mode='html')
            
        health = cur.execute(f'SELECT health FROM userdata WHERE user_id={target_id}').fetchone()

        nick = cur.execute(f'SELECT nick FROM userdata WHERE user_id={user_id}').fetchone()

        rasa = cur.execute(f'SELECT rasa FROM userdata WHERE user_id={user_id}').fetchone()
        target_nick = cur.execute(f'SELECT nick FROM userdata WHERE user_id={target_id}').fetchone()
        target_rasa = cur.execute(f'SELECT rasa FROM userdata WHERE user_id={target_id}').fetchone()

        if health > 0 and health < 100:
            cur.execute(f'UPDATE userdata SET medicine=medicine-1 WHERE user_id={user_id}')
            conn.commit()

            rand = random.randint(1, 100-health)

            cur.execute(f'UPDATE userdata SET health=health+{rand} WHERE user_id={target_id}')
            conn.commit()

            nick = cur.execute(f'SELECT nick FROM userdata WHERE user_id={user_id}').fetchone()
            rasa = cur.execute(f'SELECT rasa FROM userdata WHERE user_id={user_id}').fetchone()

            target_nick = cur.execute(f'SELECT nick FROM userdata WHERE user_id={target_id}').fetchone()
            target_rasa = cur.execute(f'SELECT rasa FROM userdata WHERE user_id={target_id}').fetchone()
            
            if target_id == user_id:
                return await bot.send_message(chat_id, '<i>&#128138; –£—Å–ø–µ—Ö! –í—ã –≤—ã–ª–µ—á–∏–ª–∏ —Å–µ–±—è</i>', parse_mode='html')
            else:
                await bot.send_message(chat_id, f'<i>&#128138; –£—Å–ø–µ—Ö! –í—ã –≤—ã–ª–µ—á–∏–ª–∏ <b><a href="tg://user?id={target_id}">{target_rasa}{target_nick}</a></b></i>', parse_mode='html')
                await bot.send_message(target_id, f'<i>&#128138; –í–∞—Å –≤—ã–ª–µ—á–∏–ª <b><a href="tg://user?id={user_id}">{rasa}{nick}</a></b></i>', parse_mode='html')
                nerr = 1

        elif health >= 100:
            if target_id != user_id:
                return await bot.send_message(chat_id, f'<i>&#128138; <b><a href="tg://user?id={target_id}">{target_rasa}{target_nick}</a></b> –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–¥–æ—Ä–æ–≤, –∑–∞—á–µ–º –≤–∞–º —Ç—Ä–∞—Ç–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –≤–ø—É—Å—Ç—É—é?\n–õ–µ–∫–∞—Ä—Å—Ç–≤–∞ <b>–Ω–µ –ø–æ—Ç—Ä–∞—á–µ–Ω—ã</b></i>', parse_mode='html')   
            else:
                return await bot.send_message(chat_id, f'<i>&#128138; –í—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–¥–æ—Ä–æ–≤—ã, –∑–∞—á–µ–º –≤–∞–º —Ç—Ä–∞—Ç–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –≤–ø—É—Å—Ç—É—é?\n–õ–µ–∫–∞—Ä—Å—Ç–≤–∞ <b>–Ω–µ –ø–æ—Ç—Ä–∞—á–µ–Ω—ã</b></i>', parse_mode='html')        
        else:
            if target_id == user_id:
                return await bot.send_message(chat_id, '<i>&#10060; –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–∫—Ä–µ—Å–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è</i>', parse_mode='html')
                
            cur.execute(f'UPDATE userdata SET medicine=medicine-1 WHERE user_id={user_id}')
            conn.commit()

            rand = random.randint(50,100)

            cur.execute(f'UPDATE userdata SET health={rand} WHERE user_id={target_id}')
            conn.commit()

            nick = cur.execute(f'SELECT nick FROM userdata WHERE user_id={user_id}').fetchone()
            rasa = cur.execute(f'SELECT rasa FROM userdata WHERE user_id={user_id}').fetchone()

            target_nick = cur.execute(f'SELECT nick FROM userdata WHERE user_id={target_id}').fetchone()
            target_rasa = cur.execute(f'SELECT rasa FROM userdata WHERE user_id={target_id}').fetchone()

            await bot.send_message(chat_id, f'<i>&#128138; –£—Å–ø–µ—Ö! –í—ã –≤–æ—Å–∫—Ä–µ—Å–∏–ª–∏ <b><a href="tg://user?id={target_id}">{target_rasa}{target_nick}</a></b></i>', parse_mode='html')
            nerr = 1
            await bot.send_message(target_id, f'<i>&#128138; –í–∞—Å –≤–æ—Å–∫—Ä–µ—Å–∏–ª <b><a href="tg://user?id={user_id}">{rasa}{nick}</a></b></i>', parse_mode='html')
            
            await achieve(user_id, chat_id, 'helper')

        if nerr == 1:
            cur.execute(f"UPDATE userdata SET cured=cured+1 WHERE user_id={user_id}")
            conn.commit()

            cured = cur.execute(f"SELECT cured FROM userdata WHERE user_id={user_id}").fetchone()

            if cured >= 20:
                await achieve(user_id, chat_id, 'medquest')
                cur.execute(f"UPDATE userdata SET medic=medic+1 WHERE user_id={user_id}")
                conn.commit()
                await bot.send_message(chat_id, '<i>–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>ü©∫ –°—Ç–µ—Ç–æ—Å–∫–æ–ø</b>. –≠—Ç–∞ –º–∞—Å–∫–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ–º, —á—Ç–æ –≤—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤—Ä–∞—á, –∏ –≤–∞–º –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å</i>', parse_mode = 'html')

    except Exception as e:
        await bot.send_message(chat_id, '&#10060; <i>–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–∫–∫–∞—É–Ω—Ç –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ. –ï—Å–ª–∏ –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫–∫–∞—É–Ω—Ç –≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–µ. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ –±–æ—Ç–æ–º –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –¥–∞–∂–µ –∫–æ–≥–¥–∞ —É –≤–∞—Å –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–¥–µ –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞. –°–æ–æ–±—â–∏—Ç–µ –æ –Ω–µ–π –≤ –ü—Ä–∏—ë–º–Ω—É—é (t.me/zhivolab), –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É.\n–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞</i>', parse_mode='html')
        await bot.send_message(chat_id, '<i><b>–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: </b>{0}</i>'.format(e), parse_mode = 'html')