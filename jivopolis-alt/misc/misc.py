from datetime import datetime
from ..config import intervals, BOT_USER

from typing import Union

from .. import logger
from ..database.sqlitedb import cur

from aiogram.types import InlineKeyboardButton
from aiogram.utils.deep_linking import decode_payload

def get_link(user_id: int = None, encoded_id: str = None) -> str:
    '''get link to user profile in bot'''
    if not user_id and not encoded_id:
        raise ValueError('there is no user id and no encoded user id.')
    if encoded_id:
        user_id = decode_payload(encoded_id)
    return f"{BOT_USER}?start={user_id}"

def get_mask(user_id: int) -> Union[str, None]:
    '''get mask or rase of user'''
    try:
        mask = cur.execute(f"SELECT mask FROM userdata WHERE user_id = {user_id}").fetchone()[0]
        if not mask:
            mask = cur.execute(f"SELECT rase FROM userdata WHERE user_id = {user_id}").fetchone()[0]
        return mask
    except TypeError as e:
        logger.exception(e)
        mask = cur.execute(f"SELECT rase FROM userdata WHERE user_id = {user_id}").fetchone()[0]
        return mask
    except Exception as e:
        return logger.exception(e)

def current_time() -> float:
    """returns current time in seconds"""
    return (datetime.now()-datetime.fromtimestamp(0)).total_seconds()

def isinterval(type) -> bool:
    #todo description
    now = current_time()
    interval = intervals[type]
    if now // 1 % interval[0] <= interval[1]:
        return True
    else:
        return False

def remaining(type) -> str:
    '''remaining time due {something} happends, in minutes and seconds.'''
    now = current_time()
    interval = intervals[type][0]
    seconds = int(interval - now//1%interval)
    min = seconds//60
    sec = seconds%60
    return f'{(min) if min != 0 else ""}{1}'.format('{0} —Å–µ–∫—É–Ω–¥'.format(sec) if sec != 0 else '')

def get_building(place) -> InlineKeyboardButton | None:
    '''Get InlineKeyboardButton with special building for every location'''
    match (place):
        case "–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è":
            button = InlineKeyboardButton(text="üå≤ –ñ–∏–≤–æ–ø–æ–ª–∏—Å—Å–∫–∏–π –±–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–π —Å–∞–¥", callback_data="botan_garden_shop")
        case "–ñ–∏–≤–±–∞–Ω–∫":
            button = InlineKeyboardButton(text="üè¶ –ñ–∏–≤–æ–ø–æ–ª–∏—Å—Å–∫–∏–π –±–∞–Ω–∫", callback_data="bank")
        case "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç":
            button = InlineKeyboardButton(text="üè´ –ñ–∏–≤–æ–ø–æ–ª–∏—Å—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", callback_data="university")
        case "–ö–æ—Ç–∞–π—Å–∫–∏–π –ú–µ–¥–∏–Ω—Å—Ç–∏—Ç—É—Ç":
            button = InlineKeyboardButton(text="üè´ –ö–æ—Ç–∞–π—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –Ω–∞—É–∫", callback_data="university")
        case "–ê–≤—Ç–æ–ø–∞—Ä–∫ –∏–º. –ö–æ—Ç–∞":
            button = InlineKeyboardButton(text="üöó –ê–≤—Ç–æ–ø–∞—Ä–∫ –∏–º–µ–Ω–∏ Cat Painted", callback_data="car_shop")
        case "–¢–¶ –ú–∏–ì":
            button = InlineKeyboardButton(text="üè¨ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä –ú–∏–ì", callback_data="mall")
        case "–ì–µ–æ—Ä–≥–∏–µ–≤—Å–∫–∞—è":
            button = InlineKeyboardButton(text="üç∞ –ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è \"–°–ª–∞–¥–∫–æ–Å–∂–∫–∞\"", callback_data="candy_shop")
        case "–†–∞–π–±–æ–ª—å–Ω–∏—Ü–∞":
            button = InlineKeyboardButton(text="üè• –ñ–∏–≤–æ–ø–æ–ª–∏—Å—Å–∫–∞—è —Ä–∞–π–æ–Ω–Ω–∞—è –±–æ–ª—å–Ω–∏—Ü–∞", callback_data="hospital_shop")
        case "–°—Ç–∞—Ä–æ–∫–æ—Ç–∞–π—Å–∫–∏–π –§–ê–ü":
            button = InlineKeyboardButton(text="üè• –°—Ç–∞—Ä–æ–∫–æ—Ç–∞–π—Å–∫–∏–π —Ñ–µ–ª—å–¥—à–µ—Ä—Å–∫–∏–π –ø—É–Ω–∫—Ç", callback_data="hospital_shop")
        case "–ó–æ–æ–ø–∞—Ä–∫":
            button = InlineKeyboardButton(text="ü¶ä –ñ–∏–≤–æ–ø–æ–ª–∏—Å—Å–∫–∏–π –∑–æ–æ–ø–∞c—Ä–∫", callback_data="zoo_shop")
        case "–ê—ç—Ä–æ–ø–æ—Ä—Ç –ö–æ—Ç–∞–π":
            button = InlineKeyboardButton(text="‚úà –ê—ç—Ä–æ–ø–æ—Ä—Ç –ö–æ—Ç–∞–π", callback_data="airport")
        case "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç":
            button = InlineKeyboardButton(text="‚úà –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç –ñ–∏–≤–æ–ø–æ–ª–∏—Å", callback_data="airport")
        case "–ñ–∏–≤–æ–ø–æ–ª–∏—Å—Å–∫–∏–π –º—É–∑–µ–π":
            button = InlineKeyboardButton(text="üèõ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º—É–∑–µ–π –ñ–∏–≤–æ–ø–æ–ª–∏—Å–∞", callback_data="museum")
        case "–ú–∞–∫–µ–µ–≤–∫–∞":
            button = InlineKeyboardButton(text="üçè \"–ù–∞—Ç—É—Ä–∞–ª\". –§—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏", callback_data="fruit_shop")
        case "–†—ã–Ω–æ–∫":
            button = InlineKeyboardButton(text="üè£ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫", callback_data="central_market_menu")
        case "–ö–æ—Ç–∞–π—Å–∫–∏–π —ç–ª–µ–∫—Ç—Ä–æ–∑–∞–≤–æ–¥":
            button = InlineKeyboardButton(text="üè≠ –ö–æ—Ç–∞–π—Å–∫–∏–π –∑–∞–≤–æ–¥ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π", callback_data="factory")
        case "–°—Ç–∞–¥–∏–æ–Ω":
            button = InlineKeyboardButton(text="üèü –ñ–∏–≤–æ–ø–æ–ª–∏—Å-–ê—Ä–µ–Ω–∞", url="t.me/jivopolistour")
        case "–†–æ—â–∞":
            button = InlineKeyboardButton(text="üåæ –§–µ—Ä–º–∞", callback_data="farm")
        case "–ì–µ–Ω–µ—Ä–∞–ª–∞ –®–µ–ª–±–∏":
            button = InlineKeyboardButton(text="üì± –ú–∞–≥–∞–∑–∏–Ω —Ç–µ—Ö–Ω–∏–∫–∏ –∏–º–µ–Ω–∏ –®–µ–ª–±–∏", callback_data="phone_shop")
        case _:
            return None
    return button