"""
This type stub file was generated by pyright.
"""
# flake8: noqa
import io
import typing
from . import base
from .input_file import InputFile
from .message_entity import MessageEntity

ATTACHMENT_PREFIX = ...
class InputMedia(base.TelegramObject):
    """
    This object represents the content of a media message to be sent. It should be one of
     - InputMediaAnimation
     - InputMediaDocument
     - InputMediaAudio
     - InputMediaPhoto
     - InputMediaVideo

    That is only base class.

    https://core.telegram.org/bots/api#inputmedia
    """
    type: base.String = ...
    media: base.String = ...
    thumb: typing.Union[base.InputFile, base.String] = ...
    caption: base.String = ...
    parse_mode: base.String = ...
    caption_entities: typing.List[MessageEntity] = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @property
    def file(self) -> io.IOBase | None:
        ...
    
    @file.setter
    def file(self, file: io.IOBase) -> None:
        ...
    
    @file.deleter
    def file(self) -> None:
        ...
    
    @property
    def thumb_file(self) -> io.IOBase | None:
        ...
    
    @thumb_file.setter
    def thumb_file(self, file: io.IOBase) -> None:
        ...
    
    @thumb_file.deleter
    def thumb_file(self) -> None:
        ...
    
    def get_files(self) -> typing.Generator[tuple[str, io.IOBase] | tuple[typing.Any | str | str, io.IOBase], None, None]:
        ...
    


class InputMediaAnimation(InputMedia):
    """
    Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.

    https://core.telegram.org/bots/api#inputmediaanimation
    """
    width: base.Integer = ...
    height: base.Integer = ...
    duration: base.Integer = ...
    has_spoiler: typing.Optional[base.Boolean] = ...
    def __init__(self, media: base.InputFile, thumb: typing.Union[base.InputFile, base.String] = ..., caption: base.String = ..., width: base.Integer = ..., height: base.Integer = ..., duration: base.Integer = ..., parse_mode: base.String = ..., caption_entities: typing.Optional[typing.List[MessageEntity]] = ..., has_spoiler: typing.Optional[base.Boolean] = ..., **kwargs) -> None:
        ...
    


class InputMediaDocument(InputMedia):
    """
    Represents a general file to be sent.

    https://core.telegram.org/bots/api#inputmediadocument
    """
    def __init__(self, media: base.InputFile, thumb: typing.Union[base.InputFile, base.String, None] = ..., caption: base.String = ..., parse_mode: base.String = ..., caption_entities: typing.Optional[typing.List[MessageEntity]] = ..., disable_content_type_detection: typing.Optional[base.Boolean] = ..., **kwargs) -> None:
        ...
    


class InputMediaAudio(InputMedia):
    """
    Represents an audio file to be treated as music to be sent.

    https://core.telegram.org/bots/api#inputmediaaudio
    """
    duration: base.Integer = ...
    performer: base.String = ...
    title: base.String = ...
    def __init__(self, media: base.InputFile, thumb: typing.Union[base.InputFile, base.String] = ..., caption: base.String = ..., duration: base.Integer = ..., performer: base.String = ..., title: base.String = ..., parse_mode: base.String = ..., caption_entities: typing.Optional[typing.List[MessageEntity]] = ..., **kwargs) -> None:
        ...
    


class InputMediaPhoto(InputMedia):
    """
    Represents a photo to be sent.

    https://core.telegram.org/bots/api#inputmediaphoto
    """
    has_spoiler: typing.Optional[base.Boolean] = ...
    def __init__(self, media: base.InputFile, caption: base.String = ..., parse_mode: base.String = ..., caption_entities: typing.Optional[typing.List[MessageEntity]] = ..., has_spoiler: typing.Optional[base.Boolean] = ..., **kwargs) -> None:
        ...
    


class InputMediaVideo(InputMedia):
    """
    Represents a video to be sent.

    https://core.telegram.org/bots/api#inputmediavideo
    """
    width: base.Integer = ...
    height: base.Integer = ...
    duration: base.Integer = ...
    supports_streaming: base.Boolean = ...
    has_spoiler: typing.Optional[base.Boolean] = ...
    def __init__(self, media: base.InputFile, thumb: typing.Union[base.InputFile, base.String] = ..., caption: base.String = ..., width: base.Integer = ..., height: base.Integer = ..., duration: base.Integer = ..., parse_mode: base.String = ..., caption_entities: typing.Optional[typing.List[MessageEntity]] = ..., supports_streaming: base.Boolean = ..., has_spoiler: typing.Optional[base.Boolean] = ..., **kwargs) -> None:
        ...
    


class MediaGroup(base.TelegramObject):
    """
    Helper for sending media group
    """
    def __init__(self, medias: typing.Optional[typing.List[typing.Union[InputMedia, typing.Dict]]] = ...) -> None:
        ...
    
    def attach_many(self, *medias: typing.Union[InputMedia, typing.Dict]) -> None:
        """
        Attach list of media

        :param medias:
        """
        ...
    
    def attach(self, media: typing.Union[InputMedia, typing.Dict]) -> None:
        """
        Attach media

        :param media:
        """
        ...
    
    def attach_audio(self, audio: typing.Union[InputMediaAudio, base.InputFile], thumb: typing.Union[base.InputFile, base.String] = ..., caption: base.String = ..., duration: base.Integer = ..., performer: base.String = ..., title: base.String = ..., parse_mode: base.String = ..., caption_entities: typing.Optional[typing.List[MessageEntity]] = ...) -> None:
        """
        Attach audio

        :param audio:
        :param thumb:
        :param caption:
        :param duration:
        :param performer:
        :param title:
        :param parse_mode:
        :param caption_entities:
        """
        ...
    
    def attach_document(self, document: typing.Union[InputMediaDocument, base.InputFile], thumb: typing.Union[base.InputFile, base.String] = ..., caption: base.String = ..., parse_mode: base.String = ..., caption_entities: typing.Optional[typing.List[MessageEntity]] = ..., disable_content_type_detection: typing.Optional[base.Boolean] = ...) -> None:
        """
        Attach document
        
        :param document:
        :param caption:
        :param thumb:
        :param parse_mode:
        :param caption_entities:
        :param disable_content_type_detection:
        """
        ...
    
    def attach_photo(self, photo: typing.Union[InputMediaPhoto, base.InputFile], caption: base.String = ..., parse_mode: base.String = ..., caption_entities: typing.Optional[typing.List[MessageEntity]] = ...) -> None:
        """
        Attach photo

        :param photo:
        :param caption:
        :param parse_mode:
        :param caption_entities:
        """
        ...
    
    def attach_video(self, video: typing.Union[InputMediaVideo, base.InputFile], thumb: typing.Union[base.InputFile, base.String] = ..., caption: base.String = ..., width: base.Integer = ..., height: base.Integer = ..., duration: base.Integer = ..., parse_mode: base.String = ..., caption_entities: typing.Optional[typing.List[MessageEntity]] = ..., supports_streaming: base.Boolean = ...) -> None:
        """
        Attach video

        :param video:
        :param thumb:
        :param caption:
        :param width:
        :param height:
        :param duration:
        :param parse_mode:
        :param caption_entities:
        :param supports_streaming:
        """
        ...
    
    def to_python(self) -> typing.List:
        """
        Get object as JSON serializable

        :return:
        """
        ...
    
    def get_files(self) -> typing.Generator[tuple[str, io.IOBase] | tuple[typing.Any | str | str, io.IOBase], None, None]:
        ...
    


