"""
This type stub file was generated by pyright.
"""

import typing
from . import base
from .chat_administrator_rights import ChatAdministratorRights
from .web_app_info import WebAppInfo
# flake8: noqa

class KeyboardButtonPollType(base.TelegramObject):
    """
    This object represents type of a poll, which is allowed to be created and \
        sent when the corresponding button is pressed.

    https://core.telegram.org/bots/api#keyboardbuttonpolltype
    """
    type: base.String = ...

    def __init__(self, type: typing.Optional[base.String] = ...) -> None:
        ...


class ReplyKeyboardMarkup(base.TelegramObject):
    """
    This object represents a custom keyboard with reply options
    (see https://core.telegram.org/bots#keyboards to bots for details
    and examples).

    https://core.telegram.org/bots/api#replykeyboardmarkup
    """
    keyboard: typing.List[typing.List[KeyboardButton]] = ...
    resize_keyboard: base.Boolean = ...
    one_time_keyboard: base.Boolean = ...
    input_field_placeholder: base.String = ...
    selective: base.Boolean = ...
    is_persistent: base.Boolean = ...
    def __init__(self, keyboard: typing.List[typing.List[KeyboardButton]] = ..., resize_keyboard: base.Boolean = ..., one_time_keyboard: base.Boolean = ..., input_field_placeholder: base.String = ..., selective: base.Boolean = ..., row_width: base.Integer = ..., is_persistent: base.Boolean = ..., conf=...) -> None:
        ...
    
    @property
    def row_width(self) -> typing.Any | int:
        ...
    
    @row_width.setter
    def row_width(self, value) -> None:
        ...
    
    def add(self, *args) -> "ReplyKeyboardMarkup":
        """
        Add buttons

        :param args:
        :return: self
        :rtype: :obj:`types.ReplyKeyboardMarkup`
        """
        ...
    
    def row(self, *args) -> "ReplyKeyboardMarkup":
        """
        Add row

        :param args:
        :return: self
        :rtype: :obj:`types.ReplyKeyboardMarkup`
        """
        ...
    
    def insert(self, button): # -> Self@ReplyKeyboardMarkup:
        """
        Insert button to last row

        :param button:
        :return: self
        :rtype: :obj:`types.ReplyKeyboardMarkup`
        """
        ...
    


class KeyboardButtonRequestUser(base.TelegramObject):
    """
    This object defines the criteria used to request a suitable user.
    The identifier of the selected user will be shared with the bot when
    the corresponding button is pressed.

    https://core.telegram.org/bots/api#keyboardbuttonrequestuser
    """
    request_id: base.Integer = ...
    user_is_bot: base.Boolean = ...
    user_is_premium: base.Boolean = ...
    def __init__(self, request_id: base.Integer, user_is_bot: typing.Optional[base.Boolean] = ..., user_is_premium: typing.Optional[base.Boolean] = ..., **kwargs) -> None:
        ...
    


class KeyboardButtonRequestChat(base.TelegramObject):
    """
    This object defines the criteria used to request a suitable chat.
    The identifier of the selected chat will be shared with the bot when
    the corresponding button is pressed.

    https://core.telegram.org/bots/api#keyboardbuttonrequestchat
    """
    request_id: base.Integer = ...
    chat_is_channel: base.Boolean = ...
    chat_is_forum: base.Boolean = ...
    chat_has_username: base.Boolean = ...
    chat_is_created: base.Boolean = ...
    user_administrator_rights: ChatAdministratorRights = ...
    bot_administrator_rights: ChatAdministratorRights = ...
    bot_is_member: base.Boolean = ...
    def __init__(self, request_id: base.Integer, chat_is_channel: base.Boolean, chat_is_forum: typing.Optional[base.Boolean] = ..., chat_has_username: typing.Optional[base.Boolean] = ..., chat_is_created: typing.Optional[base.Boolean] = ..., user_administrator_rights: typing.Optional[ChatAdministratorRights] = ..., bot_administrator_rights: typing.Optional[ChatAdministratorRights] = ..., bot_is_member: typing.Optional[base.Boolean] = ..., **kwargs) -> None:
        ...
    


class KeyboardButton(base.TelegramObject):
    """
    This object represents one button of the reply keyboard.
    For simple text buttons String can be used instead of this object to specify text of the button.
    Optional fields request_contact, request_location, and request_poll are mutually exclusive.
    Note: request_contact and request_location options will only work in Telegram versions released after 9 April, 2016.
    Older clients will ignore them.
    Note: request_poll option will only work in Telegram versions released after 23 January, 2020.
    Older clients will receive unsupported message.

    https://core.telegram.org/bots/api#keyboardbutton
    """
    text: base.String = ...
    request_user: KeyboardButtonRequestUser = ...
    request_chat: KeyboardButtonRequestChat = ...
    request_contact: base.Boolean = ...
    request_location: base.Boolean = ...
    request_poll: KeyboardButtonPollType = ...
    web_app: WebAppInfo = ...
    def __init__(self, text: base.String, request_user: typing.Optional[KeyboardButtonRequestUser] = ..., request_chat: typing.Optional[KeyboardButtonRequestChat] = ..., request_contact: base.Boolean = ..., request_location: base.Boolean = ..., request_poll: KeyboardButtonPollType = ..., web_app: WebAppInfo = ..., **kwargs) -> None:
        ...
    


class ReplyKeyboardRemove(base.TelegramObject):
    """
    Upon receiving a message with this object, Telegram clients will remove the current custom keyboard
    and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot.
    An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see ReplyKeyboardMarkup).

    https://core.telegram.org/bots/api#replykeyboardremove
    """
    remove_keyboard: base.Boolean = ...
    selective: base.Boolean = ...
    def __init__(self, selective: base.Boolean = ...) -> None:
        ...
    


