"""
This type stub file was generated by pyright.
"""
# flake8: noqa
import io
import asyncio
import typing
from pathlib import Path
from typing import Any, Union
from . import base

CHUNK_SIZE = ...
log = ...


class InputFile(base.TelegramObject):
    """
    This object represents the contents of a file to be uploaded.
    Must be posted using multipart/form-data in the usual way that files are\
         uploaded via the browser.

    Also that is not typical TelegramObject!

    https://core.telegram.org/bots/api#inputfile
    """
    def __init__(self, path_or_bytesio: Union[str, io.IOBase, Path, _WebPipe], filename=..., conf=...) -> None: # noqa
        """

        :param path_or_bytesio:
        :param filename:
        :param conf:
        """
        ...

    def __del__(self) -> asyncio.Task[Any] | None:
        """
        Close file descriptor
        """
        ...
    
    @property
    def filename(self) -> str | None:
        ...
    
    @filename.setter
    def filename(self, value) -> None:
        ...
    
    @property
    def attach(self) -> str:
        ...
    
    def get_filename(self) -> str:
        """
        Get file name

        :return: name
        """
        ...
    
    @property
    def file(self) -> io.BufferedReader | io.IOBase | _WebPipe:
        ...
    
    def get_file(self) -> io.BufferedReader | io.IOBase | _WebPipe:
        """
        Get file object

        :return:
        """
        ...
    
    @classmethod
    def from_url(cls, url, filename=..., chunk_size=...) -> "InputFile":
        """
        Download file from URL

        Manually is not required action. You can send urls instead!

        :param url: target URL
        :param filename: optional. set custom file name
        :param chunk_size:

        :return: InputFile
        """
        ...
    
    def save(self, filename, chunk_size=...) -> None:
        """
        Write file to disk

        :param filename:
        :param chunk_size:
        """
        ...
    
    def __str__(self) -> str:
        ...
    
    __repr__ = ...
    def to_python(self):
        ...
    
    @classmethod
    def to_object(cls, data):
        ...
    


class _WebPipe:
    def __init__(self, url, chunk_size=...) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    async def open(self) -> "_WebPipe":
        ...
    
    async def close(self) -> None:
        ...
    
    @property
    def closed(self) -> bool:
        ...
    
    def __aiter__(self) -> _WebPipe:
        ...
    
    async def __anext__(self) -> bytes:
        ...
    
    async def read(self, chunk_size=...) -> bytes:
        ...
    
    def __str__(self) -> str:
        ...
    
    __repr__ = ...


