"""
This type stub file was generated by pyright.
"""

"""
Deep linking

Telegram bots have a deep linking mechanism, that allows for passing
additional parameters to the bot on startup. It could be a command that
launches the bot â€” or an auth token to connect the user's Telegram
account to their account on some external service.

You can read detailed description in the source:
https://core.telegram.org/bots#deep-linking

We have add some utils to get deep links more handy.

Basic link example:

    .. code-block:: python

        from aiogram.utils.deep_linking import get_start_link
        link = await get_start_link('foo')

        # result: 'https://t.me/MyBot?start=foo'

Encoded link example:

    .. code-block:: python

        from aiogram.utils.deep_linking import get_start_link

        link = await get_start_link('foo', encode=True)
        # result: 'https://t.me/MyBot?start=Zm9v'

Decode it back example:
    .. code-block:: python

        from aiogram.utils.deep_linking import decode_payload
        from aiogram.types import Message

        @dp.message_handler(commands=["start"])
        async def handler(message: Message):
            args = message.get_args()
            payload = decode_payload(args)
            await message.answer(f"Your payload: {payload}")

"""
BAD_PATTERN = ...
async def get_start_link(payload: str, encode=...) -> str:
    """
    Get 'start' deep link with your payload.

    If you need to encode payload or pass special characters -
        set encode as True

    :param payload: args passed with /start
    :param encode: encode payload with base64url
    :return: link
    """
    ...

async def get_startgroup_link(payload: str, encode=...) -> str:
    """
    Get 'startgroup' deep link with your payload.

    If you need to encode payload or pass special characters -
        set encode as True

    :param payload: args passed with /start
    :param encode: encode payload with base64url
    :return: link
    """
    ...

def encode_payload(payload: str) -> str:
    """Encode payload with URL-safe base64url."""
    ...

def decode_payload(payload: str) -> str:
    """Decode payload with URL-safe base64url."""
    ...

