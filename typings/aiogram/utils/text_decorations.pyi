"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import List, Optional, Pattern, TYPE_CHECKING
from aiogram.types import MessageEntity

if TYPE_CHECKING:
    ...
__all__ = ('HtmlDecoration', 'MarkdownDecoration', 'TextDecoration', 'html_decoration', 'markdown_decoration')
class TextDecoration(ABC):
    def apply_entity(self, entity: MessageEntity, text: str) -> str:
        """
        Apply single entity to text

        :param entity:
        :param text:
        :return:
        """
        ...
    
    def unparse(self, text: str, entities: Optional[List[MessageEntity]] = ...) -> str:
        """
        Unparse message entities

        :param text: raw text
        :param entities: Array of MessageEntities
        :return:
        """
        ...
    
    @abstractmethod
    def link(self, value: str, link: str) -> str:
        ...
    
    @abstractmethod
    def bold(self, value: str) -> str:
        ...
    
    @abstractmethod
    def italic(self, value: str) -> str:
        ...
    
    @abstractmethod
    def spoiler(self, value: str) -> str:
        ...
    
    @abstractmethod
    def code(self, value: str) -> str:
        ...
    
    @abstractmethod
    def pre(self, value: str) -> str:
        ...
    
    @abstractmethod
    def pre_language(self, value: str, language: str) -> str:
        ...
    
    @abstractmethod
    def underline(self, value: str) -> str:
        ...
    
    @abstractmethod
    def strikethrough(self, value: str) -> str:
        ...
    
    @abstractmethod
    def quote(self, value: str) -> str:
        ...
    
    @abstractmethod
    def custom_emoji(self, value: str, custom_emoji_id: str) -> str:
        ...
    


class HtmlDecoration(TextDecoration):
    def link(self, value: str, link: str) -> str:
        ...
    
    def bold(self, value: str) -> str:
        ...
    
    def italic(self, value: str) -> str:
        ...
    
    def spoiler(self, value: str) -> str:
        ...
    
    def code(self, value: str) -> str:
        ...
    
    def pre(self, value: str) -> str:
        ...
    
    def pre_language(self, value: str, language: str) -> str:
        ...
    
    def underline(self, value: str) -> str:
        ...
    
    def strikethrough(self, value: str) -> str:
        ...
    
    def quote(self, value: str) -> str:
        ...
    
    def custom_emoji(self, value: str, custom_emoji_id: str) -> str:
        ...
    


class MarkdownDecoration(TextDecoration):
    MARKDOWN_QUOTE_PATTERN: Pattern[str] = ...
    def link(self, value: str, link: str) -> str:
        ...
    
    def bold(self, value: str) -> str:
        ...
    
    def italic(self, value: str) -> str:
        ...
    
    def spoiler(self, value: str) -> str:
        ...
    
    def code(self, value: str) -> str:
        ...
    
    def pre(self, value: str) -> str:
        ...
    
    def pre_language(self, value: str, language: str) -> str:
        ...
    
    def underline(self, value: str) -> str:
        ...
    
    def strikethrough(self, value: str) -> str:
        ...
    
    def quote(self, value: str) -> str:
        ...
    
    def custom_emoji(self, value: str, custom_emoji_id: str) -> str:
        ...
    


html_decoration = ...
markdown_decoration = ...
