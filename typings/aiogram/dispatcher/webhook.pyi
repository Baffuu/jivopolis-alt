"""
This type stub file was generated by pyright.
"""

import datetime
import ipaddress
import typing
from typing import Dict, List, Optional, Union
from aiohttp import web
from .. import types
from ..types.base import Boolean, Float, Integer, String

DEFAULT_WEB_PATH = ...
DEFAULT_ROUTE_NAME = ...
BOT_DISPATCHER_KEY = ...
RESPONSE_TIMEOUT = ...
WEBHOOK = ...
WEBHOOK_CONNECTION = ...
WEBHOOK_REQUEST = ...
TELEGRAM_SUBNET_1 = ...
TELEGRAM_SUBNET_2 = ...
allowed_ips = ...
log = ...
def allow_ip(*ips: typing.Union[str, ipaddress.IPv4Network, ipaddress.IPv4Address]): # -> None:
    """
    Allow ip address.

    :param ips:
    :return:
    """
    ...

class WebhookRequestHandler(web.View):
    """
    Simple Webhook request handler for aiohttp web server.

    You need to register that in app:

    .. code-block:: python3

        app.router.add_route('*', '/your/webhook/path', WebhookRequestHandler, name='webhook_handler')

    But first you need to configure application for getting Dispatcher instance from request handler!
    It must always be with key 'BOT_DISPATCHER'

    .. code-block:: python3

        bot = Bot(TOKEN, loop)
        dp = Dispatcher(bot)
        app['BOT_DISPATCHER'] = dp

    """
    def get_dispatcher(self): # -> Any:
        """
        Get Dispatcher instance from environment

        :return: :class:`aiogram.Dispatcher`
        """
        ...
    
    async def parse_update(self, bot): # -> Update:
        """
        Read update from stream and deserialize it.

        :param bot: bot instance. You an get it from Dispatcher
        :return: :class:`aiogram.types.Update`
        """
        ...
    
    async def post(self): # -> Response:
        """
        Process POST request

        if one of handler returns instance of :class:`aiogram.dispatcher.webhook.BaseResponse` return it to webhook.
        Otherwise do nothing (return 'ok')

        :return: :class:`aiohttp.web.Response`
        """
        ...
    
    async def get(self): # -> Response:
        ...
    
    async def head(self): # -> Response:
        ...
    
    async def process_update(self, update): # -> Any | None:
        """
        Need respond in less than 60 seconds in to webhook.

        So... If you respond greater than 55 seconds webhook automatically respond 'ok'
        and execute callback response via simple HTTP request.

        :param update:
        :return:
        """
        ...
    
    def respond_via_request(self, task): # -> None:
        """
        Handle response after 55 second.

        :param task:
        :return:
        """
        ...
    
    def get_response(self, results): # -> BaseResponse | None:
        """
        Get response object from results.

        :param results: list
        :return:
        """
        ...
    
    def check_ip(self): # -> tuple[str, bool] | tuple[Any, bool] | tuple[None, Literal[False]]:
        """
        Check client IP. Accept requests only from telegram servers.

        :return:
        """
        ...
    
    def validate_ip(self): # -> None:
        """
        Check ip if that is needed. Raise web.HTTPUnauthorized for not allowed hosts.
        """
        ...
    


class GoneRequestHandler(web.View):
    """
    If a webhook returns the HTTP error 410 Gone for all requests for more than 23 hours successively,
    it can be automatically removed.
    """
    async def get(self):
        ...
    
    async def post(self):
        ...
    


def configure_app(dispatcher, app: web.Application, path=..., route_name=...): # -> None:
    """
    You can prepare web.Application for working with webhook handler.

    :param dispatcher: Dispatcher instance
    :param app: :class:`aiohttp.web.Application`
    :param path: Path to your webhook.
    :param route_name: Name of webhook handler route
    :return:
    """
    ...

def get_new_configured_app(dispatcher, path=...): # -> Application:
    """
    Create new :class:`aiohttp.web.Application` and configure it.

    :param dispatcher: Dispatcher instance
    :param path: Path to your webhook.
    :return:
    """
    ...

class BaseResponse:
    """
    Base class for webhook responses.
    """
    @property
    def method(self) -> str:
        """
        In all subclasses of that class you need to override this property

        :return: str
        """
        ...
    
    def prepare(self) -> typing.Dict:
        """
        You need to override this method.

        :return: response parameters dict
        """
        ...
    
    def cleanup(self) -> typing.Dict:
        """
        Cleanup response after preparing. Remove empty fields.

        :return: response parameters dict
        """
        ...
    
    def get_response(self): # -> dict[str | Unknown, str | Unknown]:
        """
        Get response object

        :return:
        """
        ...
    
    def get_web_response(self): # -> Response:
        """
        Get prepared web response with JSON data.

        :return: :class:`aiohttp.web.Response`
        """
        ...
    
    async def execute_response(self, bot): # -> Any:
        """
        Use this method if you want to execute response as simple HTTP request.

        :param bot: Bot instance.
        :return:
        """
        ...
    
    async def __call__(self, bot=...): # -> Any | List[Unknown] | Dict[Unknown, Unknown]:
        ...
    
    async def __aenter__(self): # -> Self@BaseResponse:
        ...
    
    async def __aexit__(self, exc_type, exc_val, exc_tb): # -> Any | List[Unknown] | Dict[Unknown, Unknown]:
        ...
    


class ReplyToMixin:
    """
    Mixin for responses where from which can reply to messages.
    """
    def reply(self, message: typing.Union[int, types.Message]): # -> Self@ReplyToMixin:
        """
        Reply to message

        :param message: :obj:`int` or  :obj:`types.Message`
        :return: self
        """
        ...
    
    def to(self, target: typing.Union[types.Message, types.Chat, types.base.Integer, types.base.String]): # -> Self@ReplyToMixin:
        """
        Send to chat

        :param target: message or chat or id
        :return:
        """
        ...
    


class DisableNotificationMixin:
    def without_notification(self): # -> Self@DisableNotificationMixin:
        """
        Disable notification

        :return:
        """
        ...
    


class DisableWebPagePreviewMixin:
    def no_web_page_preview(self): # -> Self@DisableWebPagePreviewMixin:
        """
        Disable web page preview

        :return:
        """
        ...
    


class ProtectContentMixin:
    def protect_content(self): # -> Self@ProtectContentMixin:
        """
        Protect content

        :return:
        """
        ...
    


class ParseModeMixin:
    def as_html(self): # -> Self@ParseModeMixin:
        """
        Set parse_mode to HTML

        :return:
        """
        ...
    
    def as_markdown(self): # -> Self@ParseModeMixin:
        """
        Set parse_mode to Markdown

        :return:
        """
        ...
    


class SendMessage(BaseResponse, ReplyToMixin, ParseModeMixin, DisableNotificationMixin, DisableWebPagePreviewMixin, ProtectContentMixin):
    """
    You can send message with webhook by using this instance of this object.
    All arguments is equal with Bot.send_message method.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String] = ..., text: String = ..., parse_mode: Optional[String] = ..., disable_web_page_preview: Optional[Boolean] = ..., disable_notification: Optional[Boolean] = ..., protect_content: Optional[Boolean] = ..., reply_to_message_id: Optional[Integer] = ..., reply_markup: Optional[Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String]] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat or username
            of the target channel (in the format @channelusername)
        :param text: String - Text of the message to be sent
        :param parse_mode: String (Optional) - Send Markdown or HTML, if you want Telegram apps to show bold,
            italic, fixed-width text or inline URLs in your bot's message.
        :param disable_web_page_preview: Boolean (Optional) - Disables link previews for links in this message
        :param disable_notification: Boolean (Optional) - Sends the message silently. Users will receive
            a notification with no sound.
        :param protect_content: Boolean (Optional) - Protects the contents of sent messages
            from forwarding and saving
        :param reply_to_message_id: Integer (Optional) - If the message is a reply, ID of the original message
        :param reply_markup: Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String] (Optional)
            - Additional interface options. A JSON-serialized object for an inline keyboard,
            custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        """
        ...
    
    def prepare(self) -> dict:
        ...
    
    def write(self, *text, sep=...): # -> Self@SendMessage:
        """
        Write text to response

        :param text:
        :param sep:
        :return:
        """
        ...
    
    def write_ln(self, *text, sep=...): # -> Self@SendMessage:
        """
        Write line

        :param text:
        :param sep:
        :return:
        """
        ...
    


class ForwardMessage(BaseResponse, ReplyToMixin, DisableNotificationMixin, ProtectContentMixin):
    """
    Use that response type for forward messages of any kind on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String] = ..., from_chat_id: Union[Integer, String] = ..., message_id: Integer = ..., disable_notification: Optional[Boolean] = ..., protect_content: Optional[Boolean] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat or username of the
            target channel (in the format @channelusername)
        :param from_chat_id: Union[Integer, String] - Unique identifier for the chat where the original
            message was sent (or channel username in the format @channelusername)
        :param disable_notification: Boolean (Optional) - Sends the message silently. Users will receive a
            notification with no sound.
        :param protect_content: Boolean (Optional) - Protects the contents of sent messages
            from forwarding and saving
        :param message_id: Integer - Message identifier in the chat specified in from_chat_id
        """
        ...
    
    def message(self, message: types.Message): # -> Self@ForwardMessage:
        """
        Select target message

        :param message:
        :return:
        """
        ...
    
    def prepare(self) -> dict:
        ...
    


class SendPhoto(BaseResponse, ReplyToMixin, DisableNotificationMixin, ProtectContentMixin):
    """
    Use that response type for send photo on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], photo: String, caption: Optional[String] = ..., disable_notification: Optional[Boolean] = ..., protect_content: Optional[Boolean] = ..., reply_to_message_id: Optional[Integer] = ..., reply_markup: Optional[Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String]] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat or username of
            the target channel (in the format @channelusername)
        :param photo: String - Photo to send. Pass a file_id as String to send
            a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for
            Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data.
        :param caption: String (Optional) - Photo caption (may also be used when resending photos by file_id),
            0-1024 characters after entities parsing
        :param disable_notification: Boolean (Optional) - Sends the message silently. Users will receive
            a notification with no sound.
        :param protect_content: Boolean (Optional) - Protects the contents of sent messages
            from forwarding and saving
        :param reply_to_message_id: Integer (Optional) - If the message is a reply, ID of the original message
        :param reply_markup: Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String] (Optional)
            - Additional interface options. A JSON-serialized object for an inline keyboard,
            custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Boolean@__init__ | (() -> Self@SendPhoto) | Unknown | Any | str | int | None]:
        ...
    


class SendAudio(BaseResponse, ReplyToMixin, DisableNotificationMixin, ProtectContentMixin):
    """
    Use that response type for send audio on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], audio: String, caption: Optional[String] = ..., duration: Optional[Integer] = ..., performer: Optional[String] = ..., title: Optional[String] = ..., disable_notification: Optional[Boolean] = ..., protect_content: Optional[Boolean] = ..., reply_to_message_id: Optional[Integer] = ..., reply_markup: Optional[Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String]] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat or username
            of the target channel (in the format @channelusername)
        :param audio: String - Audio file to send. Pass a file_id as String
            to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL
            as a String for Telegram to get an audio file from the Internet, or upload a new one
            using multipart/form-data.
        :param caption: String (Optional) - Audio caption, 0-1024 characters after entities parsing
        :param duration: Integer (Optional) - Duration of the audio in seconds
        :param performer: String (Optional) - Performer
        :param title: String (Optional) - Track name
        :param disable_notification: Boolean (Optional) - Sends the message silently.
            Users will receive a notification with no sound.
        :param protect_content: Boolean (Optional) - Protects the contents of sent messages
            from forwarding and saving
        :param reply_to_message_id: Integer (Optional) - If the message is a reply, ID of the original message
        :param reply_markup: Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String] (Optional)
            - Additional interface options. A JSON-serialized object for an inline keyboard,
            custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Boolean@__init__ | (() -> Self@SendAudio) | Unknown | Any | str | int | None]:
        ...
    


class SendDocument(BaseResponse, ReplyToMixin, DisableNotificationMixin, ProtectContentMixin):
    """
    Use that response type for send document on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], document: String, caption: Optional[String] = ..., disable_notification: Optional[Boolean] = ..., protect_content: Optional[Boolean] = ..., reply_to_message_id: Optional[Integer] = ..., reply_markup: Optional[Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String]] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat or username
            of the target channel (in the format @channelusername)
        :param document: String - File to send. Pass a file_id as String
            to send a file that exists on the Telegram servers (recommended), pass an HTTP URL
            as a String for Telegram to get a file from the Internet, or upload a new one
            using multipart/form-data.
        :param caption: String (Optional) - Document caption
            (may also be used when resending documents by file_id), 0-1024 characters after entities parsing
        :param disable_notification: Boolean (Optional) - Sends the message silently.
            Users will receive a notification with no sound.
        :param protect_content: Boolean (Optional) - Protects the contents of sent messages
            from forwarding and saving
        :param reply_to_message_id: Integer (Optional) - If the message is a reply, ID of the original message
        :param reply_markup: Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String] (Optional)
            - Additional interface options. A JSON-serialized object for an inline keyboard,
            custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Boolean@__init__ | (() -> Self@SendDocument) | Unknown | Any | str | int | None]:
        ...
    


class SendVideo(BaseResponse, ReplyToMixin, DisableNotificationMixin, ProtectContentMixin):
    """
    Use that response type for send video on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], video: String, duration: Optional[Integer] = ..., width: Optional[Integer] = ..., height: Optional[Integer] = ..., caption: Optional[String] = ..., disable_notification: Optional[Boolean] = ..., protect_content: Optional[Boolean] = ..., reply_to_message_id: Optional[Integer] = ..., reply_markup: Optional[Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String]] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat or username
            of the target channel (in the format @channelusername)
        :param video: String - Video to send. Pass a file_id as String
            to send a video that exists on the Telegram servers (recommended), pass an HTTP URL
            as a String for Telegram to get a video from the Internet, or upload a new video
            using multipart/form-data.
        :param duration: Integer (Optional) - Duration of sent video in seconds
        :param width: Integer (Optional) - Video width
        :param height: Integer (Optional) - Video height
        :param caption: String (Optional) - Video caption (may also be used when resending videos by file_id),
            0-1024 characters after entities parsing
        :param disable_notification: Boolean (Optional) - Sends the message silently.
            Users will receive a notification with no sound.
        :param protect_content: Boolean (Optional) - Protects the contents of sent messages
            from forwarding and saving
        :param reply_to_message_id: Integer (Optional) - If the message is a reply, ID of the original message
        :param reply_markup: Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String] (Optional)
            - Additional interface options. A JSON-serialized object for an inline keyboard,
            custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Boolean@__init__ | (() -> Self@SendVideo) | Unknown | Any | str | int | None]:
        ...
    


class SendVoice(BaseResponse, ReplyToMixin, DisableNotificationMixin, ProtectContentMixin):
    """
    Use that response type for send voice on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], voice: String, caption: Optional[String] = ..., duration: Optional[Integer] = ..., disable_notification: Optional[Boolean] = ..., protect_content: Optional[Boolean] = ..., reply_to_message_id: Optional[Integer] = ..., reply_markup: Optional[Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String]] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat or username
            of the target channel (in the format @channelusername)
        :param voice: String - Audio file to send. Pass a file_id as String
            to send a file that exists on the Telegram servers (recommended), pass an HTTP URL
            as a String for Telegram to get a file from the Internet, or upload a new one
            using multipart/form-data.
        :param caption: String (Optional) - Voice message caption, 0-1024 characters after entities parsing
        :param duration: Integer (Optional) - Duration of the voice message in seconds
        :param disable_notification: Boolean (Optional) - Sends the message silently.
            Users will receive a notification with no sound.
        :param protect_content: Boolean (Optional) - Protects the contents of sent messages
            from forwarding and saving
        :param reply_to_message_id: Integer (Optional) - If the message is a reply, ID of the original message
        :param reply_markup: Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String] (Optional)
            - Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard,
            instructions to remove reply keyboard or to force a reply from the user.
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Boolean@__init__ | (() -> Self@SendVoice) | Unknown | Any | str | int | None]:
        ...
    


class SendVideoNote(BaseResponse, ReplyToMixin, DisableNotificationMixin, ProtectContentMixin):
    """
    Use that response type for send video note on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], video_note: String, duration: Optional[Integer] = ..., length: Optional[Integer] = ..., disable_notification: Optional[Boolean] = ..., protect_content: Optional[Boolean] = ..., reply_to_message_id: Optional[Integer] = ..., reply_markup: Optional[Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String]] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat or username
            of the target channel (in the format @channelusername)
        :param video_note: String - Video note to send. Pass a file_id
            as String to send a video note that exists on the Telegram servers (recommended)
            or upload a new video using multipart/form-data. Sending video notes by a URL is currently unsupported
        :param duration: Integer (Optional) - Duration of sent video in seconds
        :param length: Integer (Optional) - Video width and height
        :param disable_notification: Boolean (Optional) - Sends the message silently.
            Users will receive a notification with no sound.
        :param protect_content: Boolean (Optional) - Protects the contents of sent messages
            from forwarding and saving
        :param reply_to_message_id: Integer (Optional) - If the message is a reply, ID of the original message
        :param reply_markup: Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String] (Optional)
            - Additional interface options. A JSON-serialized object for an inline keyboard,
            custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Boolean@__init__ | (() -> Self@SendVideoNote) | Unknown | Any | str | int | None]:
        ...
    


class SendMediaGroup(BaseResponse, ReplyToMixin, DisableNotificationMixin, ProtectContentMixin):
    """
    Use this method to send a group of photos or videos as an album.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], media: Union[types.MediaGroup, List] = ..., disable_notification: typing.Optional[Boolean] = ..., protect_content: Optional[Boolean] = ..., reply_to_message_id: typing.Optional[Integer] = ...) -> None:
        """
        Use this method to send a group of photos or videos as an album.

        Source: https://core.telegram.org/bots/api#sendmediagroup

        :param chat_id:	Unique identifier for the target chat or username of the target channel
        :type chat_id: :obj:`typing.Union[base.Integer, base.String]`
        :param media: A JSON-serialized array describing photos and videos to be sent
        :type media: :obj:`typing.Union[types.MediaGroup, typing.List]`
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :type disable_notification: :obj:`typing.Optional[base.Boolean]`
        :param protect_content: Boolean (Optional) - Protects the contents of sent messages
            from forwarding and saving
        :param reply_to_message_id: If the message is a reply, ID of the original message
        :type reply_to_message_id: :obj:`typing.Optional[base.Integer]`
        :return: On success, an array of the sent Messages is returned.
        :rtype: typing.List[types.Message]
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Unknown | Any | str | int | Boolean@__init__ | (() -> Self@SendMediaGroup) | None]:
        ...
    
    def attach_photo(self, photo: String, caption: String = ...): # -> Self@SendMediaGroup:
        """
        Attach photo

        :param photo:
        :param caption:
        :return: self
        """
        ...
    
    def attach_video(self, video: String, caption: String = ..., width: Integer = ..., height: Integer = ..., duration: Integer = ...): # -> Self@SendMediaGroup:
        """
        Attach video

        :param video:
        :param caption:
        :param width:
        :param height:
        :param duration:
        :return: self
        """
        ...
    


class SendLocation(BaseResponse, ReplyToMixin, DisableNotificationMixin, ProtectContentMixin):
    """
    Use that response type for send location on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], latitude: Float, longitude: Float, disable_notification: Optional[Boolean] = ..., protect_content: Optional[Boolean] = ..., reply_to_message_id: Optional[Integer] = ..., reply_markup: Optional[Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String]] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat or username
            of the target channel (in the format @channelusername)
        :param latitude: Float - Latitude of location
        :param longitude: Float - Longitude of location
        :param disable_notification: Boolean (Optional) - Sends the message silently.
            Users will receive a notification with no sound.
        :param protect_content: Boolean (Optional) - Protects the contents of sent messages
            from forwarding and saving
        :param reply_to_message_id: Integer (Optional) - If the message is a reply, ID of the original message
        :param reply_markup: Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String] (Optional)
            - Additional interface options. A JSON-serialized object for an inline keyboard,
            custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Float@__init__ | Boolean@__init__ | (() -> Self@SendLocation) | Unknown | Any | str | int | None]:
        ...
    


class SendVenue(BaseResponse, ReplyToMixin, DisableNotificationMixin, ProtectContentMixin):
    """
    Use that response type for send venue on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], latitude: Float, longitude: Float, title: String, address: String, foursquare_id: Optional[String] = ..., disable_notification: Optional[Boolean] = ..., protect_content: Optional[Boolean] = ..., reply_to_message_id: Optional[Integer] = ..., reply_markup: Optional[Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String]] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat or username
            of the target channel (in the format @channelusername)
        :param latitude: Float - Latitude of the venue
        :param longitude: Float - Longitude of the venue
        :param title: String - Name of the venue
        :param address: String - Address of the venue
        :param foursquare_id: String (Optional) - Foursquare identifier of the venue
        :param disable_notification: Boolean (Optional) - Sends the message silently.
            Users will receive a notification with no sound.
        :param protect_content: Boolean (Optional) - Protects the contents of sent messages
            from forwarding and saving
        :param reply_to_message_id: Integer (Optional) - If the message is a reply, ID of the original message
        :param reply_markup: Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String] (Optional)
            - Additional interface options. A JSON-serialized object for an inline keyboard,
            custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Float@__init__ | Boolean@__init__ | (() -> Self@SendVenue) | Unknown | Any | str | int | None]:
        ...
    


class SendContact(BaseResponse, ReplyToMixin, DisableNotificationMixin, ProtectContentMixin):
    """
    Use that response type for send contact on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], phone_number: String, first_name: String, last_name: Optional[String] = ..., disable_notification: Optional[Boolean] = ..., protect_content: Optional[Boolean] = ..., reply_to_message_id: Optional[Integer] = ..., reply_markup: Optional[Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String]] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat or
            username of the target channel (in the format @channelusername)
        :param phone_number: String - Contact's phone number
        :param first_name: String - Contact's first name
        :param last_name: String (Optional) - Contact's last name
        :param disable_notification: Boolean (Optional) - Sends the message silently.
            Users will receive a notification with no sound.
        :param protect_content: Boolean (Optional) - Protects the contents of sent messages
            from forwarding and saving
        :param reply_to_message_id: Integer (Optional) - If the message is a reply, ID of the original message
        :param reply_markup: Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String] (Optional)
            - Additional interface options. A JSON-serialized object for an inline keyboard,
            custom reply keyboard, instructions to remove keyboard or to force a reply from the user.
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Boolean@__init__ | (() -> Self@SendContact) | Unknown | Any | str | int | None]:
        ...
    


class SendChatAction(BaseResponse):
    """
    Use that response type for send chat action on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], action: String) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat or username
            of the target channel (in the format @channelusername)
        :param action: String - Type of action to broadcast. Choose one, depending on what the user is about to receive:
            typing for text messages, upload_photo for photos, record_video or upload_video for videos,
            record_audio or upload_audio for audio files, upload_document for general files,
            find_location for location data, record_video_note or upload_video_note for video notes.
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__]:
        ...
    


class KickChatMember(BaseResponse):
    """
    Use that response type for kick chat member on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], user_id: Integer, until_date: Optional[Union[Integer, datetime.datetime, datetime.timedelta]] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target group or username
            of the target supergroup or channel (in the format @channelusername)
        :param user_id: Integer - Unique identifier of the target user
        :param until_date: Integer - Date when the user will be unbanned, unix time. If user is banned for
            more than 366 days or less than 30 seconds from the current time they are considered to be banned forever
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Unknown | Any | str | int]:
        ...
    


class UnbanChatMember(BaseResponse):
    """
    Use that response type for unban chat member on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], user_id: Integer) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target group or
            username of the target supergroup or channel (in the format @username)
        :param user_id: Integer - Unique identifier of the target user
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__]:
        ...
    


class RestrictChatMember(BaseResponse):
    """
    Use that response type for restrict chat member on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], user_id: Integer, until_date: Optional[Union[Integer, datetime.datetime, datetime.timedelta]] = ..., can_send_messages: Optional[Boolean] = ..., can_send_media_messages: Optional[Boolean] = ..., can_send_other_messages: Optional[Boolean] = ..., can_add_web_page_previews: Optional[Boolean] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat
            or username of the target supergroup (in the format @supergroupusername)
        :param user_id: Integer - Unique identifier of the target user
        :param until_date: Integer - Date when restrictions will be lifted for the user, unix time.
            If user is restricted for more than 366 days or less than 30 seconds from the current time,
            they are considered to be restricted forever
        :param can_send_messages: Boolean - Pass True, if the user can send text messages, contacts,
            locations and venues
        :param can_send_media_messages: Boolean - Pass True, if the user can send audios, documents,
            photos, videos, video notes and voice notes, implies can_send_messages
        :param can_send_other_messages: Boolean - Pass True, if the user can send animations, games,
            stickers and use inline bots, implies can_send_media_messages
        :param can_add_web_page_previews: Boolean - Pass True, if the user may add web page previews
            to their messages, implies can_send_media_messages
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Unknown | Any | str | int | Boolean@__init__ | None]:
        ...
    


class PromoteChatMember(BaseResponse):
    """
    Use that response type for promote chat member on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], user_id: Integer, can_change_info: Optional[Boolean] = ..., can_post_messages: Optional[Boolean] = ..., can_edit_messages: Optional[Boolean] = ..., can_delete_messages: Optional[Boolean] = ..., can_invite_users: Optional[Boolean] = ..., can_restrict_members: Optional[Boolean] = ..., can_pin_messages: Optional[Boolean] = ..., can_manage_topics: Optional[Boolean] = ..., can_promote_members: Optional[Boolean] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat
            or username of the target channel (in the format @channelusername)
        :param user_id: Integer - Unique identifier of the target user
        :param can_change_info: Boolean - Pass True, if the administrator can change chat title,
            photo and other settings
        :param can_post_messages: Boolean - Pass True, if the administrator can create channel posts, channels only
        :param can_edit_messages: Boolean - Pass True, if the administrator can edit messages of other users,
            channels only
        :param can_delete_messages: Boolean - Pass True, if the administrator can delete messages of other users
        :param can_invite_users: Boolean - Pass True, if the administrator can invite new users to the chat
        :param can_restrict_members: Boolean - Pass True, if the administrator can restrict, ban or unban chat members
        :param can_pin_messages: Boolean - Pass True, if the administrator can pin messages, supergroups only
        :param can_manage_topics: Boolean - Pass True if the user is allowed to create, rename, close, and reopen forum
            topics, supergroups only
        :param can_promote_members: Boolean - Pass True, if the administrator can add new administrators
            with a subset of his own privileges or demote administrators that he has promoted,
            directly or indirectly (promoted by administrators that were appointed by him)
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Boolean@__init__ | None]:
        ...
    


class DeleteChatPhoto(BaseResponse):
    """
    Use that response type for delete chat photo on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String]) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat
            or username of the target channel (in the format @channelusername)
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__]:
        ...
    


class SetChatTitle(BaseResponse):
    """
    Use that response type for set chat title on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], title: String) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat or username
            of the target channel (in the format @channelusername)
        :param title: String - New chat title, 1-255 characters
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__]:
        ...
    


class SetChatDescription(BaseResponse):
    """
    Use that response type for set chat description on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], description: String) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat
            or username of the target channel (in the format @channelusername)
        :param description: String - New chat description, 0-255 characters
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__]:
        ...
    


class PinChatMessage(BaseResponse, DisableNotificationMixin):
    """
    Use that response type for pin chat message on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], message_id: Integer, disable_notification: Optional[Boolean] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat
            or username of the target supergroup (in the format @supergroupusername)
        :param message_id: Integer - Identifier of a message to pin
        :param disable_notification: Boolean - Pass True, if it is not necessary to send a notification
            to all group members about the new pinned message
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Boolean@__init__ | None]:
        ...
    


class UnpinChatMessage(BaseResponse):
    """
    Use that response type for unpin chat message on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String]) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat or
            username of the target supergroup (in the format @supergroupusername)
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__]:
        ...
    


class LeaveChat(BaseResponse):
    """
    Use that response type for leave chat on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String]) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat
            or username of the target supergroup or channel (in the format @channelusername)
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__]:
        ...
    


class AnswerCallbackQuery(BaseResponse):
    """
    Use that response type for answer callback query on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, callback_query_id: String, text: Optional[String] = ..., show_alert: Optional[Boolean] = ..., url: Optional[String] = ..., cache_time: Optional[Integer] = ...) -> None:
        """
        :param callback_query_id: String - Unique identifier for the query to be answered
        :param text: String (Optional) - Text of the notification. If not specified, nothing will be shown to the user,
            0-200 characters
        :param show_alert: Boolean (Optional) - If true, an alert will be shown by the client instead
            of a notification at the top of the chat screen. Defaults to false.
        :param url: String (Optional) - URL that will be opened by the user's client.
            If you have created a Game and accepted the conditions via @Botfather,
            specify the URL that opens your game – note that this will only work
            if the query comes from a callback_game button.
            Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter.
        :param cache_time: Integer (Optional) - The maximum amount of time in seconds that the result
            of the callback query may be cached client-side. Telegram apps will support
            caching starting in version 3.14. Defaults to 0.
        """
        ...
    
    def prepare(self): # -> dict[str, String@__init__ | Boolean@__init__ | Integer@__init__ | None]:
        ...
    


class EditMessageText(BaseResponse, ParseModeMixin, DisableWebPagePreviewMixin):
    """
    Use that response type for edit message text on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, text: String, chat_id: Optional[Union[Integer, String]] = ..., message_id: Optional[Integer] = ..., inline_message_id: Optional[String] = ..., parse_mode: Optional[String] = ..., disable_web_page_preview: Optional[Boolean] = ..., reply_markup: Optional[types.InlineKeyboardMarkup] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] (Optional) - Required if inline_message_id
            is not specified. Unique identifier for the target chat or username of the target channel
            (in the format @channelusername)
        :param message_id: Integer (Optional) - Required if inline_message_id is not specified.
            Identifier of the sent message
        :param inline_message_id: String (Optional) - Required if chat_id and message_id are not specified.
            Identifier of the inline message
        :param text: String - New text of the message
        :param parse_mode: String (Optional) - Send Markdown or HTML, if you want Telegram apps to show bold,
            italic, fixed-width text or inline URLs in your bot's message.
        :param disable_web_page_preview: Boolean (Optional) - Disables link previews for links in this message
        :param reply_markup: types.InlineKeyboardMarkup (Optional) - A JSON-serialized object for
            an inline keyboard.
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Any | str* | bool* | Unknown | str | int | None]:
        ...
    


class EditMessageCaption(BaseResponse):
    """
    Use that response type for edit message caption on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Optional[Union[Integer, String]] = ..., message_id: Optional[Integer] = ..., inline_message_id: Optional[String] = ..., caption: Optional[String] = ..., reply_markup: Optional[types.InlineKeyboardMarkup] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] (Optional) - Required if inline_message_id
            is not specified. Unique identifier for the target chat or username of the target channel
            (in the format @channelusername)
        :param message_id: Integer (Optional) - Required if inline_message_id is not specified.
            Identifier of the sent message
        :param inline_message_id: String (Optional) - Required if chat_id and message_id are not specified.
            Identifier of the inline message
        :param caption: String (Optional) - New caption of the message
        :param reply_markup: types.InlineKeyboardMarkup (Optional) - A JSON-serialized object for an inline keyboard.
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Unknown | Any | str | int | None]:
        ...
    


class EditMessageReplyMarkup(BaseResponse):
    """
    Use that response type for edit message reply markup on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Optional[Union[Integer, String]] = ..., message_id: Optional[Integer] = ..., inline_message_id: Optional[String] = ..., reply_markup: Optional[types.InlineKeyboardMarkup] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] (Optional) - Required if inline_message_id is not specified.
            Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_id: Integer (Optional) - Required if inline_message_id is not specified.
            Identifier of the sent message
        :param inline_message_id: String (Optional) - Required if chat_id and message_id are not specified.
            Identifier of the inline message
        :param reply_markup: types.InlineKeyboardMarkup (Optional) - A JSON-serialized object for an inline keyboard.
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Unknown | Any | str | int | None]:
        ...
    


class DeleteMessage(BaseResponse):
    """
    Use that response type for delete message on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], message_id: Integer) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat or username
            of the target channel (in the format @channelusername)
        :param message_id: Integer - Identifier of the message to delete
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__]:
        ...
    


class SendSticker(BaseResponse, ReplyToMixin, DisableNotificationMixin, ProtectContentMixin):
    """
    Use that response type for send sticker on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Union[Integer, String], sticker: String, disable_notification: Optional[Boolean] = ..., protect_content: Optional[Boolean] = ..., reply_to_message_id: Optional[Integer] = ..., reply_markup: Optional[Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String]] = ...) -> None:
        """
        :param chat_id: Union[Integer, String] - Unique identifier for the target chat or username
            of the target channel (in the format @channelusername)
        :param sticker: String - Sticker to send. Pass a file_id
            as String to send a file that exists on the Telegram servers (recommended),
            pass an HTTP URL as a String for Telegram to get a .webp file from the Internet,
            or upload a new one using multipart/form-data. More info on Sending Files »
        :param disable_notification: Boolean (Optional) - Sends the message silently.
            Users will receive a notification with no sound.
        :param protect_content: Boolean (Optional) - Protects the contents of sent messages
            from forwarding and saving
        :param reply_to_message_id: Integer (Optional) - If the message is a reply, ID of the original message
        :param reply_markup: Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup, Dict, String] (Optional) -
            Additional interface options. A JSON-serialized object for an inline keyboard,
            custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Boolean@__init__ | (() -> Self@SendSticker) | Unknown | Any | str | int | None]:
        ...
    


class CreateNewStickerSet(BaseResponse):
    """
    Use that response type for create new sticker set on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, user_id: Integer, name: String, title: String, png_sticker: String, emojis: String, contains_masks: Optional[Boolean] = ..., mask_position: Optional[types.MaskPosition] = ...) -> None:
        """
        :param user_id: Integer - User identifier of created sticker set owner
        :param name: String - Short name of sticker set, to be used in t.me/addstickers/ URLs (e.g., animals).
            Can contain only english letters, digits and underscores. Must begin with a letter,
            can't contain consecutive underscores and must end in “_by_<bot username>”. <bot_username>
            is case insensitive. 1-64 characters.
        :param title: String - Sticker set title, 1-64 characters
        :param png_sticker: String - Png image with the sticker,
            must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width
            or height must be exactly 512px. Pass a file_id as a String to send a file that
            already exists on the Telegram servers, pass an HTTP URL
            as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data.
        :param emojis: String - One or more emoji corresponding to the sticker
        :param contains_masks: Boolean (Optional) - Pass True, if a set of mask stickers should be created
        :param mask_position: types.MaskPosition (Optional) - Position where the mask should be placed on faces
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Boolean@__init__ | MaskPosition | None]:
        ...
    


class AddStickerToSet(BaseResponse):
    """
    Use that response type for add sticker to set on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, user_id: Integer, name: String, png_sticker: String, emojis: String, mask_position: Optional[types.MaskPosition] = ...) -> None:
        """
        :param user_id: Integer - User identifier of sticker set owner
        :param name: String - Sticker set name
        :param png_sticker: String - Png image with the sticker,
            must be up to 512 kilobytes in size, dimensions must not exceed 512px,
            and either width or height must be exactly 512px. Pass a file_id as a String
            to send a file that already exists on the Telegram servers, pass an HTTP URL
            as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data.
        :param emojis: String - One or more emoji corresponding to the sticker
        :param mask_position: types.MaskPosition (Optional) - Position where the mask should be placed on faces
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Unknown | Any | str | int]:
        ...
    


class SetStickerPositionInSet(BaseResponse):
    """
    Use that response type for set sticker position in set on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, sticker: String, position: Integer) -> None:
        """
        :param sticker: String - File identifier of the sticker
        :param position: Integer - New sticker position in the set, zero-based
        """
        ...
    
    def prepare(self): # -> dict[str, String@__init__ | Integer@__init__]:
        ...
    


class DeleteStickerFromSet(BaseResponse):
    """
    Use that response type for delete sticker from set on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, sticker: String) -> None:
        """
        :param sticker: String - File identifier of the sticker
        """
        ...
    
    def prepare(self): # -> dict[str, String@__init__]:
        ...
    


class AnswerInlineQuery(BaseResponse):
    """
    Use that response type for answer inline query on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, inline_query_id: String, results: [types.InlineQueryResult], cache_time: Optional[Integer] = ..., is_personal: Optional[Boolean] = ..., next_offset: Optional[String] = ..., switch_pm_text: Optional[String] = ..., switch_pm_parameter: Optional[String] = ...) -> None:
        """
        :param inline_query_id: String - Unique identifier for the answered query
        :param results: [types.InlineQueryResult] - A JSON-serialized array of results for the inline query
        :param cache_time: Integer (Optional) - The maximum amount of time in seconds that the result
            of the inline query may be cached on the server. Defaults to 300.
        :param is_personal: Boolean (Optional) - Pass True, if results may be cached on the server side
            only for the user that sent the query. By default, results may be returned
            to any user who sends the same query
        :param next_offset: String (Optional) - Pass the offset that a client should send in the
            next query with the same text to receive more results.
            Pass an empty string if there are no more results or if you don‘t support pagination.
            Offset length can’t exceed 64 bytes.
        :param switch_pm_text: String (Optional) - If passed, clients will display a button with specified text
            that switches the user to a private chat with the bot and sends the bot a start
            message with the parameter switch_pm_parameter
        :param switch_pm_parameter: String (Optional) - Deep-linking parameter for the /start message
            sent to the bot when user presses the switch button. 1-64 characters,
            only A-Z, a-z, 0-9, _ and - are allowed.
            Example: An inline bot that sends YouTube videos can ask the user to connect the bot to their
            YouTube account to adapt search results accordingly. To do this,
            it displays a ‘Connect your YouTube account’ button above the results, or even before showing any.
            The user presses the button, switches to a private chat with the bot and,
            in doing so, passes a start parameter that instructs the bot to return an oauth link.
            Once done, the bot can offer a switch_inline button so that the user can easily return
            to the chat where they wanted to use the bot's inline capabilities.
        """
        ...
    
    def prepare(self): # -> dict[str, String@__init__ | Unknown | Any | str | int | Integer@__init__ | Boolean@__init__ | None]:
        ...
    


class SendInvoice(BaseResponse, ReplyToMixin, DisableNotificationMixin):
    """
    Use that response type for send invoice on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Integer, title: String, description: String, payload: String, provider_token: String, start_parameter: String, currency: String, prices: [types.LabeledPrice], photo_url: Optional[String] = ..., photo_size: Optional[Integer] = ..., photo_width: Optional[Integer] = ..., photo_height: Optional[Integer] = ..., need_name: Optional[Boolean] = ..., need_phone_number: Optional[Boolean] = ..., need_email: Optional[Boolean] = ..., need_shipping_address: Optional[Boolean] = ..., send_phone_number_to_provider: Optional[Boolean] = ..., send_email_to_provider: Optional[Boolean] = ..., is_flexible: Optional[Boolean] = ..., disable_notification: Optional[Boolean] = ..., protect_content: Optional[Boolean] = ..., reply_to_message_id: Optional[Integer] = ..., reply_markup: Optional[types.InlineKeyboardMarkup] = ...) -> None:
        """
        :param chat_id: Integer - Unique identifier for the target private chat
        :param title: String - Product name, 1-32 characters
        :param description: String - Product description, 1-255 characters
        :param payload: String - Bot-defined invoice payload, 1-128 bytes.
            This will not be displayed to the user, use for your internal processes.
        :param provider_token: String - Payments provider token, obtained via Botfather
        :param start_parameter: String - Unique deep-linking parameter that can be used to
            generate this invoice when used as a start parameter
        :param currency: String - Three-letter ISO 4217 currency code, see more on currencies
        :param prices: [types.LabeledPrice] - Price breakdown, a list of components
            (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
        :param photo_url: String (Optional) - URL of the product photo for the invoice.
            Can be a photo of the goods or a marketing image for a service.
            People like it better when they see what they are paying for.
        :param photo_size: Integer (Optional) - Photo size
        :param photo_width: Integer (Optional) - Photo width
        :param photo_height: Integer (Optional) - Photo height
        :param need_name: Boolean (Optional) - Pass True, if you require the user's full name to complete the order
        :param need_phone_number: Boolean (Optional) - Pass True, if you require
            the user's phone number to complete the order
        :param need_email: Boolean (Optional) - Pass True, if you require the user's email to complete the order
        :param need_shipping_address: Boolean (Optional) - Pass True, if you require the user's
            shipping address to complete the order
        :param send_phone_number_to_provider: Boolean (Optional) - Pass True, if user's phone number should be sent
            to provider
        :param send_email_to_provider: Boolean (Optional) - Pass True, if user's email address should be sent 
            to provider
        :param is_flexible: Boolean (Optional) - Pass True, if the final price depends on the shipping method
        :param disable_notification: Boolean (Optional) - Sends the message silently.
            Users will receive a notification with no sound.
        :param protect_content: Boolean (Optional) - Protects the contents of sent messages
            from forwarding and saving
        :param reply_to_message_id: Integer (Optional) - If the message is a reply, ID of the original message
        :param reply_markup: types.InlineKeyboardMarkup (Optional) - A JSON-serialized object for an inline keyboard.
            If empty, one 'Pay total price' button will be shown. If not empty, the first button must be a Pay button.
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Unknown | Any | str | int | Boolean@__init__ | None]:
        ...
    


class AnswerShippingQuery(BaseResponse):
    """
    Use that response type for answer shipping query on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, shipping_query_id: String, ok: Boolean, shipping_options: Optional[typing.List[types.ShippingOption]] = ..., error_message: Optional[String] = ...) -> None:
        """
        :param shipping_query_id: String - Unique identifier for the query to be answered
        :param ok: Boolean - Specify True if delivery to the specified address is possible and
            False if there are any problems (for example, if delivery to the specified address is not possible)
        :param shipping_options: [types.ShippingOption] (Optional) - Required if ok is True.
            A JSON-serialized array of available shipping options.
        :param error_message: String (Optional) - Required if ok is False.
            Error message in human readable form that explains why it is impossible to complete the order
            (e.g. "Sorry, delivery to your desired address is unavailable').
            Telegram will display this message to the user.
        """
        ...
    
    def prepare(self): # -> dict[str, String@__init__ | Boolean@__init__ | Unknown | Any | str | int | None]:
        ...
    


class AnswerPreCheckoutQuery(BaseResponse):
    """
    Use that response type for answer pre checkout query on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, pre_checkout_query_id: String, ok: Boolean, error_message: Optional[String] = ...) -> None:
        """
        :param pre_checkout_query_id: String - Unique identifier for the query to be answered
        :param ok: Boolean - Specify True if everything is alright (goods are available, etc.)
            and the bot is ready to proceed with the order. Use False if there are any problems.
        :param error_message: String (Optional) - Required if ok is False.
            Error message in human readable form that explains the reason for failure to proceed with the checkout
            (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy
            filling out your payment details. Please choose a different color or garment!").
            Telegram will display this message to the user.
        """
        ...
    
    def prepare(self): # -> dict[str, String@__init__ | Boolean@__init__ | None]:
        ...
    


class SendGame(BaseResponse, ReplyToMixin, DisableNotificationMixin, ProtectContentMixin):
    """
    Use that response type for send game on to webhook.
    """
    __slots__ = ...
    method = ...
    def __init__(self, chat_id: Integer, game_short_name: String, disable_notification: Optional[Boolean] = ..., protect_content: Optional[Boolean] = ..., reply_to_message_id: Optional[Integer] = ..., reply_markup: Optional[types.InlineKeyboardMarkup] = ...) -> None:
        """
        :param chat_id: Integer - Unique identifier for the target chat
        :param game_short_name: String - Short name of the game, serves as the unique identifier for the game.
            Set up your games via Botfather.
        :param disable_notification: Boolean (Optional) - Sends the message silently.
            Users will receive a notification with no sound.
        :param protect_content: Boolean (Optional) - Protects the contents of sent messages
            from forwarding and saving
        :param reply_to_message_id: Integer (Optional) - If the message is a reply, ID of the original message
        :param reply_markup: types.InlineKeyboardMarkup (Optional) - A JSON-serialized object for an inline keyboard.
            If empty, one ‘Play game_title’ button will be shown. If not empty, the first button must launch the game.
        """
        ...
    
    def prepare(self): # -> dict[str, Integer@__init__ | String@__init__ | Boolean@__init__ | (() -> Self@SendGame) | Unknown | Any | str | int | None]:
        ...
    


