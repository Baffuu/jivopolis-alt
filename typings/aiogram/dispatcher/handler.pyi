"""
This type stub file was generated by pyright.
"""

import inspect
import typing
from dataclasses import dataclass

ctx_data = ...
current_handler = ...
@dataclass
class FilterObj:
    filter: callable
    kwargs: dict
    is_async: bool
    ...


class SkipHandler(Exception):
    ...


class CancelHandler(Exception):
    ...


class Handler:
    def __init__(self, dispatcher, once=..., middleware_key=...) -> None:
        ...
    
    def register(self, handler, filters=..., index=...): # -> None:
        """
        Register callback

        Filters can be awaitable or not.

        :param handler: coroutine
        :param filters: list of filters
        :param index: you can reorder handlers
        """
        ...
    
    def unregister(self, handler): # -> Literal[True]:
        """
        Remove handler

        :param handler: callback
        :return:
        """
        ...
    
    async def notify(self, *args):
        """
        Notify handlers

        :param args:
        :return:
        """
        ...
    
    @dataclass
    class HandlerObj:
        handler: callable
        spec: inspect.FullArgSpec
        filters: typing.Optional[typing.Iterable[FilterObj]] = ...
    
    


