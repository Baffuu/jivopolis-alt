"""
This type stub file was generated by pyright.
"""

import asyncio
import contextlib
import io
import pathlib
import typing
import aiohttp
from typing import Dict, List, Optional, Union
from .api import TelegramAPIServer
from ..types import base
from ..utils.deprecated import deprecated

class BaseBot:
    """
    Base class for bot. It's raw bot.
    """
    _ctx_timeout = ...
    _ctx_token = ...
    def __init__(self, token: base.String, loop: Optional[Union[asyncio.BaseEventLoop, asyncio.AbstractEventLoop]] = ..., connections_limit: Optional[base.Integer] = ..., proxy: Optional[base.String] = ..., proxy_auth: Optional[aiohttp.BasicAuth] = ..., validate_token: Optional[base.Boolean] = ..., parse_mode: typing.Optional[base.String] = ..., disable_web_page_preview: Optional[base.Boolean] = ..., protect_content: Optional[base.Boolean] = ..., timeout: typing.Optional[typing.Union[base.Integer, base.Float, aiohttp.ClientTimeout]] = ..., server: TelegramAPIServer = ...) -> None:
        """
        Instructions how to get Bot token is found here: https://core.telegram.org/bots#3-how-do-i-create-a-bot

        :param token: token from @BotFather
        :type token: :obj:`str`
        :param loop: event loop
        :type loop: Optional Union :obj:`asyncio.BaseEventLoop`, :obj:`asyncio.AbstractEventLoop`
        :param connections_limit: connections limit for aiohttp.ClientSession
        :type connections_limit: :obj:`int`
        :param proxy: HTTP proxy URL
        :type proxy: :obj:`str`
        :param proxy_auth: Authentication information
        :type proxy_auth: Optional :obj:`aiohttp.BasicAuth`
        :param validate_token: Validate token.
        :type validate_token: :obj:`bool`
        :param parse_mode: You can set default parse mode
        :type parse_mode: :obj:`str`
        :param disable_web_page_preview: You can set default disable web page preview parameter
        :type disable_web_page_preview: :obj:`bool`
        :param protect_content: Protects the contents of sent messages
            from forwarding and saving
        :type protect_content: :obj:`typing.Optional[base.Boolean]`
        :param timeout: Request timeout
        :type timeout: :obj:`typing.Optional[typing.Union[base.Integer, base.Float, aiohttp.ClientTimeout]]`
        :param server: Telegram Bot API Server endpoint.
        :type server: :obj:`TelegramAPIServer`
        :raise: when token is invalid throw an :obj:`aiogram.utils.exceptions.ValidationError`
        """
        ...
    
    async def get_new_session(self) -> aiohttp.ClientSession:
        ...
    
    @property
    def loop(self) -> Optional[asyncio.AbstractEventLoop]:
        ...
    
    async def get_session(self) -> Optional[aiohttp.ClientSession]:
        ...
    
    @property
    @deprecated(reason="Client session should be created inside async function, use `await bot.get_session()` instead", stacklevel=3)
    def session(self) -> Optional[aiohttp.ClientSession]:
        ...
    
    @property
    def timeout(self): # -> Any | ClientTimeout:
        ...
    
    @timeout.setter
    def timeout(self, value): # -> None:
        ...
    
    @timeout.deleter
    def timeout(self): # -> None:
        ...
    
    @contextlib.contextmanager
    def request_timeout(self, timeout: typing.Union[base.Integer, base.Float, aiohttp.ClientTimeout]): # -> Generator[None, None, None]:
        """
        Context manager implements opportunity to change request timeout in current context

        :param timeout: Request timeout
        :type timeout: :obj:`typing.Optional[typing.Union[base.Integer, base.Float, aiohttp.ClientTimeout]]`
        :return:
        """
        ...
    
    @contextlib.contextmanager
    def with_token(self, bot_token: base.String, validate_token: Optional[base.Boolean] = ...): # -> Generator[None, None, None]:
        ...
    
    @deprecated("This method's behavior will be changed in aiogram v3.0. " "More info: https://core.telegram.org/bots/api#close", stacklevel=3)
    async def close(self): # -> None:
        """
        Close all client sessions
        """
        ...
    
    async def request(self, method: base.String, data: Optional[Dict] = ..., files: Optional[Dict] = ..., **kwargs) -> Union[List, Dict, base.Boolean]:
        """
        Make an request to Telegram Bot API

        https://core.telegram.org/bots/api#making-requests

        :param method: API method
        :type method: :obj:`str`
        :param data: request parameters
        :type data: :obj:`dict`
        :param files: files
        :type files: :obj:`dict`
        :return: result
        :rtype: Union[List, Dict]
        :raise: :obj:`aiogram.exceptions.TelegramApiError`
        """
        ...
    
    async def download_file(self, file_path: base.String, destination: Optional[Union[base.InputFile, pathlib.Path]] = ..., timeout: Optional[base.Integer] = ..., chunk_size: Optional[base.Integer] = ..., seek: Optional[base.Boolean] = ..., destination_dir: Optional[Union[str, pathlib.Path]] = ..., make_dirs: Optional[base.Boolean] = ...) -> Union[io.BytesIO, io.FileIO]:
        """
        Download file by file_path to destination file or directory

        if You want to automatically create destination (:class:`io.BytesIO`) use default
        value of destination and handle result of this method.

        At most one of these parameters can be used: :param destination:, :param destination_dir:

        :param file_path: file path on telegram server (You can get it from :obj:`aiogram.types.File`)
        :type file_path: :obj:`str`
        :param destination: filename or instance of :class:`io.IOBase`. For e. g. :class:`io.BytesIO`
        :param timeout: Integer
        :param chunk_size: Integer
        :param seek: Boolean - go to start of file when downloading is finished.
        :param destination_dir: directory for saving files
        :param make_dirs: Make dirs if not exist
        :return: destination
        """
        ...
    
    def get_file_url(self, file_path): # -> str:
        ...
    
    async def send_file(self, file_type, method, file, payload) -> Union[Dict, base.Boolean]:
        """
        Send file

        https://core.telegram.org/bots/api#inputfile

        :param file_type: field name
        :param method: API method
        :param file: String or io.IOBase
        :param payload: request payload
        :return: response
        """
        ...
    
    @property
    def parse_mode(self): # -> Any | None:
        ...
    
    @parse_mode.setter
    def parse_mode(self, value): # -> None:
        ...
    
    @parse_mode.deleter
    def parse_mode(self): # -> None:
        ...
    
    @property
    def disable_web_page_preview(self): # -> Any | None:
        ...
    
    @disable_web_page_preview.setter
    def disable_web_page_preview(self, value): # -> None:
        ...
    
    @disable_web_page_preview.deleter
    def disable_web_page_preview(self): # -> None:
        ...
    
    @property
    def protect_content(self): # -> Any | None:
        ...
    
    @protect_content.setter
    def protect_content(self, value): # -> None:
        ...
    
    @protect_content.deleter
    def protect_content(self): # -> None:
        ...
    
    def check_auth_widget(self, data): # -> bool:
        ...
    


