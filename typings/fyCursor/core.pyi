# flake8: noqa
# type: ignore
"""
This type stub file was generated by pyright.
"""

import sqlite3
from typing import Any, Union

def connect(database: str) -> fyCursor:
    ...

class fyCursor(sqlite3.Cursor):
    """
    Custom `sqlite3.Cursor` that can be used without string query. \n
    I just hate query because it does not have any highlighting in IDE, yeah.

    https://github.com/felixyeahh/fyCursor
    """
    def __init__(self, __cursor: sqlite3.Connection, logger=...) -> None:
        """
        Initialise a cursor.

        :param __cursor - sqlite3 connection
        :param logger - custom logger (Optional) 
        """
        ...

    def update(self, table) -> fyCursor:
        """
        Use this as SQL `UPDATE {table}` method

        :param table: - table to be updated
        :returns: - self
        """
        ...

    def add(self, **kwargs) -> fyCursor:
        """
        Use this as SQL `SET {kwargs.keys}={kwargs.keys}+{kwargs.values}`
        
        **kwargs

        :returns: - self

        :raises: - `sqlite3.ProgrammingError` if you didn't use `fyCursor.update()` 
        or something similar before this statement
        """
        ...
    
    def set(self, **kwargs) -> fyCursor:
        """
        Use this as SQL `SET {kwargs.keys}={kwargs.values}`

        :returns: - self

        :raises: - `sqlite3.ProgrammingError` if you didn't use `fyCursor.update()` 
        or something similar before this statement
        """
        ...
    
    def select(self, value, from_=...) -> fyCursor:
        """
        Use this as SQL `SELECT {value} FROM {from_}`

        :param value: - value to be selected
        :param from_: - table from which value will be selected

        :returns: - self
        """
        ...
    
    def where(self, **kwargs) -> fyCursor:
        ...
    
    def fetch(self, one: bool = ...) -> Union[list, tuple[Any], None]:
        """
        fetch values from cursor query
        
        :param one - if `True` provided, the `cursor.fetchone()` function will be used
        """
        ...
    
    def one(self) -> Any:
        """
        returns exact one result of fetching, not tuple
        """
        ...
    
    def commit(self) -> fyCursor:
        ...
    


